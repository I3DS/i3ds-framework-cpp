#ifndef GENERATED_ASN1SCC_Sensor_H
#define GENERATED_ASN1SCC_Sensor_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Temperature.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef T_UInt32 SamplePeriod;

#define SamplePeriod_REQUIRED_BYTES_FOR_ENCODING       4 
#define SamplePeriod_REQUIRED_BITS_FOR_ENCODING        32
#define SamplePeriod_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define SamplePeriod_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define SamplePeriod_REQUIRED_BYTES_FOR_XER_ENCODING   49

void SamplePeriod_Initialize(SamplePeriod* pVal);
flag SamplePeriod_IsConstraintValid(const SamplePeriod* val, int* pErrCode);


typedef T_UInt32 BatchSize;

#define BatchSize_REQUIRED_BYTES_FOR_ENCODING       4 
#define BatchSize_REQUIRED_BITS_FOR_ENCODING        32
#define BatchSize_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define BatchSize_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define BatchSize_REQUIRED_BYTES_FOR_XER_ENCODING   43

void BatchSize_Initialize(BatchSize* pVal);
flag BatchSize_IsConstraintValid(const BatchSize* val, int* pErrCode);


typedef T_UInt32 BatchCount;

#define BatchCount_REQUIRED_BYTES_FOR_ENCODING       4 
#define BatchCount_REQUIRED_BITS_FOR_ENCODING        32
#define BatchCount_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define BatchCount_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define BatchCount_REQUIRED_BYTES_FOR_XER_ENCODING   45

void BatchCount_Initialize(BatchCount* pVal);
flag BatchCount_IsConstraintValid(const BatchCount* val, int* pErrCode);


typedef struct {
    SamplePeriod period;
    BatchSize batch_size;
    BatchCount batch_count;
} SampleCommand;

#define SampleCommand_REQUIRED_BYTES_FOR_ENCODING       12 
#define SampleCommand_REQUIRED_BITS_FOR_ENCODING        96
#define SampleCommand_REQUIRED_BYTES_FOR_ACN_ENCODING   12 
#define SampleCommand_REQUIRED_BITS_FOR_ACN_ENCODING    96
#define SampleCommand_REQUIRED_BYTES_FOR_XER_ENCODING   160

void SampleCommand_Initialize(SampleCommand* pVal);
flag SampleCommand_IsConstraintValid(const SampleCommand* val, int* pErrCode);


typedef struct {
    T_String device;
    SamplePeriod period;
    BatchSize batch_size;
    BatchCount batch_count;
} SensorConfiguration;

#define SensorConfiguration_REQUIRED_BYTES_FOR_ENCODING       270 
#define SensorConfiguration_REQUIRED_BITS_FOR_ENCODING        2153
#define SensorConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING   270 
#define SensorConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING    2153
#define SensorConfiguration_REQUIRED_BYTES_FOR_XER_ENCODING   701

void SensorConfiguration_Initialize(SensorConfiguration* pVal);
flag SensorConfiguration_IsConstraintValid(const SensorConfiguration* val, int* pErrCode);


typedef enum {
    inactive = 0,
    standby = 1,
    operational = 2,
    failure = 3
} SensorState;

#define SensorState_REQUIRED_BYTES_FOR_ENCODING       1 
#define SensorState_REQUIRED_BITS_FOR_ENCODING        2
#define SensorState_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define SensorState_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define SensorState_REQUIRED_BYTES_FOR_XER_ENCODING   44

void SensorState_Initialize(SensorState* pVal);
flag SensorState_IsConstraintValid(const SensorState* val, int* pErrCode);
#ifndef ERR_SensorState_unknown_enumeration_value 
#define ERR_SensorState_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_SensorState 
#define ERR_SensorState		1001  /**/
#endif

typedef struct {
    SensorState state;
    Temperature temperature;
} SensorStatus;

#define SensorStatus_REQUIRED_BYTES_FOR_ENCODING       14 
#define SensorStatus_REQUIRED_BITS_FOR_ENCODING        106
#define SensorStatus_REQUIRED_BYTES_FOR_ACN_ENCODING   14 
#define SensorStatus_REQUIRED_BITS_FOR_ACN_ENCODING    106
#define SensorStatus_REQUIRED_BYTES_FOR_XER_ENCODING   155

void SensorStatus_Initialize(SensorStatus* pVal);
flag SensorStatus_IsConstraintValid(const SensorStatus* val, int* pErrCode);


typedef enum {
    activate = 0,
    start = 1,
    stop = 2,
    deactivate = 3
} StateCommand;

#define StateCommand_REQUIRED_BYTES_FOR_ENCODING       1 
#define StateCommand_REQUIRED_BITS_FOR_ENCODING        2
#define StateCommand_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define StateCommand_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define StateCommand_REQUIRED_BYTES_FOR_XER_ENCODING   40

void StateCommand_Initialize(StateCommand* pVal);
flag StateCommand_IsConstraintValid(const StateCommand* val, int* pErrCode);
#ifndef ERR_StateCommand_unknown_enumeration_value 
#define ERR_StateCommand_unknown_enumeration_value		1004  /**/
#endif
#ifndef ERR_StateCommand 
#define ERR_StateCommand		1003  /**/
#endif

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag SamplePeriod_Encode(const SamplePeriod* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SamplePeriod_Decode(SamplePeriod* pVal, BitStream* pBitStrm, int* pErrCode);
flag BatchSize_Encode(const BatchSize* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag BatchSize_Decode(BatchSize* pVal, BitStream* pBitStrm, int* pErrCode);
flag BatchCount_Encode(const BatchCount* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag BatchCount_Decode(BatchCount* pVal, BitStream* pBitStrm, int* pErrCode);
flag SampleCommand_Encode(const SampleCommand* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SampleCommand_Decode(SampleCommand* pVal, BitStream* pBitStrm, int* pErrCode);
flag SensorConfiguration_Encode(const SensorConfiguration* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SensorConfiguration_Decode(SensorConfiguration* pVal, BitStream* pBitStrm, int* pErrCode);
flag SensorState_Encode(const SensorState* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SensorState_Decode(SensorState* pVal, BitStream* pBitStrm, int* pErrCode);
flag SensorStatus_Encode(const SensorStatus* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SensorStatus_Decode(SensorStatus* pVal, BitStream* pBitStrm, int* pErrCode);
flag StateCommand_Encode(const StateCommand* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag StateCommand_Decode(StateCommand* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_inactive	inactive
#define ENUM_standby	standby
#define ENUM_operational	operational
#define ENUM_failure	failure
#define ENUM_activate	activate
#define ENUM_start	start
#define ENUM_stop	stop
#define ENUM_deactivate	deactivate

#endif

#endif
