#ifndef GENERATED_ASN1SCC_Eigen_H
#define GENERATED_ASN1SCC_Eigen_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    T_Double arr[6];
} Vector6d;

#define Vector6d_REQUIRED_BYTES_FOR_ENCODING       79 
#define Vector6d_REQUIRED_BITS_FOR_ENCODING        627
#define Vector6d_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define Vector6d_REQUIRED_BITS_FOR_ACN_ENCODING    627
#define Vector6d_REQUIRED_BYTES_FOR_XER_ENCODING   447

void Vector6d_Initialize(Vector6d* pVal);
flag Vector6d_IsConstraintValid(const Vector6d* val, int* pErrCode);
#ifndef ERR_Vector6d 
#define ERR_Vector6d		1001  /*(SIZE(1 .. 6))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[3];
} Vector3d;

#define Vector3d_REQUIRED_BYTES_FOR_ENCODING       40 
#define Vector3d_REQUIRED_BITS_FOR_ENCODING        314
#define Vector3d_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define Vector3d_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define Vector3d_REQUIRED_BYTES_FOR_XER_ENCODING   234

void Vector3d_Initialize(Vector3d* pVal);
flag Vector3d_IsConstraintValid(const Vector3d* val, int* pErrCode);
#ifndef ERR_Vector3d 
#define ERR_Vector3d		1002  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[4];
} Quaterniond;

#define Quaterniond_REQUIRED_BYTES_FOR_ENCODING       53 
#define Quaterniond_REQUIRED_BITS_FOR_ENCODING        418
#define Quaterniond_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define Quaterniond_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define Quaterniond_REQUIRED_BYTES_FOR_XER_ENCODING   311

void Quaterniond_Initialize(Quaterniond* pVal);
flag Quaterniond_IsConstraintValid(const Quaterniond* val, int* pErrCode);
#ifndef ERR_Quaterniond 
#define ERR_Quaterniond		1003  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[100];
} VectorXd;

#define VectorXd_REQUIRED_BYTES_FOR_ENCODING       1301 
#define VectorXd_REQUIRED_BITS_FOR_ENCODING        10407
#define VectorXd_REQUIRED_BYTES_FOR_ACN_ENCODING   1301 
#define VectorXd_REQUIRED_BITS_FOR_ACN_ENCODING    10407
#define VectorXd_REQUIRED_BYTES_FOR_XER_ENCODING   7121

void VectorXd_Initialize(VectorXd* pVal);
flag VectorXd_IsConstraintValid(const VectorXd* val, int* pErrCode);
#ifndef ERR_VectorXd 
#define ERR_VectorXd		1004  /*(SIZE(1 .. 100))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[3];
} Vector2d;

#define Vector2d_REQUIRED_BYTES_FOR_ENCODING       40 
#define Vector2d_REQUIRED_BITS_FOR_ENCODING        314
#define Vector2d_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define Vector2d_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define Vector2d_REQUIRED_BYTES_FOR_XER_ENCODING   234

void Vector2d_Initialize(Vector2d* pVal);
flag Vector2d_IsConstraintValid(const Vector2d* val, int* pErrCode);
#ifndef ERR_Vector2d 
#define ERR_Vector2d		1005  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[4];
} Vector4d;

#define Vector4d_REQUIRED_BYTES_FOR_ENCODING       53 
#define Vector4d_REQUIRED_BITS_FOR_ENCODING        418
#define Vector4d_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define Vector4d_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define Vector4d_REQUIRED_BYTES_FOR_XER_ENCODING   305

void Vector4d_Initialize(Vector4d* pVal);
flag Vector4d_IsConstraintValid(const Vector4d* val, int* pErrCode);
#ifndef ERR_Vector4d 
#define ERR_Vector4d		1006  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[4];
} AngleAxisd;

#define AngleAxisd_REQUIRED_BYTES_FOR_ENCODING       53 
#define AngleAxisd_REQUIRED_BITS_FOR_ENCODING        418
#define AngleAxisd_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define AngleAxisd_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define AngleAxisd_REQUIRED_BYTES_FOR_XER_ENCODING   309

void AngleAxisd_Initialize(AngleAxisd* pVal);
flag AngleAxisd_IsConstraintValid(const AngleAxisd* val, int* pErrCode);
#ifndef ERR_AngleAxisd 
#define ERR_AngleAxisd		1007  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[4];
} Transform3d_elm;

#define Transform3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define Transform3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define Transform3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define Transform3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define Transform3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   319

void Transform3d_elm_Initialize(Transform3d_elm* pVal);
flag Transform3d_elm_IsConstraintValid(const Transform3d_elm* val, int* pErrCode);
#ifndef ERR_Transform3d_elm 
#define ERR_Transform3d_elm		1008  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    Transform3d_elm arr[4];
} Transform3d;

#define Transform3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define Transform3d_REQUIRED_BITS_FOR_ENCODING        1674
#define Transform3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define Transform3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define Transform3d_REQUIRED_BYTES_FOR_XER_ENCODING   1271

void Transform3d_Initialize(Transform3d* pVal);
flag Transform3d_IsConstraintValid(const Transform3d* val, int* pErrCode);
#ifndef ERR_Transform3d 
#define ERR_Transform3d		1009  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[4];
} Matrix4d_elm;

#define Matrix4d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define Matrix4d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define Matrix4d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define Matrix4d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define Matrix4d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void Matrix4d_elm_Initialize(Matrix4d_elm* pVal);
flag Matrix4d_elm_IsConstraintValid(const Matrix4d_elm* val, int* pErrCode);
#ifndef ERR_Matrix4d_elm 
#define ERR_Matrix4d_elm		1010  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    Matrix4d_elm arr[4];
} Matrix4d;

#define Matrix4d_REQUIRED_BYTES_FOR_ENCODING       210 
#define Matrix4d_REQUIRED_BITS_FOR_ENCODING        1674
#define Matrix4d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define Matrix4d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define Matrix4d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void Matrix4d_Initialize(Matrix4d* pVal);
flag Matrix4d_IsConstraintValid(const Matrix4d* val, int* pErrCode);
#ifndef ERR_Matrix4d 
#define ERR_Matrix4d		1011  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[2];
} Matrix2d_elm;

#define Matrix2d_elm_REQUIRED_BYTES_FOR_ENCODING       27 
#define Matrix2d_elm_REQUIRED_BITS_FOR_ENCODING        209
#define Matrix2d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   27 
#define Matrix2d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    209
#define Matrix2d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   171

void Matrix2d_elm_Initialize(Matrix2d_elm* pVal);
flag Matrix2d_elm_IsConstraintValid(const Matrix2d_elm* val, int* pErrCode);
#ifndef ERR_Matrix2d_elm 
#define ERR_Matrix2d_elm		1012  /*(SIZE(1 .. 2))*/
#endif

typedef struct {    int nCount; 
    
    Matrix2d_elm arr[2];
} Matrix2d;

#define Matrix2d_REQUIRED_BYTES_FOR_ENCODING       53 
#define Matrix2d_REQUIRED_BITS_FOR_ENCODING        419
#define Matrix2d_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define Matrix2d_REQUIRED_BITS_FOR_ACN_ENCODING    419
#define Matrix2d_REQUIRED_BYTES_FOR_XER_ENCODING   359

void Matrix2d_Initialize(Matrix2d* pVal);
flag Matrix2d_IsConstraintValid(const Matrix2d* val, int* pErrCode);
#ifndef ERR_Matrix2d 
#define ERR_Matrix2d		1013  /*(SIZE(1 .. 2))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[4];
} Isometry3d_elm;

#define Isometry3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define Isometry3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define Isometry3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define Isometry3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define Isometry3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   317

void Isometry3d_elm_Initialize(Isometry3d_elm* pVal);
flag Isometry3d_elm_IsConstraintValid(const Isometry3d_elm* val, int* pErrCode);
#ifndef ERR_Isometry3d_elm 
#define ERR_Isometry3d_elm		1014  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    Isometry3d_elm arr[4];
} Isometry3d;

#define Isometry3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define Isometry3d_REQUIRED_BITS_FOR_ENCODING        1674
#define Isometry3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define Isometry3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define Isometry3d_REQUIRED_BYTES_FOR_XER_ENCODING   1269

void Isometry3d_Initialize(Isometry3d* pVal);
flag Isometry3d_IsConstraintValid(const Isometry3d* val, int* pErrCode);
#ifndef ERR_Isometry3d 
#define ERR_Isometry3d		1015  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[20];
} MatrixXd_elm;

#define MatrixXd_elm_REQUIRED_BYTES_FOR_ENCODING       261 
#define MatrixXd_elm_REQUIRED_BITS_FOR_ENCODING        2085
#define MatrixXd_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   261 
#define MatrixXd_elm_REQUIRED_BITS_FOR_ACN_ENCODING    2085
#define MatrixXd_elm_REQUIRED_BYTES_FOR_XER_ENCODING   1449

void MatrixXd_elm_Initialize(MatrixXd_elm* pVal);
flag MatrixXd_elm_IsConstraintValid(const MatrixXd_elm* val, int* pErrCode);
#ifndef ERR_MatrixXd_elm 
#define ERR_MatrixXd_elm		1016  /*(SIZE(1 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    MatrixXd_elm arr[20];
} MatrixXd;

#define MatrixXd_REQUIRED_BYTES_FOR_ENCODING       5214 
#define MatrixXd_REQUIRED_BITS_FOR_ENCODING        41705
#define MatrixXd_REQUIRED_BYTES_FOR_ACN_ENCODING   5214 
#define MatrixXd_REQUIRED_BITS_FOR_ACN_ENCODING    41705
#define MatrixXd_REQUIRED_BYTES_FOR_XER_ENCODING   28961

void MatrixXd_Initialize(MatrixXd* pVal);
flag MatrixXd_IsConstraintValid(const MatrixXd* val, int* pErrCode);
#ifndef ERR_MatrixXd 
#define ERR_MatrixXd		1017  /*(SIZE(1 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[3];
} Matrix3d_elm;

#define Matrix3d_elm_REQUIRED_BYTES_FOR_ENCODING       40 
#define Matrix3d_elm_REQUIRED_BITS_FOR_ENCODING        314
#define Matrix3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   40 
#define Matrix3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    314
#define Matrix3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   242

void Matrix3d_elm_Initialize(Matrix3d_elm* pVal);
flag Matrix3d_elm_IsConstraintValid(const Matrix3d_elm* val, int* pErrCode);
#ifndef ERR_Matrix3d_elm 
#define ERR_Matrix3d_elm		1018  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    Matrix3d_elm arr[3];
} Matrix3d;

#define Matrix3d_REQUIRED_BYTES_FOR_ENCODING       118 
#define Matrix3d_REQUIRED_BITS_FOR_ENCODING        944
#define Matrix3d_REQUIRED_BYTES_FOR_ACN_ENCODING   118 
#define Matrix3d_REQUIRED_BITS_FOR_ACN_ENCODING    944
#define Matrix3d_REQUIRED_BYTES_FOR_XER_ENCODING   741

void Matrix3d_Initialize(Matrix3d* pVal);
flag Matrix3d_IsConstraintValid(const Matrix3d* val, int* pErrCode);
#ifndef ERR_Matrix3d 
#define ERR_Matrix3d		1019  /*(SIZE(1 .. 3))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[6];
} Matrix6d_elm;

#define Matrix6d_elm_REQUIRED_BYTES_FOR_ENCODING       79 
#define Matrix6d_elm_REQUIRED_BITS_FOR_ENCODING        627
#define Matrix6d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   79 
#define Matrix6d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    627
#define Matrix6d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   455

void Matrix6d_elm_Initialize(Matrix6d_elm* pVal);
flag Matrix6d_elm_IsConstraintValid(const Matrix6d_elm* val, int* pErrCode);
#ifndef ERR_Matrix6d_elm 
#define ERR_Matrix6d_elm		1020  /*(SIZE(1 .. 6))*/
#endif

typedef struct {    int nCount; 
    
    Matrix6d_elm arr[6];
} Matrix6d;

#define Matrix6d_REQUIRED_BYTES_FOR_ENCODING       471 
#define Matrix6d_REQUIRED_BITS_FOR_ENCODING        3765
#define Matrix6d_REQUIRED_BYTES_FOR_ACN_ENCODING   471 
#define Matrix6d_REQUIRED_BITS_FOR_ACN_ENCODING    3765
#define Matrix6d_REQUIRED_BYTES_FOR_XER_ENCODING   2739

void Matrix6d_Initialize(Matrix6d* pVal);
flag Matrix6d_IsConstraintValid(const Matrix6d* val, int* pErrCode);
#ifndef ERR_Matrix6d 
#define ERR_Matrix6d		1021  /*(SIZE(1 .. 6))*/
#endif

typedef struct {    int nCount; 
    
    T_Double arr[4];
} Affine3d_elm;

#define Affine3d_elm_REQUIRED_BYTES_FOR_ENCODING       53 
#define Affine3d_elm_REQUIRED_BITS_FOR_ENCODING        418
#define Affine3d_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define Affine3d_elm_REQUIRED_BITS_FOR_ACN_ENCODING    418
#define Affine3d_elm_REQUIRED_BYTES_FOR_XER_ENCODING   313

void Affine3d_elm_Initialize(Affine3d_elm* pVal);
flag Affine3d_elm_IsConstraintValid(const Affine3d_elm* val, int* pErrCode);
#ifndef ERR_Affine3d_elm 
#define ERR_Affine3d_elm		1022  /*(SIZE(1 .. 4))*/
#endif

typedef struct {    int nCount; 
    
    Affine3d_elm arr[4];
} Affine3d;

#define Affine3d_REQUIRED_BYTES_FOR_ENCODING       210 
#define Affine3d_REQUIRED_BITS_FOR_ENCODING        1674
#define Affine3d_REQUIRED_BYTES_FOR_ACN_ENCODING   210 
#define Affine3d_REQUIRED_BITS_FOR_ACN_ENCODING    1674
#define Affine3d_REQUIRED_BYTES_FOR_XER_ENCODING   1265

void Affine3d_Initialize(Affine3d* pVal);
flag Affine3d_IsConstraintValid(const Affine3d* val, int* pErrCode);
#ifndef ERR_Affine3d 
#define ERR_Affine3d		1023  /*(SIZE(1 .. 4))*/
#endif

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag Vector6d_Encode(const Vector6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Vector6d_Decode(Vector6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Vector3d_Encode(const Vector3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Vector3d_Decode(Vector3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Quaterniond_Encode(const Quaterniond* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Quaterniond_Decode(Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode);
flag VectorXd_Encode(const VectorXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag VectorXd_Decode(VectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag Vector2d_Encode(const Vector2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Vector2d_Decode(Vector2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Vector4d_Encode(const Vector4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Vector4d_Decode(Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag AngleAxisd_Encode(const AngleAxisd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag AngleAxisd_Decode(AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);
flag Transform3d_elm_Encode(const Transform3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Transform3d_elm_Decode(Transform3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag Transform3d_Encode(const Transform3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Transform3d_Decode(Transform3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix4d_elm_Encode(const Matrix4d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix4d_elm_Decode(Matrix4d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix4d_Encode(const Matrix4d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix4d_Decode(Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix2d_elm_Encode(const Matrix2d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix2d_elm_Decode(Matrix2d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix2d_Encode(const Matrix2d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix2d_Decode(Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Isometry3d_elm_Encode(const Isometry3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Isometry3d_elm_Decode(Isometry3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag Isometry3d_Encode(const Isometry3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Isometry3d_Decode(Isometry3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag MatrixXd_elm_Encode(const MatrixXd_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MatrixXd_elm_Decode(MatrixXd_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag MatrixXd_Encode(const MatrixXd* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MatrixXd_Decode(MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix3d_elm_Encode(const Matrix3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix3d_elm_Decode(Matrix3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix3d_Encode(const Matrix3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix3d_Decode(Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix6d_elm_Encode(const Matrix6d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix6d_elm_Decode(Matrix6d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag Matrix6d_Encode(const Matrix6d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Matrix6d_Decode(Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode);
flag Affine3d_elm_Encode(const Affine3d_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Affine3d_elm_Decode(Affine3d_elm* pVal, BitStream* pBitStrm, int* pErrCode);
flag Affine3d_Encode(const Affine3d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Affine3d_Decode(Affine3d* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
