#ifndef GENERATED_ASN1SCC_Trigger_H
#define GENERATED_ASN1SCC_Trigger_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif




typedef struct {
    
    T_Boolean arr[8];
} TriggerMask;

void TriggerMask_Initialize(TriggerMask* pVal);

#define ERR_TRIGGERMASK		3335  /**/
#define ERR_TRIGGERMASK_ELM		3324  /**/
flag TriggerMask_IsConstraintValid(const TriggerMask* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TRIGGERMASK		3336  /**/
#define ERR_UPER_ENCODE_TRIGGERMASK_ELM_2		3331  /**/
#define TriggerMask_REQUIRED_BYTES_FOR_ENCODING       1 
#define TriggerMask_REQUIRED_BITS_FOR_ENCODING        8

flag TriggerMask_Encode(const TriggerMask* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRIGGERMASK		3337  /**/
#define ERR_UPER_DECODE_TRIGGERMASK_ELM_2		3332  /**/
flag TriggerMask_Decode(TriggerMask* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint TriggerGenerator;


void TriggerGenerator_Initialize(TriggerGenerator* pVal);

#define ERR_TRIGGERGENERATOR		3282  /**/
flag TriggerGenerator_IsConstraintValid(const TriggerGenerator* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TRIGGERGENERATOR		3283  /**/
#define TriggerGenerator_REQUIRED_BYTES_FOR_ENCODING       1 
#define TriggerGenerator_REQUIRED_BITS_FOR_ENCODING        2

flag TriggerGenerator_Encode(const TriggerGenerator* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRIGGERGENERATOR		3284  /**/
flag TriggerGenerator_Decode(TriggerGenerator* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint TriggerInput;


void TriggerInput_Initialize(TriggerInput* pVal);

#define ERR_TRIGGERINPUT		3289  /**/
flag TriggerInput_IsConstraintValid(const TriggerInput* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TRIGGERINPUT		3290  /**/
#define TriggerInput_REQUIRED_BYTES_FOR_ENCODING       1 
#define TriggerInput_REQUIRED_BITS_FOR_ENCODING        2

flag TriggerInput_Encode(const TriggerInput* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRIGGERINPUT		3291  /**/
flag TriggerInput_Decode(TriggerInput* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint TriggerOutput;


void TriggerOutput_Initialize(TriggerOutput* pVal);

#define ERR_TRIGGEROUTPUT		3296  /**/
flag TriggerOutput_IsConstraintValid(const TriggerOutput* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TRIGGEROUTPUT		3297  /**/
#define TriggerOutput_REQUIRED_BYTES_FOR_ENCODING       1 
#define TriggerOutput_REQUIRED_BITS_FOR_ENCODING        3

flag TriggerOutput_Encode(const TriggerOutput* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRIGGEROUTPUT		3298  /**/
flag TriggerOutput_Decode(TriggerOutput* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint TriggerPeriod;


void TriggerPeriod_Initialize(TriggerPeriod* pVal);

#define ERR_TRIGGERPERIOD		3303  /**/
flag TriggerPeriod_IsConstraintValid(const TriggerPeriod* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TRIGGERPERIOD		3304  /**/
#define TriggerPeriod_REQUIRED_BYTES_FOR_ENCODING       3 
#define TriggerPeriod_REQUIRED_BITS_FOR_ENCODING        24

flag TriggerPeriod_Encode(const TriggerPeriod* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRIGGERPERIOD		3305  /**/
flag TriggerPeriod_Decode(TriggerPeriod* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- GeneratorSetup --------------------------------------------*/
typedef struct {
    TriggerGenerator source;
    TriggerPeriod period;

} GeneratorSetup;

void GeneratorSetup_Initialize(GeneratorSetup* pVal);

#define ERR_GENERATORSETUP		3364  /**/
#define ERR_GENERATORSETUP_SOURCE		3342  /**/
#define ERR_GENERATORSETUP_PERIOD		3353  /**/
flag GeneratorSetup_IsConstraintValid(const GeneratorSetup* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GENERATORSETUP		3365  /**/
#define ERR_UPER_ENCODE_GENERATORSETUP_SOURCE_2		3349  /**/
#define ERR_UPER_ENCODE_GENERATORSETUP_PERIOD_2		3360  /**/
#define GeneratorSetup_REQUIRED_BYTES_FOR_ENCODING       4 
#define GeneratorSetup_REQUIRED_BITS_FOR_ENCODING        26

flag GeneratorSetup_Encode(const GeneratorSetup* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GENERATORSETUP		3366  /**/
#define ERR_UPER_DECODE_GENERATORSETUP_SOURCE_2		3350  /**/
#define ERR_UPER_DECODE_GENERATORSETUP_PERIOD_2		3361  /**/
flag GeneratorSetup_Decode(GeneratorSetup* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint TriggerOffset;


void TriggerOffset_Initialize(TriggerOffset* pVal);

#define ERR_TRIGGEROFFSET		3310  /**/
flag TriggerOffset_IsConstraintValid(const TriggerOffset* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TRIGGEROFFSET		3311  /**/
#define TriggerOffset_REQUIRED_BYTES_FOR_ENCODING       3 
#define TriggerOffset_REQUIRED_BITS_FOR_ENCODING        24

flag TriggerOffset_Encode(const TriggerOffset* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRIGGEROFFSET		3312  /**/
flag TriggerOffset_Decode(TriggerOffset* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint TriggerDuration;


void TriggerDuration_Initialize(TriggerDuration* pVal);

#define ERR_TRIGGERDURATION		3317  /**/
flag TriggerDuration_IsConstraintValid(const TriggerDuration* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TRIGGERDURATION		3318  /**/
#define TriggerDuration_REQUIRED_BYTES_FOR_ENCODING       2 
#define TriggerDuration_REQUIRED_BITS_FOR_ENCODING        10

flag TriggerDuration_Encode(const TriggerDuration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRIGGERDURATION		3319  /**/
flag TriggerDuration_Decode(TriggerDuration* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ChannelInternal --------------------------------------------*/
typedef struct {
    TriggerOutput output_channel;
    TriggerGenerator source;
    TriggerOffset offset;
    TriggerDuration duration;
    T_Boolean invert;

} ChannelInternal;

void ChannelInternal_Initialize(ChannelInternal* pVal);

#define ERR_CHANNELINTERNAL		3426  /**/
#define ERR_CHANNELINTERNAL_OUTPUT_CHANNEL		3371  /**/
#define ERR_CHANNELINTERNAL_SOURCE		3382  /**/
#define ERR_CHANNELINTERNAL_OFFSET		3393  /**/
#define ERR_CHANNELINTERNAL_DURATION		3404  /**/
#define ERR_CHANNELINTERNAL_INVERT		3415  /**/
flag ChannelInternal_IsConstraintValid(const ChannelInternal* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_CHANNELINTERNAL		3427  /**/
#define ERR_UPER_ENCODE_CHANNELINTERNAL_OUTPUT_CHANNEL_2		3378  /**/
#define ERR_UPER_ENCODE_CHANNELINTERNAL_SOURCE_2		3389  /**/
#define ERR_UPER_ENCODE_CHANNELINTERNAL_OFFSET_2		3400  /**/
#define ERR_UPER_ENCODE_CHANNELINTERNAL_DURATION_2		3411  /**/
#define ERR_UPER_ENCODE_CHANNELINTERNAL_INVERT_2		3422  /**/
#define ChannelInternal_REQUIRED_BYTES_FOR_ENCODING       5 
#define ChannelInternal_REQUIRED_BITS_FOR_ENCODING        40

flag ChannelInternal_Encode(const ChannelInternal* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CHANNELINTERNAL		3428  /**/
#define ERR_UPER_DECODE_CHANNELINTERNAL_OUTPUT_CHANNEL_2		3379  /**/
#define ERR_UPER_DECODE_CHANNELINTERNAL_SOURCE_2		3390  /**/
#define ERR_UPER_DECODE_CHANNELINTERNAL_OFFSET_2		3401  /**/
#define ERR_UPER_DECODE_CHANNELINTERNAL_DURATION_2		3412  /**/
#define ERR_UPER_DECODE_CHANNELINTERNAL_INVERT_2		3423  /**/
flag ChannelInternal_Decode(ChannelInternal* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- ChannelExternal --------------------------------------------*/
typedef struct {
    TriggerOutput output_channel;
    TriggerInput source;
    TriggerOffset offset;
    TriggerDuration duration;
    T_Boolean bypass;
    T_Boolean invert;

} ChannelExternal;

void ChannelExternal_Initialize(ChannelExternal* pVal);

#define ERR_CHANNELEXTERNAL		3499  /**/
#define ERR_CHANNELEXTERNAL_OUTPUT_CHANNEL		3433  /**/
#define ERR_CHANNELEXTERNAL_SOURCE		3444  /**/
#define ERR_CHANNELEXTERNAL_OFFSET		3455  /**/
#define ERR_CHANNELEXTERNAL_DURATION		3466  /**/
#define ERR_CHANNELEXTERNAL_BYPASS		3477  /**/
#define ERR_CHANNELEXTERNAL_INVERT		3488  /**/
flag ChannelExternal_IsConstraintValid(const ChannelExternal* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_CHANNELEXTERNAL		3500  /**/
#define ERR_UPER_ENCODE_CHANNELEXTERNAL_OUTPUT_CHANNEL_2		3440  /**/
#define ERR_UPER_ENCODE_CHANNELEXTERNAL_SOURCE_2		3451  /**/
#define ERR_UPER_ENCODE_CHANNELEXTERNAL_OFFSET_2		3462  /**/
#define ERR_UPER_ENCODE_CHANNELEXTERNAL_DURATION_2		3473  /**/
#define ERR_UPER_ENCODE_CHANNELEXTERNAL_BYPASS_2		3484  /**/
#define ERR_UPER_ENCODE_CHANNELEXTERNAL_INVERT_2		3495  /**/
#define ChannelExternal_REQUIRED_BYTES_FOR_ENCODING       6 
#define ChannelExternal_REQUIRED_BITS_FOR_ENCODING        41

flag ChannelExternal_Encode(const ChannelExternal* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CHANNELEXTERNAL		3501  /**/
#define ERR_UPER_DECODE_CHANNELEXTERNAL_OUTPUT_CHANNEL_2		3441  /**/
#define ERR_UPER_DECODE_CHANNELEXTERNAL_SOURCE_2		3452  /**/
#define ERR_UPER_DECODE_CHANNELEXTERNAL_OFFSET_2		3463  /**/
#define ERR_UPER_DECODE_CHANNELEXTERNAL_DURATION_2		3474  /**/
#define ERR_UPER_DECODE_CHANNELEXTERNAL_BYPASS_2		3485  /**/
#define ERR_UPER_DECODE_CHANNELEXTERNAL_INVERT_2		3496  /**/
flag ChannelExternal_Decode(ChannelExternal* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
