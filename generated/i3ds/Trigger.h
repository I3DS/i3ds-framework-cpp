#ifndef GENERATED_ASN1SCC_Trigger_H
#define GENERATED_ASN1SCC_Trigger_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    T_Boolean arr[8];
} TriggerMask;

#define TriggerMask_REQUIRED_BYTES_FOR_ENCODING       1
#define TriggerMask_REQUIRED_BITS_FOR_ENCODING        8
#define TriggerMask_REQUIRED_BYTES_FOR_ACN_ENCODING   1
#define TriggerMask_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define TriggerMask_REQUIRED_BYTES_FOR_XER_ENCODING   171

void TriggerMask_Initialize(TriggerMask* pVal);
flag TriggerMask_IsConstraintValid(const TriggerMask* val, int* pErrCode);
#ifndef ERR_TriggerMask
#define ERR_TriggerMask		1001  /*(SIZE(8))*/
#endif

typedef asn1SccUint TriggerGenerator;

#define TriggerGenerator_REQUIRED_BYTES_FOR_ENCODING       1
#define TriggerGenerator_REQUIRED_BITS_FOR_ENCODING        2
#define TriggerGenerator_REQUIRED_BYTES_FOR_ACN_ENCODING   1
#define TriggerGenerator_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define TriggerGenerator_REQUIRED_BYTES_FOR_XER_ENCODING   57

void TriggerGenerator_Initialize(TriggerGenerator* pVal);
flag TriggerGenerator_IsConstraintValid(const TriggerGenerator* val, int* pErrCode);
#ifndef ERR_TriggerGenerator
#define ERR_TriggerGenerator		1002  /*(1 .. 4)*/
#endif

typedef asn1SccUint TriggerInput;

#define TriggerInput_REQUIRED_BYTES_FOR_ENCODING       1
#define TriggerInput_REQUIRED_BITS_FOR_ENCODING        2
#define TriggerInput_REQUIRED_BYTES_FOR_ACN_ENCODING   1
#define TriggerInput_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define TriggerInput_REQUIRED_BYTES_FOR_XER_ENCODING   49

void TriggerInput_Initialize(TriggerInput* pVal);
flag TriggerInput_IsConstraintValid(const TriggerInput* val, int* pErrCode);
#ifndef ERR_TriggerInput
#define ERR_TriggerInput		1003  /*(1 .. 4)*/
#endif

typedef asn1SccUint TriggerOutput;

#define TriggerOutput_REQUIRED_BYTES_FOR_ENCODING       1
#define TriggerOutput_REQUIRED_BITS_FOR_ENCODING        3
#define TriggerOutput_REQUIRED_BYTES_FOR_ACN_ENCODING   1
#define TriggerOutput_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define TriggerOutput_REQUIRED_BYTES_FOR_XER_ENCODING   51

void TriggerOutput_Initialize(TriggerOutput* pVal);
flag TriggerOutput_IsConstraintValid(const TriggerOutput* val, int* pErrCode);
#ifndef ERR_TriggerOutput
#define ERR_TriggerOutput		1004  /*(1 .. 8)*/
#endif

typedef asn1SccUint TriggerPeriod;

#define TriggerPeriod_REQUIRED_BYTES_FOR_ENCODING       3
#define TriggerPeriod_REQUIRED_BITS_FOR_ENCODING        24
#define TriggerPeriod_REQUIRED_BYTES_FOR_ACN_ENCODING   3
#define TriggerPeriod_REQUIRED_BITS_FOR_ACN_ENCODING    24
#define TriggerPeriod_REQUIRED_BYTES_FOR_XER_ENCODING   51

void TriggerPeriod_Initialize(TriggerPeriod* pVal);
flag TriggerPeriod_IsConstraintValid(const TriggerPeriod* val, int* pErrCode);
#ifndef ERR_TriggerPeriod
#define ERR_TriggerPeriod		1005  /*(0 .. 16777215)*/
#endif

typedef struct {
    TriggerGenerator generator;
    TriggerPeriod period;
} GeneratorSetup;

#define GeneratorSetup_REQUIRED_BYTES_FOR_ENCODING       4
#define GeneratorSetup_REQUIRED_BITS_FOR_ENCODING        26
#define GeneratorSetup_REQUIRED_BYTES_FOR_ACN_ENCODING   4
#define GeneratorSetup_REQUIRED_BITS_FOR_ACN_ENCODING    26
#define GeneratorSetup_REQUIRED_BYTES_FOR_XER_ENCODING   113

void GeneratorSetup_Initialize(GeneratorSetup* pVal);
flag GeneratorSetup_IsConstraintValid(const GeneratorSetup* val, int* pErrCode);


typedef asn1SccUint TriggerOffset;

#define TriggerOffset_REQUIRED_BYTES_FOR_ENCODING       3
#define TriggerOffset_REQUIRED_BITS_FOR_ENCODING        24
#define TriggerOffset_REQUIRED_BYTES_FOR_ACN_ENCODING   3
#define TriggerOffset_REQUIRED_BITS_FOR_ACN_ENCODING    24
#define TriggerOffset_REQUIRED_BYTES_FOR_XER_ENCODING   51

void TriggerOffset_Initialize(TriggerOffset* pVal);
flag TriggerOffset_IsConstraintValid(const TriggerOffset* val, int* pErrCode);
#ifndef ERR_TriggerOffset
#define ERR_TriggerOffset		1006  /*(0 .. 16777215)*/
#endif

typedef asn1SccUint TriggerDuration;

#define TriggerDuration_REQUIRED_BYTES_FOR_ENCODING       2
#define TriggerDuration_REQUIRED_BITS_FOR_ENCODING        10
#define TriggerDuration_REQUIRED_BYTES_FOR_ACN_ENCODING   2
#define TriggerDuration_REQUIRED_BITS_FOR_ACN_ENCODING    10
#define TriggerDuration_REQUIRED_BYTES_FOR_XER_ENCODING   55

void TriggerDuration_Initialize(TriggerDuration* pVal);
flag TriggerDuration_IsConstraintValid(const TriggerDuration* val, int* pErrCode);
#ifndef ERR_TriggerDuration
#define ERR_TriggerDuration		1007  /*(0 .. 1023)*/
#endif

typedef struct {
    TriggerOutput channel;
    TriggerGenerator source;
    TriggerOffset offset;
    TriggerDuration duration;
    T_Boolean invert;
} ChannelInternal;

#define ChannelInternal_REQUIRED_BYTES_FOR_ENCODING       5
#define ChannelInternal_REQUIRED_BITS_FOR_ENCODING        40
#define ChannelInternal_REQUIRED_BYTES_FOR_ACN_ENCODING   5
#define ChannelInternal_REQUIRED_BITS_FOR_ACN_ENCODING    40
#define ChannelInternal_REQUIRED_BYTES_FOR_XER_ENCODING   219

void ChannelInternal_Initialize(ChannelInternal* pVal);
flag ChannelInternal_IsConstraintValid(const ChannelInternal* val, int* pErrCode);


typedef struct {
    TriggerOutput channel;
    TriggerInput source;
    TriggerOffset offset;
    TriggerDuration duration;
    T_Boolean bypass;
    T_Boolean invert;
} ChannelExternal;

#define ChannelExternal_REQUIRED_BYTES_FOR_ENCODING       6
#define ChannelExternal_REQUIRED_BITS_FOR_ENCODING        41
#define ChannelExternal_REQUIRED_BYTES_FOR_ACN_ENCODING   6
#define ChannelExternal_REQUIRED_BITS_FOR_ACN_ENCODING    41
#define ChannelExternal_REQUIRED_BYTES_FOR_XER_ENCODING   249

void ChannelExternal_Initialize(ChannelExternal* pVal);
flag ChannelExternal_IsConstraintValid(const ChannelExternal* val, int* pErrCode);




/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag TriggerMask_Encode(const TriggerMask* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TriggerMask_Decode(TriggerMask* pVal, BitStream* pBitStrm, int* pErrCode);
flag TriggerGenerator_Encode(const TriggerGenerator* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TriggerGenerator_Decode(TriggerGenerator* pVal, BitStream* pBitStrm, int* pErrCode);
flag TriggerInput_Encode(const TriggerInput* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TriggerInput_Decode(TriggerInput* pVal, BitStream* pBitStrm, int* pErrCode);
flag TriggerOutput_Encode(const TriggerOutput* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TriggerOutput_Decode(TriggerOutput* pVal, BitStream* pBitStrm, int* pErrCode);
flag TriggerPeriod_Encode(const TriggerPeriod* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TriggerPeriod_Decode(TriggerPeriod* pVal, BitStream* pBitStrm, int* pErrCode);
flag GeneratorSetup_Encode(const GeneratorSetup* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag GeneratorSetup_Decode(GeneratorSetup* pVal, BitStream* pBitStrm, int* pErrCode);
flag TriggerOffset_Encode(const TriggerOffset* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TriggerOffset_Decode(TriggerOffset* pVal, BitStream* pBitStrm, int* pErrCode);
flag TriggerDuration_Encode(const TriggerDuration* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TriggerDuration_Decode(TriggerDuration* pVal, BitStream* pBitStrm, int* pErrCode);
flag ChannelInternal_Encode(const ChannelInternal* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ChannelInternal_Decode(ChannelInternal* pVal, BitStream* pBitStrm, int* pErrCode);
flag ChannelExternal_Encode(const ChannelExternal* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ChannelExternal_Decode(ChannelExternal* pVal, BitStream* pBitStrm, int* pErrCode);


#ifdef  __cplusplus
}

#endif

#endif
