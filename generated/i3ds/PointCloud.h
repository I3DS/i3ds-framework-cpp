#ifndef GENERATED_ASN1SCC_PointCloud_H
#define GENERATED_ASN1SCC_PointCloud_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-types.h"
#include "taste-extended.h"
#include "SampleAttribute.h"
#include "Region.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef enum {
    fields_xyz_f = 0
} Point_format_t;

// please use the following macros to avoid breaking code.
#define Point_format_t_fields_xyz_f fields_xyz_f

void Point_format_t_Initialize(Point_format_t* pVal);

#define ERR_POINT_FORMAT_T		1196  /**/
flag Point_format_t_IsConstraintValid(const Point_format_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_POINT_FORMAT_T		1197  /**/
#define Point_format_t_REQUIRED_BYTES_FOR_ENCODING       0 
#define Point_format_t_REQUIRED_BITS_FOR_ENCODING        0

flag Point_format_t_Encode(const Point_format_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_POINT_FORMAT_T		1198  /**/
flag Point_format_t_Decode(Point_format_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PointCloudDescriptor --------------------------------------------*/
typedef struct {
    SampleAttributes attributes;
    Point_format_t point_format;
    T_UInt16 point_size;
    T_UInt32 width;
    T_UInt32 height;

} PointCloudDescriptor;

void PointCloudDescriptor_Initialize(PointCloudDescriptor* pVal);

#define ERR_POINTCLOUDDESCRIPTOR		1368  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES		1313  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_TIMESTAMP		1203  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_VALIDITY		1218  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES		1306  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM		1295  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_KEY		1229  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE		1284  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_BOOLEAN_VALUE		1240  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_DISCRETE_VALUE		1251  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_REAL_VALUE		1262  /**/
#define ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_STRING_VALUE		1273  /**/
#define ERR_POINTCLOUDDESCRIPTOR_POINT_FORMAT		1324  /**/
#define ERR_POINTCLOUDDESCRIPTOR_POINT_SIZE		1335  /**/
#define ERR_POINTCLOUDDESCRIPTOR_WIDTH		1346  /**/
#define ERR_POINTCLOUDDESCRIPTOR_HEIGHT		1357  /**/
flag PointCloudDescriptor_IsConstraintValid(const PointCloudDescriptor* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR		1369  /**/
#define ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		1320  /**/
#define ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		1331  /**/
#define ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		1342  /**/
#define ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_WIDTH_2		1353  /**/
#define ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_HEIGHT_2		1364  /**/
#define PointCloudDescriptor_REQUIRED_BYTES_FOR_ENCODING       76 
#define PointCloudDescriptor_REQUIRED_BITS_FOR_ENCODING        605

flag PointCloudDescriptor_Encode(const PointCloudDescriptor* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR		1370  /**/
#define ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		1321  /**/
#define ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		1332  /**/
#define ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		1343  /**/
#define ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_WIDTH_2		1354  /**/
#define ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_HEIGHT_2		1365  /**/
flag PointCloudDescriptor_Decode(PointCloudDescriptor* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
