#ifndef GENERATED_ASN1SCC_LIDAR_H
#define GENERATED_ASN1SCC_LIDAR_H
/*
Code automatically generated by asn1scc tool
*/
#include "Point.h"
#include "taste-types.h"
#include "Region.h"
#include "SampleAttribute.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    Point arr[400000];
} LIDARMeasurement400K_points;

#define LIDARMeasurement400K_points_REQUIRED_BYTES_FOR_ENCODING       15700009 
#define LIDARMeasurement400K_points_REQUIRED_BITS_FOR_ENCODING        125600072
#define LIDARMeasurement400K_points_REQUIRED_BYTES_FOR_ACN_ENCODING   15700003 
#define LIDARMeasurement400K_points_REQUIRED_BITS_FOR_ACN_ENCODING    125600019
#define LIDARMeasurement400K_points_REQUIRED_BYTES_FOR_XER_ENCODING   91200059

void LIDARMeasurement400K_points_Initialize(LIDARMeasurement400K_points* pVal);
flag LIDARMeasurement400K_points_IsConstraintValid(const LIDARMeasurement400K_points* val, int* pErrCode);
#ifndef ERR_LIDARMeasurement400K_points 
#define ERR_LIDARMeasurement400K_points		1001  /*(SIZE(1 .. 400000))*/
#endif

typedef struct {    int nCount; 
    
    Point arr[200000];
} LIDARMeasurement200K_points;

#define LIDARMeasurement200K_points_REQUIRED_BYTES_FOR_ENCODING       7850006 
#define LIDARMeasurement200K_points_REQUIRED_BITS_FOR_ENCODING        62800048
#define LIDARMeasurement200K_points_REQUIRED_BYTES_FOR_ACN_ENCODING   7850003 
#define LIDARMeasurement200K_points_REQUIRED_BITS_FOR_ACN_ENCODING    62800018
#define LIDARMeasurement200K_points_REQUIRED_BYTES_FOR_XER_ENCODING   45600059

void LIDARMeasurement200K_points_Initialize(LIDARMeasurement200K_points* pVal);
flag LIDARMeasurement200K_points_IsConstraintValid(const LIDARMeasurement200K_points* val, int* pErrCode);
#ifndef ERR_LIDARMeasurement200K_points 
#define ERR_LIDARMeasurement200K_points		1002  /*(SIZE(1 .. 200000))*/
#endif

typedef struct {    int nCount; 
    
    Point arr[100000];
} LIDARMeasurement100K_points;

#define LIDARMeasurement100K_points_REQUIRED_BYTES_FOR_ENCODING       3925004 
#define LIDARMeasurement100K_points_REQUIRED_BITS_FOR_ENCODING        31400032
#define LIDARMeasurement100K_points_REQUIRED_BYTES_FOR_ACN_ENCODING   3925003 
#define LIDARMeasurement100K_points_REQUIRED_BITS_FOR_ACN_ENCODING    31400017
#define LIDARMeasurement100K_points_REQUIRED_BYTES_FOR_XER_ENCODING   22800059

void LIDARMeasurement100K_points_Initialize(LIDARMeasurement100K_points* pVal);
flag LIDARMeasurement100K_points_IsConstraintValid(const LIDARMeasurement100K_points* val, int* pErrCode);
#ifndef ERR_LIDARMeasurement100K_points 
#define ERR_LIDARMeasurement100K_points		1003  /*(SIZE(1 .. 100000))*/
#endif

typedef struct {
    SampleAttributes attributes;
    LIDARMeasurement100K_points points;
    PolarRegion region;
} LIDARMeasurement100K;

#define LIDARMeasurement100K_REQUIRED_BYTES_FOR_ENCODING       3925159 
#define LIDARMeasurement100K_REQUIRED_BITS_FOR_ENCODING        31401269
#define LIDARMeasurement100K_REQUIRED_BYTES_FOR_ACN_ENCODING   3925157 
#define LIDARMeasurement100K_REQUIRED_BITS_FOR_ACN_ENCODING    31401254
#define LIDARMeasurement100K_REQUIRED_BYTES_FOR_XER_ENCODING   22801580

void LIDARMeasurement100K_Initialize(LIDARMeasurement100K* pVal);
flag LIDARMeasurement100K_IsConstraintValid(const LIDARMeasurement100K* val, int* pErrCode);


typedef struct {
    SampleAttributes attributes;
    LIDARMeasurement200K_points points;
    PolarRegion region;
} LIDARMeasurement200K;

#define LIDARMeasurement200K_REQUIRED_BYTES_FOR_ENCODING       7850161 
#define LIDARMeasurement200K_REQUIRED_BITS_FOR_ENCODING        62801285
#define LIDARMeasurement200K_REQUIRED_BYTES_FOR_ACN_ENCODING   7850157 
#define LIDARMeasurement200K_REQUIRED_BITS_FOR_ACN_ENCODING    62801255
#define LIDARMeasurement200K_REQUIRED_BYTES_FOR_XER_ENCODING   45601580

void LIDARMeasurement200K_Initialize(LIDARMeasurement200K* pVal);
flag LIDARMeasurement200K_IsConstraintValid(const LIDARMeasurement200K* val, int* pErrCode);


typedef struct {
    SampleAttributes attributes;
    LIDARMeasurement400K_points points;
    PolarRegion region;
} LIDARMeasurement400K;

#define LIDARMeasurement400K_REQUIRED_BYTES_FOR_ENCODING       15700164 
#define LIDARMeasurement400K_REQUIRED_BITS_FOR_ENCODING        125601309
#define LIDARMeasurement400K_REQUIRED_BYTES_FOR_ACN_ENCODING   15700157 
#define LIDARMeasurement400K_REQUIRED_BITS_FOR_ACN_ENCODING    125601256
#define LIDARMeasurement400K_REQUIRED_BYTES_FOR_XER_ENCODING   91201580

void LIDARMeasurement400K_Initialize(LIDARMeasurement400K* pVal);
flag LIDARMeasurement400K_IsConstraintValid(const LIDARMeasurement400K* val, int* pErrCode);


typedef struct {
    T_Boolean enable;
    PolarRegion region;
} LIDARRegion;

#define LIDARRegion_REQUIRED_BYTES_FOR_ENCODING       53 
#define LIDARRegion_REQUIRED_BITS_FOR_ENCODING        417
#define LIDARRegion_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define LIDARRegion_REQUIRED_BITS_FOR_ACN_ENCODING    417
#define LIDARRegion_REQUIRED_BYTES_FOR_XER_ENCODING   350

void LIDARRegion_Initialize(LIDARRegion* pVal);
flag LIDARRegion_IsConstraintValid(const LIDARRegion* val, int* pErrCode);


typedef struct {
    T_Boolean region_enabled;
    PolarRegion region;
} LIDARConfiguration;

#define LIDARConfiguration_REQUIRED_BYTES_FOR_ENCODING       53 
#define LIDARConfiguration_REQUIRED_BITS_FOR_ENCODING        417
#define LIDARConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING   53 
#define LIDARConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING    417
#define LIDARConfiguration_REQUIRED_BYTES_FOR_XER_ENCODING   380

void LIDARConfiguration_Initialize(LIDARConfiguration* pVal);
flag LIDARConfiguration_IsConstraintValid(const LIDARConfiguration* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag LIDARMeasurement400K_points_Encode(const LIDARMeasurement400K_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARMeasurement400K_points_Decode(LIDARMeasurement400K_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag LIDARMeasurement200K_points_Encode(const LIDARMeasurement200K_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARMeasurement200K_points_Decode(LIDARMeasurement200K_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag LIDARMeasurement100K_points_Encode(const LIDARMeasurement100K_points* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARMeasurement100K_points_Decode(LIDARMeasurement100K_points* pVal, BitStream* pBitStrm, int* pErrCode);
flag LIDARMeasurement100K_Encode(const LIDARMeasurement100K* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARMeasurement100K_Decode(LIDARMeasurement100K* pVal, BitStream* pBitStrm, int* pErrCode);
flag LIDARMeasurement200K_Encode(const LIDARMeasurement200K* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARMeasurement200K_Decode(LIDARMeasurement200K* pVal, BitStream* pBitStrm, int* pErrCode);
flag LIDARMeasurement400K_Encode(const LIDARMeasurement400K* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARMeasurement400K_Decode(LIDARMeasurement400K* pVal, BitStream* pBitStrm, int* pErrCode);
flag LIDARRegion_Encode(const LIDARRegion* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARRegion_Decode(LIDARRegion* pVal, BitStream* pBitStrm, int* pErrCode);
flag LIDARConfiguration_Encode(const LIDARConfiguration* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag LIDARConfiguration_Decode(LIDARConfiguration* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
