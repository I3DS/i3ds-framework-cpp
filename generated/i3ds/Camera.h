#ifndef GENERATED_ASN1SCC_Camera_H
#define GENERATED_ASN1SCC_Camera_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Region.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef T_UInt8 FlashStrength;

#define FlashStrength_REQUIRED_BYTES_FOR_ENCODING       1 
#define FlashStrength_REQUIRED_BITS_FOR_ENCODING        8
#define FlashStrength_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define FlashStrength_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define FlashStrength_REQUIRED_BYTES_FOR_XER_ENCODING   51

void FlashStrength_Initialize(FlashStrength* pVal);
flag FlashStrength_IsConstraintValid(const FlashStrength* val, int* pErrCode);


typedef T_UInt32 ShutterTime;

#define ShutterTime_REQUIRED_BYTES_FOR_ENCODING       4 
#define ShutterTime_REQUIRED_BITS_FOR_ENCODING        32
#define ShutterTime_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define ShutterTime_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define ShutterTime_REQUIRED_BYTES_FOR_XER_ENCODING   47

void ShutterTime_Initialize(ShutterTime* pVal);
flag ShutterTime_IsConstraintValid(const ShutterTime* val, int* pErrCode);


typedef struct {
    T_Boolean enable;
    FlashStrength strength;
} CameraFlash;

#define CameraFlash_REQUIRED_BYTES_FOR_ENCODING       2 
#define CameraFlash_REQUIRED_BITS_FOR_ENCODING        9
#define CameraFlash_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define CameraFlash_REQUIRED_BITS_FOR_ACN_ENCODING    9
#define CameraFlash_REQUIRED_BYTES_FOR_XER_ENCODING   98

void CameraFlash_Initialize(CameraFlash* pVal);
flag CameraFlash_IsConstraintValid(const CameraFlash* val, int* pErrCode);


typedef struct {
    T_Boolean enable;
    PlanarRegion region;
} CameraRegion;

#define CameraRegion_REQUIRED_BYTES_FOR_ENCODING       9 
#define CameraRegion_REQUIRED_BITS_FOR_ENCODING        65
#define CameraRegion_REQUIRED_BYTES_FOR_ACN_ENCODING   9 
#define CameraRegion_REQUIRED_BITS_FOR_ACN_ENCODING    65
#define CameraRegion_REQUIRED_BYTES_FOR_XER_ENCODING   232

void CameraRegion_Initialize(CameraRegion* pVal);
flag CameraRegion_IsConstraintValid(const CameraRegion* val, int* pErrCode);


typedef T_Float SensorGain;

#define SensorGain_REQUIRED_BYTES_FOR_ENCODING       13 
#define SensorGain_REQUIRED_BITS_FOR_ENCODING        104
#define SensorGain_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define SensorGain_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define SensorGain_REQUIRED_BYTES_FOR_XER_ENCODING   75

void SensorGain_Initialize(SensorGain* pVal);
flag SensorGain_IsConstraintValid(const SensorGain* val, int* pErrCode);


typedef struct {
    ShutterTime shutter;
    SensorGain gain;
} CameraExposure;

#define CameraExposure_REQUIRED_BYTES_FOR_ENCODING       17 
#define CameraExposure_REQUIRED_BITS_FOR_ENCODING        136
#define CameraExposure_REQUIRED_BYTES_FOR_ACN_ENCODING   17 
#define CameraExposure_REQUIRED_BITS_FOR_ACN_ENCODING    136
#define CameraExposure_REQUIRED_BYTES_FOR_XER_ENCODING   135

void CameraExposure_Initialize(CameraExposure* pVal);
flag CameraExposure_IsConstraintValid(const CameraExposure* val, int* pErrCode);


typedef struct {
    T_Boolean enable;
    ShutterTime max_shutter;
    SensorGain max_gain;
} CameraAutoExposure;

#define CameraAutoExposure_REQUIRED_BYTES_FOR_ENCODING       18 
#define CameraAutoExposure_REQUIRED_BITS_FOR_ENCODING        137
#define CameraAutoExposure_REQUIRED_BYTES_FOR_ACN_ENCODING   18 
#define CameraAutoExposure_REQUIRED_BITS_FOR_ACN_ENCODING    137
#define CameraAutoExposure_REQUIRED_BYTES_FOR_XER_ENCODING   189

void CameraAutoExposure_Initialize(CameraAutoExposure* pVal);
flag CameraAutoExposure_IsConstraintValid(const CameraAutoExposure* val, int* pErrCode);


typedef T_UInt16 PatternSequence;

#define PatternSequence_REQUIRED_BYTES_FOR_ENCODING       2 
#define PatternSequence_REQUIRED_BITS_FOR_ENCODING        16
#define PatternSequence_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define PatternSequence_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define PatternSequence_REQUIRED_BYTES_FOR_XER_ENCODING   55

void PatternSequence_Initialize(PatternSequence* pVal);
flag PatternSequence_IsConstraintValid(const PatternSequence* val, int* pErrCode);


typedef struct {
    T_Boolean enable;
    PatternSequence sequence;
} CameraPattern;

#define CameraPattern_REQUIRED_BYTES_FOR_ENCODING       3 
#define CameraPattern_REQUIRED_BITS_FOR_ENCODING        17
#define CameraPattern_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define CameraPattern_REQUIRED_BITS_FOR_ACN_ENCODING    17
#define CameraPattern_REQUIRED_BYTES_FOR_XER_ENCODING   102

void CameraPattern_Initialize(CameraPattern* pVal);
flag CameraPattern_IsConstraintValid(const CameraPattern* val, int* pErrCode);


typedef struct {
    ShutterTime shutter;
    SensorGain gain;
    T_Boolean auto_exposure_enabled;
    ShutterTime max_shutter;
    SensorGain max_gain;
    T_Boolean region_enabled;
    PlanarRegion region;
    T_Boolean flash_enabled;
    FlashStrength flash_strength;
    T_Boolean pattern_enabled;
    PatternSequence pattern_sequence;
} CameraConfiguration;

#define CameraConfiguration_REQUIRED_BYTES_FOR_ENCODING       46 
#define CameraConfiguration_REQUIRED_BITS_FOR_ENCODING        364
#define CameraConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING   46 
#define CameraConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING    364
#define CameraConfiguration_REQUIRED_BYTES_FOR_XER_ENCODING   744

void CameraConfiguration_Initialize(CameraConfiguration* pVal);
flag CameraConfiguration_IsConstraintValid(const CameraConfiguration* val, int* pErrCode);


typedef T_UInt16 PatternID;

#define PatternID_REQUIRED_BYTES_FOR_ENCODING       2 
#define PatternID_REQUIRED_BITS_FOR_ENCODING        16
#define PatternID_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define PatternID_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define PatternID_REQUIRED_BYTES_FOR_XER_ENCODING   43

void PatternID_Initialize(PatternID* pVal);
flag PatternID_IsConstraintValid(const PatternID* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag FlashStrength_Encode(const FlashStrength* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag FlashStrength_Decode(FlashStrength* pVal, BitStream* pBitStrm, int* pErrCode);
flag ShutterTime_Encode(const ShutterTime* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ShutterTime_Decode(ShutterTime* pVal, BitStream* pBitStrm, int* pErrCode);
flag CameraFlash_Encode(const CameraFlash* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CameraFlash_Decode(CameraFlash* pVal, BitStream* pBitStrm, int* pErrCode);
flag CameraRegion_Encode(const CameraRegion* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CameraRegion_Decode(CameraRegion* pVal, BitStream* pBitStrm, int* pErrCode);
flag SensorGain_Encode(const SensorGain* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SensorGain_Decode(SensorGain* pVal, BitStream* pBitStrm, int* pErrCode);
flag CameraExposure_Encode(const CameraExposure* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CameraExposure_Decode(CameraExposure* pVal, BitStream* pBitStrm, int* pErrCode);
flag CameraAutoExposure_Encode(const CameraAutoExposure* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CameraAutoExposure_Decode(CameraAutoExposure* pVal, BitStream* pBitStrm, int* pErrCode);
flag PatternSequence_Encode(const PatternSequence* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag PatternSequence_Decode(PatternSequence* pVal, BitStream* pBitStrm, int* pErrCode);
flag CameraPattern_Encode(const CameraPattern* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CameraPattern_Decode(CameraPattern* pVal, BitStream* pBitStrm, int* pErrCode);
flag CameraConfiguration_Encode(const CameraConfiguration* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CameraConfiguration_Decode(CameraConfiguration* pVal, BitStream* pBitStrm, int* pErrCode);
flag PatternID_Encode(const PatternID* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag PatternID_Decode(PatternID* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
