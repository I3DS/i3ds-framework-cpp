#ifndef GENERATED_ASN1SCC_Power_H
#define GENERATED_ASN1SCC_Power_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif




typedef struct {
    
    T_Boolean arr[16];
} PowerMask;

void PowerMask_Initialize(PowerMask* pVal);

#define ERR_POWERMASK		3564  /**/
#define ERR_POWERMASK_ELM		3553  /**/
flag PowerMask_IsConstraintValid(const PowerMask* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_POWERMASK		3565  /**/
#define ERR_UPER_ENCODE_POWERMASK_ELM_2		3560  /**/
#define PowerMask_REQUIRED_BYTES_FOR_ENCODING       2 
#define PowerMask_REQUIRED_BITS_FOR_ENCODING        16

flag PowerMask_Encode(const PowerMask* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_POWERMASK		3566  /**/
#define ERR_UPER_DECODE_POWERMASK_ELM_2		3561  /**/
flag PowerMask_Decode(PowerMask* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint PowerOutput;


void PowerOutput_Initialize(PowerOutput* pVal);

#define ERR_POWEROUTPUT		3546  /**/
flag PowerOutput_IsConstraintValid(const PowerOutput* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_POWEROUTPUT		3547  /**/
#define PowerOutput_REQUIRED_BYTES_FOR_ENCODING       1 
#define PowerOutput_REQUIRED_BITS_FOR_ENCODING        4

flag PowerOutput_Encode(const PowerOutput* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_POWEROUTPUT		3548  /**/
flag PowerOutput_Decode(PowerOutput* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
