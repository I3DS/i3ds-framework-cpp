#ifndef GENERATED_ASN1SCC_Power_H
#define GENERATED_ASN1SCC_Power_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    
    T_Boolean arr[16];
} PowerMask;

#define PowerMask_REQUIRED_BYTES_FOR_ENCODING       2 
#define PowerMask_REQUIRED_BITS_FOR_ENCODING        16
#define PowerMask_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define PowerMask_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define PowerMask_REQUIRED_BYTES_FOR_XER_ENCODING   311

void PowerMask_Initialize(PowerMask* pVal);
flag PowerMask_IsConstraintValid(const PowerMask* val, int* pErrCode);
#ifndef ERR_PowerMask 
#define ERR_PowerMask		1001  /*(SIZE(16))*/
#endif

typedef asn1SccUint PowerOutput;

#define PowerOutput_REQUIRED_BYTES_FOR_ENCODING       1 
#define PowerOutput_REQUIRED_BITS_FOR_ENCODING        4
#define PowerOutput_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define PowerOutput_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define PowerOutput_REQUIRED_BYTES_FOR_XER_ENCODING   47

void PowerOutput_Initialize(PowerOutput* pVal);
flag PowerOutput_IsConstraintValid(const PowerOutput* val, int* pErrCode);
#ifndef ERR_PowerOutput 
#define ERR_PowerOutput		1002  /*(1 .. 16)*/
#endif

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag PowerMask_Encode(const PowerMask* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag PowerMask_Decode(PowerMask* pVal, BitStream* pBitStrm, int* pErrCode);
flag PowerOutput_Encode(const PowerOutput* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag PowerOutput_Decode(PowerOutput* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
