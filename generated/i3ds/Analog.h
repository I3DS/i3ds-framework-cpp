#ifndef GENERATED_ASN1SCC_Analog_H
#define GENERATED_ASN1SCC_Analog_H
/*
Code automatically generated by asn1scc tool
*/
#include "Sensor.h"
#include "SampleAttribute.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef T_UInt8 SeriesCount;


void SeriesCount_Initialize(SeriesCount* pVal);

#define ERR_SERIESCOUNT		487  /**/
flag SeriesCount_IsConstraintValid(const SeriesCount* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SERIESCOUNT_2		494  /**/
#define SeriesCount_REQUIRED_BYTES_FOR_ENCODING       1 
#define SeriesCount_REQUIRED_BITS_FOR_ENCODING        8

flag SeriesCount_Encode(const SeriesCount* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SERIESCOUNT_2		495  /**/
flag SeriesCount_Decode(SeriesCount* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    analog_data_f = 0,
    analog_data_s = 1,
    analog_data_u = 2
} Analog_data_format_t;

// please use the following macros to avoid breaking code.
#define Analog_data_format_t_analog_data_f analog_data_f
#define Analog_data_format_t_analog_data_s analog_data_s
#define Analog_data_format_t_analog_data_u analog_data_u

void Analog_data_format_t_Initialize(Analog_data_format_t* pVal);

#define ERR_ANALOG_DATA_FORMAT_T		498  /**/
flag Analog_data_format_t_IsConstraintValid(const Analog_data_format_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ANALOG_DATA_FORMAT_T		499  /**/
#define Analog_data_format_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define Analog_data_format_t_REQUIRED_BITS_FOR_ENCODING        2

flag Analog_data_format_t_Encode(const Analog_data_format_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ANALOG_DATA_FORMAT_T		500  /**/
flag Analog_data_format_t_Decode(Analog_data_format_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- AnalogSeriesDescriptor --------------------------------------------*/
typedef struct {
    SampleAttributes attributes;
    Analog_data_format_t data_format;
    T_UInt8 data_size;
    T_UInt8 data_depth;
    T_UInt8 series;
    T_UInt32 batch_size;

} AnalogSeriesDescriptor;

void AnalogSeriesDescriptor_Initialize(AnalogSeriesDescriptor* pVal);

#define ERR_ANALOGSERIESDESCRIPTOR		689  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES		615  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_TIMESTAMP		505  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_VALIDITY		520  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES		608  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM		597  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_KEY		531  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE		586  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_BOOLEAN_VALUE		542  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_DISCRETE_VALUE		553  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_REAL_VALUE		564  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_STRING_VALUE		575  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_DATA_FORMAT		626  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_DATA_SIZE		637  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_DATA_DEPTH		648  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_SERIES		659  /**/
#define ERR_ANALOGSERIESDESCRIPTOR_BATCH_SIZE		674  /**/
flag AnalogSeriesDescriptor_IsConstraintValid(const AnalogSeriesDescriptor* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ANALOGSERIESDESCRIPTOR		690  /**/
#define ERR_UPER_ENCODE_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_2		622  /**/
#define ERR_UPER_ENCODE_ANALOGSERIESDESCRIPTOR_DATA_FORMAT_2		633  /**/
#define ERR_UPER_ENCODE_ANALOGSERIESDESCRIPTOR_DATA_SIZE_2		644  /**/
#define ERR_UPER_ENCODE_ANALOGSERIESDESCRIPTOR_DATA_DEPTH_2		655  /**/
#define ERR_UPER_ENCODE_ANALOGSERIESDESCRIPTOR_SERIES_2_2		670  /**/
#define ERR_UPER_ENCODE_ANALOGSERIESDESCRIPTOR_BATCH_SIZE_2_2		685  /**/
#define AnalogSeriesDescriptor_REQUIRED_BYTES_FOR_ENCODING       73 
#define AnalogSeriesDescriptor_REQUIRED_BITS_FOR_ENCODING        583

flag AnalogSeriesDescriptor_Encode(const AnalogSeriesDescriptor* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ANALOGSERIESDESCRIPTOR		691  /**/
#define ERR_UPER_DECODE_ANALOGSERIESDESCRIPTOR_ATTRIBUTES_2		623  /**/
#define ERR_UPER_DECODE_ANALOGSERIESDESCRIPTOR_DATA_FORMAT_2		634  /**/
#define ERR_UPER_DECODE_ANALOGSERIESDESCRIPTOR_DATA_SIZE_2		645  /**/
#define ERR_UPER_DECODE_ANALOGSERIESDESCRIPTOR_DATA_DEPTH_2		656  /**/
#define ERR_UPER_DECODE_ANALOGSERIESDESCRIPTOR_SERIES_2_2		671  /**/
#define ERR_UPER_DECODE_ANALOGSERIESDESCRIPTOR_BATCH_SIZE_2_2		686  /**/
flag AnalogSeriesDescriptor_Decode(AnalogSeriesDescriptor* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
