#ifndef GENERATED_ASN1SCC_Analog_H
#define GENERATED_ASN1SCC_Analog_H
/*
Code automatically generated by asn1scc tool
*/
#include "Sensor.h"
#include "SampleAttribute.h"
#include "taste-extended.h"
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef T_UInt8 SeriesCount;


void SeriesCount_Initialize(SeriesCount* pVal);

#define ERR_SERIESCOUNT		487  /**/
flag SeriesCount_IsConstraintValid(const SeriesCount* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SERIESCOUNT_2		494  /**/
#define SeriesCount_REQUIRED_BYTES_FOR_ENCODING       1 
#define SeriesCount_REQUIRED_BITS_FOR_ENCODING        8

flag SeriesCount_Encode(const SeriesCount* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SERIESCOUNT_2		495  /**/
flag SeriesCount_Decode(SeriesCount* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- AnalogMeasurement1K --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Float arr[1000];
} AnalogMeasurement1K_samples;
typedef struct {
    SampleAttributes attributes;
    AnalogMeasurement1K_samples samples;
    T_UInt8 series;
    T_UInt32 batch_size;

} AnalogMeasurement1K;

void AnalogMeasurement1K_samples_Initialize(AnalogMeasurement1K_samples* pVal);
void AnalogMeasurement1K_Initialize(AnalogMeasurement1K* pVal);

#define ERR_ANALOGMEASUREMENT1K		667  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES		608  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_TIMESTAMP		498  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_VALIDITY		513  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES		601  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES_ELM		590  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_KEY		524  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE		579  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_BOOLEAN_VALUE		535  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_DISCRETE_VALUE		546  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_REAL_VALUE		557  /**/
#define ERR_ANALOGMEASUREMENT1K_ATTRIBUTES_ATTRIBUTES_ELM_ATTRIBUTE_VALUE_STRING_VALUE		568  /**/
#define ERR_ANALOGMEASUREMENT1K_SAMPLES		630  /**/
#define ERR_ANALOGMEASUREMENT1K_SAMPLES_ELM		619  /**/
#define ERR_ANALOGMEASUREMENT1K_SERIES		637  /**/
#define ERR_ANALOGMEASUREMENT1K_BATCH_SIZE		652  /**/
flag AnalogMeasurement1K_IsConstraintValid(const AnalogMeasurement1K* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ANALOGMEASUREMENT1K		668  /**/
#define ERR_UPER_ENCODE_ANALOGMEASUREMENT1K_ATTRIBUTES_2		615  /**/
#define ERR_UPER_ENCODE_ANALOGMEASUREMENT1K_SAMPLES		631  /**/
#define ERR_UPER_ENCODE_ANALOGMEASUREMENT1K_SAMPLES_ELM_2		626  /**/
#define ERR_UPER_ENCODE_ANALOGMEASUREMENT1K_SERIES_2_2		648  /**/
#define ERR_UPER_ENCODE_ANALOGMEASUREMENT1K_BATCH_SIZE_2_2		663  /**/
#define AnalogMeasurement1K_REQUIRED_BYTES_FOR_ENCODING       13072 
#define AnalogMeasurement1K_REQUIRED_BITS_FOR_ENCODING        104575

flag AnalogMeasurement1K_Encode(const AnalogMeasurement1K* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ANALOGMEASUREMENT1K		669  /**/
#define ERR_UPER_DECODE_ANALOGMEASUREMENT1K_ATTRIBUTES_2		616  /**/
#define ERR_UPER_DECODE_ANALOGMEASUREMENT1K_SAMPLES		632  /**/
#define ERR_UPER_DECODE_ANALOGMEASUREMENT1K_SAMPLES_ELM_2		627  /**/
#define ERR_UPER_DECODE_ANALOGMEASUREMENT1K_SERIES_2_2		649  /**/
#define ERR_UPER_DECODE_ANALOGMEASUREMENT1K_BATCH_SIZE_2_2		664  /**/
flag AnalogMeasurement1K_Decode(AnalogMeasurement1K* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
