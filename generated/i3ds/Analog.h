#ifndef GENERATED_ASN1SCC_Analog_H
#define GENERATED_ASN1SCC_Analog_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Sensor.h"
#include "SampleAttribute.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef T_UInt8 SeriesCount;

#define SeriesCount_REQUIRED_BYTES_FOR_ENCODING       1
#define SeriesCount_REQUIRED_BITS_FOR_ENCODING        8
#define SeriesCount_REQUIRED_BYTES_FOR_ACN_ENCODING   1
#define SeriesCount_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define SeriesCount_REQUIRED_BYTES_FOR_XER_ENCODING   47

void SeriesCount_Initialize(SeriesCount* pVal);
flag SeriesCount_IsConstraintValid(const SeriesCount* val, int* pErrCode);


typedef struct
{
  int nCount;

  T_Float arr[1000];
} AnalogMeasurement1K_samples;

#define AnalogMeasurement1K_samples_REQUIRED_BYTES_FOR_ENCODING       13002
#define AnalogMeasurement1K_samples_REQUIRED_BITS_FOR_ENCODING        104010
#define AnalogMeasurement1K_samples_REQUIRED_BYTES_FOR_ACN_ENCODING   13002
#define AnalogMeasurement1K_samples_REQUIRED_BITS_FOR_ACN_ENCODING    104010
#define AnalogMeasurement1K_samples_REQUIRED_BYTES_FOR_XER_ENCODING   69059

void AnalogMeasurement1K_samples_Initialize(AnalogMeasurement1K_samples* pVal);
flag AnalogMeasurement1K_samples_IsConstraintValid(const AnalogMeasurement1K_samples* val, int* pErrCode);
#ifndef ERR_AnalogMeasurement1K_samples
#define ERR_AnalogMeasurement1K_samples		1001  /*(SIZE(0 .. 1000))*/
#endif

typedef struct
{
  SampleAttributes attributes;
  AnalogMeasurement1K_samples samples;
  SeriesCount series;
  BatchSize batch_size;
} AnalogMeasurement1K;

#define AnalogMeasurement1K_REQUIRED_BYTES_FOR_ENCODING       13073
#define AnalogMeasurement1K_REQUIRED_BITS_FOR_ENCODING        104579
#define AnalogMeasurement1K_REQUIRED_BYTES_FOR_ACN_ENCODING   13073
#define AnalogMeasurement1K_REQUIRED_BITS_FOR_ACN_ENCODING    104579
#define AnalogMeasurement1K_REQUIRED_BYTES_FOR_XER_ENCODING   70093

void AnalogMeasurement1K_Initialize(AnalogMeasurement1K* pVal);
flag AnalogMeasurement1K_IsConstraintValid(const AnalogMeasurement1K* val, int* pErrCode);




/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag SeriesCount_Encode(const SeriesCount* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SeriesCount_Decode(SeriesCount* pVal, BitStream* pBitStrm, int* pErrCode);
flag AnalogMeasurement1K_samples_Encode(const AnalogMeasurement1K_samples* val, BitStream* pBitStrm, int* pErrCode,
                                        flag bCheckConstraints);
flag AnalogMeasurement1K_samples_Decode(AnalogMeasurement1K_samples* pVal, BitStream* pBitStrm, int* pErrCode);
flag AnalogMeasurement1K_Encode(const AnalogMeasurement1K* val, BitStream* pBitStrm, int* pErrCode,
                                flag bCheckConstraints);
flag AnalogMeasurement1K_Decode(AnalogMeasurement1K* pVal, BitStream* pBitStrm, int* pErrCode);


#ifdef  __cplusplus
}

#endif

#endif
