#ifndef GENERATED_ASN1SCC_ToFCamera_H
#define GENERATED_ASN1SCC_ToFCamera_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "DepthMap.h"
#include "Region.h"
#include "SampleAttribute.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct
{
  int nCount;

  Depth_validity_t arr[400000];
} ToFMeasurement400K_validity;

#define ToFMeasurement400K_validity_REQUIRED_BYTES_FOR_ENCODING       100009
#define ToFMeasurement400K_validity_REQUIRED_BITS_FOR_ENCODING        800072
#define ToFMeasurement400K_validity_REQUIRED_BYTES_FOR_ACN_ENCODING   100003
#define ToFMeasurement400K_validity_REQUIRED_BITS_FOR_ACN_ENCODING    800019
#define ToFMeasurement400K_validity_REQUIRED_BYTES_FOR_XER_ENCODING   12000059

void ToFMeasurement400K_validity_Initialize(ToFMeasurement400K_validity* pVal);
flag ToFMeasurement400K_validity_IsConstraintValid(const ToFMeasurement400K_validity* val, int* pErrCode);
#ifndef ERR_ToFMeasurement400K_validity
#define ERR_ToFMeasurement400K_validity		1001  /*(SIZE(1 .. 400000))*/
#endif

typedef struct
{
  T_Boolean enable;
  PlanarRegion region;
} ToFRegion;

#define ToFRegion_REQUIRED_BYTES_FOR_ENCODING       9
#define ToFRegion_REQUIRED_BITS_FOR_ENCODING        65
#define ToFRegion_REQUIRED_BYTES_FOR_ACN_ENCODING   9
#define ToFRegion_REQUIRED_BITS_FOR_ACN_ENCODING    65
#define ToFRegion_REQUIRED_BYTES_FOR_XER_ENCODING   226

void ToFRegion_Initialize(ToFRegion* pVal);
flag ToFRegion_IsConstraintValid(const ToFRegion* val, int* pErrCode);


typedef struct
{
  T_Float min_depth;
  T_Float max_depth;
} ToFRange;

#define ToFRange_REQUIRED_BYTES_FOR_ENCODING       26
#define ToFRange_REQUIRED_BITS_FOR_ENCODING        208
#define ToFRange_REQUIRED_BYTES_FOR_ACN_ENCODING   26
#define ToFRange_REQUIRED_BITS_FOR_ACN_ENCODING    208
#define ToFRange_REQUIRED_BYTES_FOR_XER_ENCODING   167

void ToFRange_Initialize(ToFRange* pVal);
flag ToFRange_IsConstraintValid(const ToFRange* val, int* pErrCode);


typedef struct
{
  T_Boolean region_enabled;
  PlanarRegion region;
  T_Float min_depth;
  T_Float max_depth;
} ToFConfiguration;

#define ToFConfiguration_REQUIRED_BYTES_FOR_ENCODING       35
#define ToFConfiguration_REQUIRED_BITS_FOR_ENCODING        273
#define ToFConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING   35
#define ToFConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING    273
#define ToFConfiguration_REQUIRED_BYTES_FOR_XER_ENCODING   402

void ToFConfiguration_Initialize(ToFConfiguration* pVal);
flag ToFConfiguration_IsConstraintValid(const ToFConfiguration* val, int* pErrCode);


typedef struct
{
  int nCount;

  T_Float arr[400000];
} ToFMeasurement400K_distances;

#define ToFMeasurement400K_distances_REQUIRED_BYTES_FOR_ENCODING       5200009
#define ToFMeasurement400K_distances_REQUIRED_BITS_FOR_ENCODING        41600072
#define ToFMeasurement400K_distances_REQUIRED_BYTES_FOR_ACN_ENCODING   5200003
#define ToFMeasurement400K_distances_REQUIRED_BITS_FOR_ACN_ENCODING    41600019
#define ToFMeasurement400K_distances_REQUIRED_BYTES_FOR_XER_ENCODING   27600061

void ToFMeasurement400K_distances_Initialize(ToFMeasurement400K_distances* pVal);
flag ToFMeasurement400K_distances_IsConstraintValid(const ToFMeasurement400K_distances* val, int* pErrCode);
#ifndef ERR_ToFMeasurement400K_distances
#define ERR_ToFMeasurement400K_distances		1002  /*(SIZE(1 .. 400000))*/
#endif

typedef struct
{
  SampleAttributes attributes;
  ToFMeasurement400K_distances distances;
  ToFMeasurement400K_validity validity;
  PlanarRegion region;
} ToFMeasurement400K;

#define ToFMeasurement400K_REQUIRED_BYTES_FOR_ENCODING       5300093
#define ToFMeasurement400K_REQUIRED_BITS_FOR_ENCODING        42400737
#define ToFMeasurement400K_REQUIRED_BYTES_FOR_ACN_ENCODING   5300079
#define ToFMeasurement400K_REQUIRED_BITS_FOR_ACN_ENCODING    42400631
#define ToFMeasurement400K_REQUIRED_BYTES_FOR_XER_ENCODING   39601207

void ToFMeasurement400K_Initialize(ToFMeasurement400K* pVal);
flag ToFMeasurement400K_IsConstraintValid(const ToFMeasurement400K* val, int* pErrCode);




/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag ToFMeasurement400K_validity_Encode(const ToFMeasurement400K_validity* val, BitStream* pBitStrm, int* pErrCode,
                                        flag bCheckConstraints);
flag ToFMeasurement400K_validity_Decode(ToFMeasurement400K_validity* pVal, BitStream* pBitStrm, int* pErrCode);
flag ToFRegion_Encode(const ToFRegion* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ToFRegion_Decode(ToFRegion* pVal, BitStream* pBitStrm, int* pErrCode);
flag ToFRange_Encode(const ToFRange* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ToFRange_Decode(ToFRange* pVal, BitStream* pBitStrm, int* pErrCode);
flag ToFConfiguration_Encode(const ToFConfiguration* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ToFConfiguration_Decode(ToFConfiguration* pVal, BitStream* pBitStrm, int* pErrCode);
flag ToFMeasurement400K_distances_Encode(const ToFMeasurement400K_distances* val, BitStream* pBitStrm, int* pErrCode,
    flag bCheckConstraints);
flag ToFMeasurement400K_distances_Decode(ToFMeasurement400K_distances* pVal, BitStream* pBitStrm, int* pErrCode);
flag ToFMeasurement400K_Encode(const ToFMeasurement400K* val, BitStream* pBitStrm, int* pErrCode,
                               flag bCheckConstraints);
flag ToFMeasurement400K_Decode(ToFMeasurement400K* pVal, BitStream* pBitStrm, int* pErrCode);


#ifdef  __cplusplus
}

#endif

#endif
