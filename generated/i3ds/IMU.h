#ifndef GENERATED_ASN1SCC_IMU_H
#define GENERATED_ASN1SCC_IMU_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Sensor.h"
#include "SampleAttribute.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct
{
  T_Double axis_x_rate;
  T_Double axis_x_acceleration;
  T_Double axis_y_rate;
  T_Double axis_y_acceleration;
  T_Double axis_z_rate;
  T_Double axis_z_acceleration;
} IMUSample;

#define IMUSample_REQUIRED_BYTES_FOR_ENCODING       78
#define IMUSample_REQUIRED_BITS_FOR_ENCODING        624
#define IMUSample_REQUIRED_BYTES_FOR_ACN_ENCODING   78
#define IMUSample_REQUIRED_BITS_FOR_ACN_ENCODING    624
#define IMUSample_REQUIRED_BYTES_FOR_XER_ENCODING   533

void IMUSample_Initialize(IMUSample* pVal);
flag IMUSample_IsConstraintValid(const IMUSample* val, int* pErrCode);


typedef struct
{
  int nCount;

  IMUSample arr[20];
} IMUMeasurement20_samples;

#define IMUMeasurement20_samples_REQUIRED_BYTES_FOR_ENCODING       1561
#define IMUMeasurement20_samples_REQUIRED_BITS_FOR_ENCODING        12485
#define IMUMeasurement20_samples_REQUIRED_BYTES_FOR_ACN_ENCODING   1561
#define IMUMeasurement20_samples_REQUIRED_BITS_FOR_ACN_ENCODING    12485
#define IMUMeasurement20_samples_REQUIRED_BYTES_FOR_XER_ENCODING   10713

void IMUMeasurement20_samples_Initialize(IMUMeasurement20_samples* pVal);
flag IMUMeasurement20_samples_IsConstraintValid(const IMUMeasurement20_samples* val, int* pErrCode);
#ifndef ERR_IMUMeasurement20_samples
#define ERR_IMUMeasurement20_samples		1001  /*(SIZE(0 .. 20))*/
#endif

typedef struct
{
  SampleAttributes attributes;
  IMUMeasurement20_samples samples;
  BatchSize batch_size;
} IMUMeasurement20;

#define IMUMeasurement20_REQUIRED_BYTES_FOR_ENCODING       1631
#define IMUMeasurement20_REQUIRED_BITS_FOR_ENCODING        13046
#define IMUMeasurement20_REQUIRED_BYTES_FOR_ACN_ENCODING   1631
#define IMUMeasurement20_REQUIRED_BITS_FOR_ACN_ENCODING    13046
#define IMUMeasurement20_REQUIRED_BYTES_FOR_XER_ENCODING   11710

void IMUMeasurement20_Initialize(IMUMeasurement20* pVal);
flag IMUMeasurement20_IsConstraintValid(const IMUMeasurement20* val, int* pErrCode);




/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag IMUSample_Encode(const IMUSample* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag IMUSample_Decode(IMUSample* pVal, BitStream* pBitStrm, int* pErrCode);
flag IMUMeasurement20_samples_Encode(const IMUMeasurement20_samples* val, BitStream* pBitStrm, int* pErrCode,
                                     flag bCheckConstraints);
flag IMUMeasurement20_samples_Decode(IMUMeasurement20_samples* pVal, BitStream* pBitStrm, int* pErrCode);
flag IMUMeasurement20_Encode(const IMUMeasurement20* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag IMUMeasurement20_Decode(IMUMeasurement20* pVal, BitStream* pBitStrm, int* pErrCode);


#ifdef  __cplusplus
}

#endif

#endif
