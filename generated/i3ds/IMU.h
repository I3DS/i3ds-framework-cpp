#ifndef GENERATED_ASN1SCC_IMU_H
#define GENERATED_ASN1SCC_IMU_H
/*
Code automatically generated by asn1scc tool
*/
#include "Eigen.h"
#include "taste-types.h"
#include "Sensor.h"
#include "SampleAttribute.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    Vector3d arr[20];
} IMUMeasurement20_angular_rate;

#define IMUMeasurement20_angular_rate_REQUIRED_BYTES_FOR_ENCODING       786 
#define IMUMeasurement20_angular_rate_REQUIRED_BITS_FOR_ENCODING        6285
#define IMUMeasurement20_angular_rate_REQUIRED_BYTES_FOR_ACN_ENCODING   786 
#define IMUMeasurement20_angular_rate_REQUIRED_BITS_FOR_ACN_ENCODING    6285
#define IMUMeasurement20_angular_rate_REQUIRED_BYTES_FOR_XER_ENCODING   4743

void IMUMeasurement20_angular_rate_Initialize(IMUMeasurement20_angular_rate* pVal);
flag IMUMeasurement20_angular_rate_IsConstraintValid(const IMUMeasurement20_angular_rate* val, int* pErrCode);
#ifndef ERR_IMUMeasurement20_angular_rate 
#define ERR_IMUMeasurement20_angular_rate		1001  /*(SIZE(0 .. 20))*/
#endif

typedef struct {    int nCount; 
    
    Vector3d arr[20];
} IMUMeasurement20_linear_accel;

#define IMUMeasurement20_linear_accel_REQUIRED_BYTES_FOR_ENCODING       786 
#define IMUMeasurement20_linear_accel_REQUIRED_BITS_FOR_ENCODING        6285
#define IMUMeasurement20_linear_accel_REQUIRED_BYTES_FOR_ACN_ENCODING   786 
#define IMUMeasurement20_linear_accel_REQUIRED_BITS_FOR_ACN_ENCODING    6285
#define IMUMeasurement20_linear_accel_REQUIRED_BYTES_FOR_XER_ENCODING   4743

void IMUMeasurement20_linear_accel_Initialize(IMUMeasurement20_linear_accel* pVal);
flag IMUMeasurement20_linear_accel_IsConstraintValid(const IMUMeasurement20_linear_accel* val, int* pErrCode);
#ifndef ERR_IMUMeasurement20_linear_accel 
#define ERR_IMUMeasurement20_linear_accel		1002  /*(SIZE(0 .. 20))*/
#endif

typedef struct {
    SampleAttributes attributes;
    BatchSize batch_size;
    IMUMeasurement20_linear_accel linear_accel;
    IMUMeasurement20_angular_rate angular_rate;
} IMUMeasurement20;

#define IMUMeasurement20_REQUIRED_BYTES_FOR_ENCODING       1678 
#define IMUMeasurement20_REQUIRED_BITS_FOR_ENCODING        13423
#define IMUMeasurement20_REQUIRED_BYTES_FOR_ACN_ENCODING   1678 
#define IMUMeasurement20_REQUIRED_BITS_FOR_ACN_ENCODING    13423
#define IMUMeasurement20_REQUIRED_BYTES_FOR_XER_ENCODING   10725

void IMUMeasurement20_Initialize(IMUMeasurement20* pVal);
flag IMUMeasurement20_IsConstraintValid(const IMUMeasurement20* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag IMUMeasurement20_angular_rate_Encode(const IMUMeasurement20_angular_rate* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag IMUMeasurement20_angular_rate_Decode(IMUMeasurement20_angular_rate* pVal, BitStream* pBitStrm, int* pErrCode);
flag IMUMeasurement20_linear_accel_Encode(const IMUMeasurement20_linear_accel* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag IMUMeasurement20_linear_accel_Decode(IMUMeasurement20_linear_accel* pVal, BitStream* pBitStrm, int* pErrCode);
flag IMUMeasurement20_Encode(const IMUMeasurement20* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag IMUMeasurement20_Decode(IMUMeasurement20* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
