#ifndef GENERATED_ASN1SCC_Region_H
#define GENERATED_ASN1SCC_Region_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


/*-- PlanarRegion --------------------------------------------*/
typedef struct {
    T_UInt16 offset_x;
    T_UInt16 offset_y;
    T_UInt16 size_x;
    T_UInt16 size_y;

} PlanarRegion;

void PlanarRegion_Initialize(PlanarRegion* pVal);

#define ERR_PLANARREGION		10479  /**/
#define ERR_PLANARREGION_OFFSET_X		10435  /**/
#define ERR_PLANARREGION_OFFSET_Y		10446  /**/
#define ERR_PLANARREGION_SIZE_X		10457  /**/
#define ERR_PLANARREGION_SIZE_Y		10468  /**/
flag PlanarRegion_IsConstraintValid(const PlanarRegion* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PLANARREGION		10480  /**/
#define ERR_UPER_ENCODE_PLANARREGION_OFFSET_X_2		10442  /**/
#define ERR_UPER_ENCODE_PLANARREGION_OFFSET_Y_2		10453  /**/
#define ERR_UPER_ENCODE_PLANARREGION_SIZE_X_2		10464  /**/
#define ERR_UPER_ENCODE_PLANARREGION_SIZE_Y_2		10475  /**/
#define PlanarRegion_REQUIRED_BYTES_FOR_ENCODING       8 
#define PlanarRegion_REQUIRED_BITS_FOR_ENCODING        64

flag PlanarRegion_Encode(const PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PLANARREGION		10481  /**/
#define ERR_UPER_DECODE_PLANARREGION_OFFSET_X_2		10443  /**/
#define ERR_UPER_DECODE_PLANARREGION_OFFSET_Y_2		10454  /**/
#define ERR_UPER_DECODE_PLANARREGION_SIZE_X_2		10465  /**/
#define ERR_UPER_DECODE_PLANARREGION_SIZE_Y_2		10476  /**/
flag PlanarRegion_Decode(PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PolarRegion --------------------------------------------*/
typedef struct {
    T_Float offset_x;
    T_Float offset_y;
    T_Float size_x;
    T_Float size_y;

} PolarRegion;

void PolarRegion_Initialize(PolarRegion* pVal);

#define ERR_POLARREGION		10530  /**/
#define ERR_POLARREGION_OFFSET_X		10486  /**/
#define ERR_POLARREGION_OFFSET_Y		10497  /**/
#define ERR_POLARREGION_SIZE_X		10508  /**/
#define ERR_POLARREGION_SIZE_Y		10519  /**/
flag PolarRegion_IsConstraintValid(const PolarRegion* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_POLARREGION		10531  /**/
#define ERR_UPER_ENCODE_POLARREGION_OFFSET_X_2		10493  /**/
#define ERR_UPER_ENCODE_POLARREGION_OFFSET_Y_2		10504  /**/
#define ERR_UPER_ENCODE_POLARREGION_SIZE_X_2		10515  /**/
#define ERR_UPER_ENCODE_POLARREGION_SIZE_Y_2		10526  /**/
#define PolarRegion_REQUIRED_BYTES_FOR_ENCODING       52 
#define PolarRegion_REQUIRED_BITS_FOR_ENCODING        416

flag PolarRegion_Encode(const PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_POLARREGION		10532  /**/
#define ERR_UPER_DECODE_POLARREGION_OFFSET_X_2		10494  /**/
#define ERR_UPER_DECODE_POLARREGION_OFFSET_Y_2		10505  /**/
#define ERR_UPER_DECODE_POLARREGION_SIZE_X_2		10516  /**/
#define ERR_UPER_DECODE_POLARREGION_SIZE_Y_2		10527  /**/
flag PolarRegion_Decode(PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
