#ifndef GENERATED_ASN1SCC_Region_H
#define GENERATED_ASN1SCC_Region_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


/*-- PlanarRegion --------------------------------------------*/
typedef struct {
    T_UInt16 offset_x;
    T_UInt16 offset_y;
    T_UInt16 size_x;
    T_UInt16 size_y;

} PlanarRegion;

void PlanarRegion_Initialize(PlanarRegion* pVal);

#define ERR_PLANARREGION		2640  /**/
#define ERR_PLANARREGION_OFFSET_X		2596  /**/
#define ERR_PLANARREGION_OFFSET_Y		2607  /**/
#define ERR_PLANARREGION_SIZE_X		2618  /**/
#define ERR_PLANARREGION_SIZE_Y		2629  /**/
flag PlanarRegion_IsConstraintValid(const PlanarRegion* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PLANARREGION		2641  /**/
#define ERR_UPER_ENCODE_PLANARREGION_OFFSET_X_2		2603  /**/
#define ERR_UPER_ENCODE_PLANARREGION_OFFSET_Y_2		2614  /**/
#define ERR_UPER_ENCODE_PLANARREGION_SIZE_X_2		2625  /**/
#define ERR_UPER_ENCODE_PLANARREGION_SIZE_Y_2		2636  /**/
#define PlanarRegion_REQUIRED_BYTES_FOR_ENCODING       8 
#define PlanarRegion_REQUIRED_BITS_FOR_ENCODING        64

flag PlanarRegion_Encode(const PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PLANARREGION		2642  /**/
#define ERR_UPER_DECODE_PLANARREGION_OFFSET_X_2		2604  /**/
#define ERR_UPER_DECODE_PLANARREGION_OFFSET_Y_2		2615  /**/
#define ERR_UPER_DECODE_PLANARREGION_SIZE_X_2		2626  /**/
#define ERR_UPER_DECODE_PLANARREGION_SIZE_Y_2		2637  /**/
flag PlanarRegion_Decode(PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PolarRegion --------------------------------------------*/
typedef struct {
    T_Float offset_x;
    T_Float offset_y;
    T_Float size_x;
    T_Float size_y;

} PolarRegion;

void PolarRegion_Initialize(PolarRegion* pVal);

#define ERR_POLARREGION		2691  /**/
#define ERR_POLARREGION_OFFSET_X		2647  /**/
#define ERR_POLARREGION_OFFSET_Y		2658  /**/
#define ERR_POLARREGION_SIZE_X		2669  /**/
#define ERR_POLARREGION_SIZE_Y		2680  /**/
flag PolarRegion_IsConstraintValid(const PolarRegion* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_POLARREGION		2692  /**/
#define ERR_UPER_ENCODE_POLARREGION_OFFSET_X_2		2654  /**/
#define ERR_UPER_ENCODE_POLARREGION_OFFSET_Y_2		2665  /**/
#define ERR_UPER_ENCODE_POLARREGION_SIZE_X_2		2676  /**/
#define ERR_UPER_ENCODE_POLARREGION_SIZE_Y_2		2687  /**/
#define PolarRegion_REQUIRED_BYTES_FOR_ENCODING       52 
#define PolarRegion_REQUIRED_BITS_FOR_ENCODING        416

flag PolarRegion_Encode(const PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_POLARREGION		2693  /**/
#define ERR_UPER_DECODE_POLARREGION_OFFSET_X_2		2655  /**/
#define ERR_UPER_DECODE_POLARREGION_OFFSET_Y_2		2666  /**/
#define ERR_UPER_DECODE_POLARREGION_SIZE_X_2		2677  /**/
#define ERR_UPER_DECODE_POLARREGION_SIZE_Y_2		2688  /**/
flag PolarRegion_Decode(PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
