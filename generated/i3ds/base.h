#ifndef GENERATED_ASN1SCC_base_H
#define GENERATED_ASN1SCC_base_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "userdefs-base.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


/*-- Base_Angle --------------------------------------------*/
typedef struct {
    T_Double rad;

} Base_Angle;

void Base_Angle_Initialize(Base_Angle* pVal);

#define ERR_BASE_ANGLE		891  /**/
#define ERR_BASE_ANGLE_RAD		880  /**/
flag Base_Angle_IsConstraintValid(const Base_Angle* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_ANGLE		892  /**/
#define ERR_UPER_ENCODE_BASE_ANGLE_RAD_2		887  /**/
#define Base_Angle_REQUIRED_BYTES_FOR_ENCODING       13 
#define Base_Angle_REQUIRED_BITS_FOR_ENCODING        104

flag Base_Angle_Encode(const Base_Angle* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_ANGLE		893  /**/
#define ERR_UPER_DECODE_BASE_ANGLE_RAD_2		888  /**/
flag Base_Angle_Decode(Base_Angle* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_commands_Motion2D --------------------------------------------*/
typedef struct {
    T_Double translation;
    T_Double rotation;
    Base_Angle heading;

} Base_commands_Motion2D;

void Base_commands_Motion2D_Initialize(Base_commands_Motion2D* pVal);

#define ERR_BASE_COMMANDS_MOTION2D		1611  /**/
#define ERR_BASE_COMMANDS_MOTION2D_TRANSLATION		1567  /**/
#define ERR_BASE_COMMANDS_MOTION2D_ROTATION		1578  /**/
#define ERR_BASE_COMMANDS_MOTION2D_HEADING		1600  /**/
#define ERR_BASE_COMMANDS_MOTION2D_HEADING_RAD		1589  /**/
flag Base_commands_Motion2D_IsConstraintValid(const Base_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D		1612  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1574  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1585  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_HEADING_2		1607  /**/
#define Base_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       39 
#define Base_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        312

flag Base_commands_Motion2D_Encode(const Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D		1613  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1575  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1586  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_HEADING_2		1608  /**/
flag Base_commands_Motion2D_Decode(Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_PoseUpdateThreshold --------------------------------------------*/
typedef struct {
    T_Double distance;
    T_Double angle;

} Base_PoseUpdateThreshold;

void Base_PoseUpdateThreshold_Initialize(Base_PoseUpdateThreshold* pVal);

#define ERR_BASE_POSEUPDATETHRESHOLD		1029  /**/
#define ERR_BASE_POSEUPDATETHRESHOLD_DISTANCE		1007  /**/
#define ERR_BASE_POSEUPDATETHRESHOLD_ANGLE		1018  /**/
flag Base_PoseUpdateThreshold_IsConstraintValid(const Base_PoseUpdateThreshold* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD		1030  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		1014  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		1025  /**/
#define Base_PoseUpdateThreshold_REQUIRED_BYTES_FOR_ENCODING       26 
#define Base_PoseUpdateThreshold_REQUIRED_BITS_FOR_ENCODING        208

flag Base_PoseUpdateThreshold_Encode(const Base_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD		1031  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		1015  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		1026  /**/
flag Base_PoseUpdateThreshold_Decode(Base_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Temperature --------------------------------------------*/
typedef struct {
    T_Double kelvin;

} Base_Temperature;

void Base_Temperature_Initialize(Base_Temperature* pVal);

#define ERR_BASE_TEMPERATURE		1065  /**/
#define ERR_BASE_TEMPERATURE_KELVIN		1054  /**/
flag Base_Temperature_IsConstraintValid(const Base_Temperature* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TEMPERATURE		1066  /**/
#define ERR_UPER_ENCODE_BASE_TEMPERATURE_KELVIN_2		1061  /**/
#define Base_Temperature_REQUIRED_BYTES_FOR_ENCODING       13 
#define Base_Temperature_REQUIRED_BITS_FOR_ENCODING        104

flag Base_Temperature_Encode(const Base_Temperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TEMPERATURE		1067  /**/
#define ERR_UPER_DECODE_BASE_TEMPERATURE_KELVIN_2		1062  /**/
flag Base_Temperature_Decode(Base_Temperature* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_commands_Speed6D --------------------------------------------*/
typedef struct {
    T_Double surge;
    T_Double sway;
    T_Double heave;
    T_Double roll;
    T_Double pitch;
    T_Double yaw;

} Base_commands_Speed6D;

void Base_commands_Speed6D_Initialize(Base_commands_Speed6D* pVal);

#define ERR_BASE_COMMANDS_SPEED6D		1684  /**/
#define ERR_BASE_COMMANDS_SPEED6D_SURGE		1618  /**/
#define ERR_BASE_COMMANDS_SPEED6D_SWAY		1629  /**/
#define ERR_BASE_COMMANDS_SPEED6D_HEAVE		1640  /**/
#define ERR_BASE_COMMANDS_SPEED6D_ROLL		1651  /**/
#define ERR_BASE_COMMANDS_SPEED6D_PITCH		1662  /**/
#define ERR_BASE_COMMANDS_SPEED6D_YAW		1673  /**/
flag Base_commands_Speed6D_IsConstraintValid(const Base_commands_Speed6D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D		1685  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SURGE_2		1625  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SWAY_2		1636  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1647  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_ROLL_2		1658  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_PITCH_2		1669  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_YAW_2		1680  /**/
#define Base_commands_Speed6D_REQUIRED_BYTES_FOR_ENCODING       78 
#define Base_commands_Speed6D_REQUIRED_BITS_FOR_ENCODING        624

flag Base_commands_Speed6D_Encode(const Base_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D		1686  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SURGE_2		1626  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SWAY_2		1637  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1648  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_ROLL_2		1659  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_PITCH_2		1670  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_YAW_2		1681  /**/
flag Base_commands_Speed6D_Decode(Base_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_AngleAxisd --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[3];
} Wrappers_AngleAxisd_axis;
typedef struct {
    T_Double angle;
    Wrappers_AngleAxisd_axis axis;

} Wrappers_AngleAxisd;

void Wrappers_AngleAxisd_axis_Initialize(Wrappers_AngleAxisd_axis* pVal);
void Wrappers_AngleAxisd_Initialize(Wrappers_AngleAxisd* pVal);

#define ERR_WRAPPERS_ANGLEAXISD		5701  /**/
#define ERR_WRAPPERS_ANGLEAXISD_ANGLE		5672  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS		5694  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS_ELM		5683  /**/
flag Wrappers_AngleAxisd_IsConstraintValid(const Wrappers_AngleAxisd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD		5702  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5679  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS		5695  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5690  /**/
#define Wrappers_AngleAxisd_REQUIRED_BYTES_FOR_ENCODING       53 
#define Wrappers_AngleAxisd_REQUIRED_BITS_FOR_ENCODING        418

flag Wrappers_AngleAxisd_Encode(const Wrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD		5703  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5680  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS		5696  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5691  /**/
flag Wrappers_AngleAxisd_Decode(Wrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Vector2d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[2];
} Wrappers_Vector2d_data;
typedef struct {
    Wrappers_Vector2d_data data;

} Wrappers_Vector2d;

void Wrappers_Vector2d_data_Initialize(Wrappers_Vector2d_data* pVal);
void Wrappers_Vector2d_Initialize(Wrappers_Vector2d* pVal);

#define ERR_WRAPPERS_VECTOR2D		5726  /**/
#define ERR_WRAPPERS_VECTOR2D_DATA		5719  /**/
#define ERR_WRAPPERS_VECTOR2D_DATA_ELM		5708  /**/
flag Wrappers_Vector2d_IsConstraintValid(const Wrappers_Vector2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D		5727  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA		5720  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5715  /**/
#define Wrappers_Vector2d_REQUIRED_BYTES_FOR_ENCODING       27 
#define Wrappers_Vector2d_REQUIRED_BITS_FOR_ENCODING        209

flag Wrappers_Vector2d_Encode(const Wrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D		5728  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA		5721  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5716  /**/
flag Wrappers_Vector2d_Decode(Wrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Pose2D --------------------------------------------*/
typedef struct {
    Wrappers_Vector2d position;
    T_Double orientation;

} Base_Pose2D;

void Base_Pose2D_Initialize(Base_Pose2D* pVal);

#define ERR_BASE_POSE2D		1000  /**/
#define ERR_BASE_POSE2D_POSITION		978  /**/
#define ERR_BASE_POSE2D_POSITION_DATA		971  /**/
#define ERR_BASE_POSE2D_POSITION_DATA_ELM		960  /**/
#define ERR_BASE_POSE2D_ORIENTATION		989  /**/
flag Base_Pose2D_IsConstraintValid(const Base_Pose2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D		1001  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_POSITION_2		985  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_ORIENTATION_2		996  /**/
#define Base_Pose2D_REQUIRED_BYTES_FOR_ENCODING       40 
#define Base_Pose2D_REQUIRED_BITS_FOR_ENCODING        313

flag Base_Pose2D_Encode(const Base_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D		1002  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_POSITION_2		986  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_ORIENTATION_2		997  /**/
flag Base_Pose2D_Decode(Base_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Pose2D_m --------------------------------------------*/
typedef struct {
    Wrappers_Vector2d position;
    T_Double orientation;

} Base_Pose2D_m;

void Base_Pose2D_m_Initialize(Base_Pose2D_m* pVal);

#define ERR_BASE_POSE2D_M		6114  /**/
#define ERR_BASE_POSE2D_M_POSITION		6092  /**/
#define ERR_BASE_POSE2D_M_POSITION_DATA		6085  /**/
#define ERR_BASE_POSE2D_M_POSITION_DATA_ELM		6074  /**/
#define ERR_BASE_POSE2D_M_ORIENTATION		6103  /**/
flag Base_Pose2D_m_IsConstraintValid(const Base_Pose2D_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D_M		6115  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_POSITION_2		6099  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_ORIENTATION_2		6110  /**/
#define Base_Pose2D_m_REQUIRED_BYTES_FOR_ENCODING       40 
#define Base_Pose2D_m_REQUIRED_BITS_FOR_ENCODING        313

flag Base_Pose2D_m_Encode(const Base_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D_M		6116  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_POSITION_2		6100  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_ORIENTATION_2		6111  /**/
flag Base_Pose2D_m_Decode(Base_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Matrix2d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[4];
} Wrappers_Matrix2d_data;
typedef struct {
    Wrappers_Matrix2d_data data;

} Wrappers_Matrix2d;

void Wrappers_Matrix2d_data_Initialize(Wrappers_Matrix2d_data* pVal);
void Wrappers_Matrix2d_Initialize(Wrappers_Matrix2d* pVal);

#define ERR_WRAPPERS_MATRIX2D		5751  /**/
#define ERR_WRAPPERS_MATRIX2D_DATA		5744  /**/
#define ERR_WRAPPERS_MATRIX2D_DATA_ELM		5733  /**/
flag Wrappers_Matrix2d_IsConstraintValid(const Wrappers_Matrix2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D		5752  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA		5745  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5740  /**/
#define Wrappers_Matrix2d_REQUIRED_BYTES_FOR_ENCODING       53 
#define Wrappers_Matrix2d_REQUIRED_BITS_FOR_ENCODING        418

flag Wrappers_Matrix2d_Encode(const Wrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D		5753  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA		5746  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5741  /**/
flag Wrappers_Matrix2d_Decode(Wrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Vector3d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[3];
} Wrappers_Vector3d_data;
typedef struct {
    Wrappers_Vector3d_data data;

} Wrappers_Vector3d;

void Wrappers_Vector3d_data_Initialize(Wrappers_Vector3d_data* pVal);
void Wrappers_Vector3d_Initialize(Wrappers_Vector3d* pVal);

#define ERR_WRAPPERS_VECTOR3D		5776  /**/
#define ERR_WRAPPERS_VECTOR3D_DATA		5769  /**/
#define ERR_WRAPPERS_VECTOR3D_DATA_ELM		5758  /**/
flag Wrappers_Vector3d_IsConstraintValid(const Wrappers_Vector3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D		5777  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA		5770  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5765  /**/
#define Wrappers_Vector3d_REQUIRED_BYTES_FOR_ENCODING       40 
#define Wrappers_Vector3d_REQUIRED_BITS_FOR_ENCODING        314

flag Wrappers_Vector3d_Encode(const Wrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D		5778  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA		5771  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5766  /**/
flag Wrappers_Vector3d_Decode(Wrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Wrench --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d force;
    Wrappers_Vector3d torque;

} Base_Wrench;

void Base_Wrench_Initialize(Base_Wrench* pVal);

#define ERR_BASE_WRENCH		873  /**/
#define ERR_BASE_WRENCH_FORCE		833  /**/
#define ERR_BASE_WRENCH_FORCE_DATA		826  /**/
#define ERR_BASE_WRENCH_FORCE_DATA_ELM		815  /**/
#define ERR_BASE_WRENCH_TORQUE		862  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA		855  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA_ELM		844  /**/
flag Base_Wrench_IsConstraintValid(const Base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH		874  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_FORCE_2		840  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_TORQUE_2		869  /**/
#define Base_Wrench_REQUIRED_BYTES_FOR_ENCODING       79 
#define Base_Wrench_REQUIRED_BITS_FOR_ENCODING        628

flag Base_Wrench_Encode(const Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH		875  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_FORCE_2		841  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_TORQUE_2		870  /**/
flag Base_Wrench_Decode(Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Waypoint --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d position;
    T_Double heading;
    T_Double tol_position;
    T_Double tol_heading;

} Base_Waypoint;

void Base_Waypoint_Initialize(Base_Waypoint* pVal);

#define ERR_BASE_WAYPOINT		1261  /**/
#define ERR_BASE_WAYPOINT_POSITION		1217  /**/
#define ERR_BASE_WAYPOINT_POSITION_DATA		1210  /**/
#define ERR_BASE_WAYPOINT_POSITION_DATA_ELM		1199  /**/
#define ERR_BASE_WAYPOINT_HEADING		1228  /**/
#define ERR_BASE_WAYPOINT_TOL_POSITION		1239  /**/
#define ERR_BASE_WAYPOINT_TOL_HEADING		1250  /**/
flag Base_Waypoint_IsConstraintValid(const Base_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT		1262  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_POSITION_2		1224  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_HEADING_2		1235  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_POSITION_2		1246  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_HEADING_2		1257  /**/
#define Base_Waypoint_REQUIRED_BYTES_FOR_ENCODING       79 
#define Base_Waypoint_REQUIRED_BITS_FOR_ENCODING        626

flag Base_Waypoint_Encode(const Base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT		1263  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_POSITION_2		1225  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_HEADING_2		1236  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_POSITION_2		1247  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_HEADING_2		1258  /**/
flag Base_Waypoint_Decode(Base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Waypoint_m --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d position;
    T_Double heading;
    T_Double tol_position;
    T_Double tol_heading;

} Base_Waypoint_m;

void Base_Waypoint_m_Initialize(Base_Waypoint_m* pVal);

#define ERR_BASE_WAYPOINT_M		6458  /**/
#define ERR_BASE_WAYPOINT_M_POSITION		6414  /**/
#define ERR_BASE_WAYPOINT_M_POSITION_DATA		6407  /**/
#define ERR_BASE_WAYPOINT_M_POSITION_DATA_ELM		6396  /**/
#define ERR_BASE_WAYPOINT_M_HEADING		6425  /**/
#define ERR_BASE_WAYPOINT_M_TOL_POSITION		6436  /**/
#define ERR_BASE_WAYPOINT_M_TOL_HEADING		6447  /**/
flag Base_Waypoint_m_IsConstraintValid(const Base_Waypoint_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT_M		6459  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_POSITION_2		6421  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_HEADING_2		6432  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_POSITION_2		6443  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_HEADING_2		6454  /**/
#define Base_Waypoint_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define Base_Waypoint_m_REQUIRED_BITS_FOR_ENCODING        626

flag Base_Waypoint_m_Encode(const Base_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT_M		6460  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_POSITION_2		6422  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_HEADING_2		6433  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_POSITION_2		6444  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_HEADING_2		6455  /**/
flag Base_Waypoint_m_Decode(Base_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    Base_Waypoint_m arr[200];
} Std_orogen_typekits_mtype_std_vector_base_Waypoint;

void Std_orogen_typekits_mtype_std_vector_base_Waypoint_Initialize(Std_orogen_typekits_mtype_std_vector_base_Waypoint* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		301  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM		290  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION		246  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA		239  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA_ELM		228  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_HEADING		257  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_POSITION		268  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_HEADING		279  /**/
flag Std_orogen_typekits_mtype_std_vector_base_Waypoint_IsConstraintValid(const Std_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		302  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		297  /**/
#define Std_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BYTES_FOR_ENCODING       15651 
#define Std_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BITS_FOR_ENCODING        125208

flag Std_orogen_typekits_mtype_std_vector_base_Waypoint_Encode(const Std_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		303  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		298  /**/
flag Std_orogen_typekits_mtype_std_vector_base_Waypoint_Decode(Std_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Wrench_m --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d force;
    Wrappers_Vector3d torque;

} Base_Wrench_m;

void Base_Wrench_m_Initialize(Base_Wrench_m* pVal);

#define ERR_BASE_WRENCH_M		6523  /**/
#define ERR_BASE_WRENCH_M_FORCE		6483  /**/
#define ERR_BASE_WRENCH_M_FORCE_DATA		6476  /**/
#define ERR_BASE_WRENCH_M_FORCE_DATA_ELM		6465  /**/
#define ERR_BASE_WRENCH_M_TORQUE		6512  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA		6505  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA_ELM		6494  /**/
flag Base_Wrench_m_IsConstraintValid(const Base_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH_M		6524  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_FORCE_2		6490  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_TORQUE_2		6519  /**/
#define Base_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define Base_Wrench_m_REQUIRED_BITS_FOR_ENCODING        628

flag Base_Wrench_m_Encode(const Base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH_M		6525  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_FORCE_2		6491  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_TORQUE_2		6520  /**/
flag Base_Wrench_m_Decode(Base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    Base_Wrench_m arr[200];
} Std_orogen_typekits_mtype_std_vector_base_Wrench;

void Std_orogen_typekits_mtype_std_vector_base_Wrench_Initialize(Std_orogen_typekits_mtype_std_vector_base_Wrench* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		377  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM		366  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE		326  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA		319  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA_ELM		308  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE		355  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA		348  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA_ELM		337  /**/
flag Std_orogen_typekits_mtype_std_vector_base_Wrench_IsConstraintValid(const Std_orogen_typekits_mtype_std_vector_base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		378  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		373  /**/
#define Std_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BYTES_FOR_ENCODING       15701 
#define Std_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BITS_FOR_ENCODING        125608

flag Std_orogen_typekits_mtype_std_vector_base_Wrench_Encode(const Std_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		379  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		374  /**/
flag Std_orogen_typekits_mtype_std_vector_base_Wrench_Decode(Std_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Matrix3d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[9];
} Wrappers_Matrix3d_data;
typedef struct {
    Wrappers_Matrix3d_data data;

} Wrappers_Matrix3d;

void Wrappers_Matrix3d_data_Initialize(Wrappers_Matrix3d_data* pVal);
void Wrappers_Matrix3d_Initialize(Wrappers_Matrix3d* pVal);

#define ERR_WRAPPERS_MATRIX3D		5801  /**/
#define ERR_WRAPPERS_MATRIX3D_DATA		5794  /**/
#define ERR_WRAPPERS_MATRIX3D_DATA_ELM		5783  /**/
flag Wrappers_Matrix3d_IsConstraintValid(const Wrappers_Matrix3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D		5802  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA		5795  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5790  /**/
#define Wrappers_Matrix3d_REQUIRED_BYTES_FOR_ENCODING       118 
#define Wrappers_Matrix3d_REQUIRED_BITS_FOR_ENCODING        940

flag Wrappers_Matrix3d_Encode(const Wrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D		5803  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA		5796  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5791  /**/
flag Wrappers_Matrix3d_Decode(Wrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Vector4d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[4];
} Wrappers_Vector4d_data;
typedef struct {
    Wrappers_Vector4d_data data;

} Wrappers_Vector4d;

void Wrappers_Vector4d_data_Initialize(Wrappers_Vector4d_data* pVal);
void Wrappers_Vector4d_Initialize(Wrappers_Vector4d* pVal);

#define ERR_WRAPPERS_VECTOR4D		5826  /**/
#define ERR_WRAPPERS_VECTOR4D_DATA		5819  /**/
#define ERR_WRAPPERS_VECTOR4D_DATA_ELM		5808  /**/
flag Wrappers_Vector4d_IsConstraintValid(const Wrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D		5827  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA		5820  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5815  /**/
#define Wrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       53 
#define Wrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        418

flag Wrappers_Vector4d_Encode(const Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D		5828  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA		5821  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5816  /**/
flag Wrappers_Vector4d_Decode(Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    Wrappers_Vector4d arr[200];
} Std_vector_Wrappers_Vector4d;

void Std_vector_Wrappers_Vector4d_Initialize(Std_vector_Wrappers_Vector4d* pVal);

#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D		413  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM		402  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA		395  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA_ELM		384  /**/
flag Std_vector_Wrappers_Vector4d_IsConstraintValid(const Std_vector_Wrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D		414  /**/
#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		409  /**/
#define Std_vector_Wrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       10451 
#define Std_vector_Wrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        83608

flag Std_vector_Wrappers_Vector4d_Encode(const Std_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D		415  /**/
#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		410  /**/
flag Std_vector_Wrappers_Vector4d_Decode(Std_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Matrix4d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[16];
} Wrappers_Matrix4d_data;
typedef struct {
    Wrappers_Matrix4d_data data;

} Wrappers_Matrix4d;

void Wrappers_Matrix4d_data_Initialize(Wrappers_Matrix4d_data* pVal);
void Wrappers_Matrix4d_Initialize(Wrappers_Matrix4d* pVal);

#define ERR_WRAPPERS_MATRIX4D		5851  /**/
#define ERR_WRAPPERS_MATRIX4D_DATA		5844  /**/
#define ERR_WRAPPERS_MATRIX4D_DATA_ELM		5833  /**/
flag Wrappers_Matrix4d_IsConstraintValid(const Wrappers_Matrix4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D		5852  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA		5845  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5840  /**/
#define Wrappers_Matrix4d_REQUIRED_BYTES_FOR_ENCODING       209 
#define Wrappers_Matrix4d_REQUIRED_BITS_FOR_ENCODING        1668

flag Wrappers_Matrix4d_Encode(const Wrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D		5853  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA		5846  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5841  /**/
flag Wrappers_Matrix4d_Decode(Wrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Vector6d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[6];
} Wrappers_Vector6d_data;
typedef struct {
    Wrappers_Vector6d_data data;

} Wrappers_Vector6d;

void Wrappers_Vector6d_data_Initialize(Wrappers_Vector6d_data* pVal);
void Wrappers_Vector6d_Initialize(Wrappers_Vector6d* pVal);

#define ERR_WRAPPERS_VECTOR6D		5876  /**/
#define ERR_WRAPPERS_VECTOR6D_DATA		5869  /**/
#define ERR_WRAPPERS_VECTOR6D_DATA_ELM		5858  /**/
flag Wrappers_Vector6d_IsConstraintValid(const Wrappers_Vector6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D		5877  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA		5870  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5865  /**/
#define Wrappers_Vector6d_REQUIRED_BYTES_FOR_ENCODING       79 
#define Wrappers_Vector6d_REQUIRED_BITS_FOR_ENCODING        627

flag Wrappers_Vector6d_Encode(const Wrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D		5878  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA		5871  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5866  /**/
flag Wrappers_Vector6d_Decode(Wrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Matrix6d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[36];
} Wrappers_Matrix6d_data;
typedef struct {
    Wrappers_Matrix6d_data data;

} Wrappers_Matrix6d;

void Wrappers_Matrix6d_data_Initialize(Wrappers_Matrix6d_data* pVal);
void Wrappers_Matrix6d_Initialize(Wrappers_Matrix6d* pVal);

#define ERR_WRAPPERS_MATRIX6D		5901  /**/
#define ERR_WRAPPERS_MATRIX6D_DATA		5894  /**/
#define ERR_WRAPPERS_MATRIX6D_DATA_ELM		5883  /**/
flag Wrappers_Matrix6d_IsConstraintValid(const Wrappers_Matrix6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D		5902  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA		5895  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5890  /**/
#define Wrappers_Matrix6d_REQUIRED_BYTES_FOR_ENCODING       469 
#define Wrappers_Matrix6d_REQUIRED_BITS_FOR_ENCODING        3750

flag Wrappers_Matrix6d_Encode(const Wrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D		5903  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA		5896  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5891  /**/
flag Wrappers_Matrix6d_Decode(Wrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_TwistWithCovariance --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d vel;
    Wrappers_Vector3d rot;
    Wrappers_Matrix6d cov;

} Base_TwistWithCovariance;

void Base_TwistWithCovariance_Initialize(Base_TwistWithCovariance* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE		808  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_VEL		739  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA		732  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA_ELM		721  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT		768  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA		761  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA_ELM		750  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV		797  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA		790  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA_ELM		779  /**/
flag Base_TwistWithCovariance_IsConstraintValid(const Base_TwistWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE		809  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_VEL_2		746  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_ROT_2		775  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_COV_2		804  /**/
#define Base_TwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       548 
#define Base_TwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4378

flag Base_TwistWithCovariance_Encode(const Base_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE		810  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_VEL_2		747  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_ROT_2		776  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_COV_2		805  /**/
flag Base_TwistWithCovariance_Decode(Base_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_TwistWithCovariance_m --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d vel;
    Wrappers_Vector3d rot;
    Wrappers_Matrix6d cov;

} Base_TwistWithCovariance_m;

void Base_TwistWithCovariance_m_Initialize(Base_TwistWithCovariance_m* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE_M		6389  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL		6320  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA		6313  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA_ELM		6302  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT		6349  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA		6342  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA_ELM		6331  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV		6378  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA		6371  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA_ELM		6360  /**/
flag Base_TwistWithCovariance_m_IsConstraintValid(const Base_TwistWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M		6390  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6327  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6356  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6385  /**/
#define Base_TwistWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       548 
#define Base_TwistWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4378

flag Base_TwistWithCovariance_m_Encode(const Base_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M		6391  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6328  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6357  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6386  /**/
flag Base_TwistWithCovariance_m_Decode(Base_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_Quaterniond --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[3];
} Wrappers_Quaterniond_im;
typedef struct {
    Wrappers_Quaterniond_im im;
    T_Double re;

} Wrappers_Quaterniond;

void Wrappers_Quaterniond_im_Initialize(Wrappers_Quaterniond_im* pVal);
void Wrappers_Quaterniond_Initialize(Wrappers_Quaterniond* pVal);

#define ERR_WRAPPERS_QUATERNIOND		5984  /**/
#define ERR_WRAPPERS_QUATERNIOND_IM		5966  /**/
#define ERR_WRAPPERS_QUATERNIOND_IM_ELM		5955  /**/
#define ERR_WRAPPERS_QUATERNIOND_RE		5973  /**/
flag Wrappers_Quaterniond_IsConstraintValid(const Wrappers_Quaterniond* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND		5985  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM		5967  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5962  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_RE_2		5980  /**/
#define Wrappers_Quaterniond_REQUIRED_BYTES_FOR_ENCODING       53 
#define Wrappers_Quaterniond_REQUIRED_BITS_FOR_ENCODING        418

flag Wrappers_Quaterniond_Encode(const Wrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND		5986  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM		5968  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5963  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_RE_2		5981  /**/
flag Wrappers_Quaterniond_Decode(Wrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Pose --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d position;
    Wrappers_Quaterniond orientation;

} Base_Pose;

void Base_Pose_Initialize(Base_Pose* pVal);

#define ERR_BASE_POSE		609  /**/
#define ERR_BASE_POSE_POSITION		558  /**/
#define ERR_BASE_POSE_POSITION_DATA		551  /**/
#define ERR_BASE_POSE_POSITION_DATA_ELM		540  /**/
#define ERR_BASE_POSE_ORIENTATION		598  /**/
#define ERR_BASE_POSE_ORIENTATION_IM		580  /**/
#define ERR_BASE_POSE_ORIENTATION_IM_ELM		569  /**/
#define ERR_BASE_POSE_ORIENTATION_RE		587  /**/
flag Base_Pose_IsConstraintValid(const Base_Pose* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE		610  /**/
#define ERR_UPER_ENCODE_BASE_POSE_POSITION_2		565  /**/
#define ERR_UPER_ENCODE_BASE_POSE_ORIENTATION_2		605  /**/
#define Base_Pose_REQUIRED_BYTES_FOR_ENCODING       92 
#define Base_Pose_REQUIRED_BITS_FOR_ENCODING        732

flag Base_Pose_Encode(const Base_Pose* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE		611  /**/
#define ERR_UPER_DECODE_BASE_POSE_POSITION_2		566  /**/
#define ERR_UPER_DECODE_BASE_POSE_ORIENTATION_2		606  /**/
flag Base_Pose_Decode(Base_Pose* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_TransformWithCovariance --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d translation;
    Wrappers_Quaterniond orientation;
    Wrappers_Matrix6d cov;

} Base_TransformWithCovariance;

void Base_TransformWithCovariance_Initialize(Base_TransformWithCovariance* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE		714  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION		634  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA		627  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA_ELM		616  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION		674  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM		656  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM_ELM		645  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_RE		663  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV		703  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA		696  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA_ELM		685  /**/
flag Base_TransformWithCovariance_IsConstraintValid(const Base_TransformWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE		715  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		641  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		681  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		710  /**/
#define Base_TransformWithCovariance_REQUIRED_BYTES_FOR_ENCODING       561 
#define Base_TransformWithCovariance_REQUIRED_BITS_FOR_ENCODING        4482

flag Base_TransformWithCovariance_Encode(const Base_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE		716  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		642  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		682  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		711  /**/
flag Base_TransformWithCovariance_Decode(Base_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Pose_m --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d position;
    Wrappers_Quaterniond orientation;

} Base_Pose_m;

void Base_Pose_m_Initialize(Base_Pose_m* pVal);

#define ERR_BASE_POSE_M		6190  /**/
#define ERR_BASE_POSE_M_POSITION		6139  /**/
#define ERR_BASE_POSE_M_POSITION_DATA		6132  /**/
#define ERR_BASE_POSE_M_POSITION_DATA_ELM		6121  /**/
#define ERR_BASE_POSE_M_ORIENTATION		6179  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM		6161  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM_ELM		6150  /**/
#define ERR_BASE_POSE_M_ORIENTATION_RE		6168  /**/
flag Base_Pose_m_IsConstraintValid(const Base_Pose_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE_M		6191  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_POSITION_2		6146  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_ORIENTATION_2		6186  /**/
#define Base_Pose_m_REQUIRED_BYTES_FOR_ENCODING       92 
#define Base_Pose_m_REQUIRED_BITS_FOR_ENCODING        732

flag Base_Pose_m_Encode(const Base_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE_M		6192  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_POSITION_2		6147  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_ORIENTATION_2		6187  /**/
flag Base_Pose_m_Decode(Base_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_TransformWithCovariance_m --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d translation;
    Wrappers_Quaterniond orientation;
    Wrappers_Matrix6d cov;

} Base_TransformWithCovariance_m;

void Base_TransformWithCovariance_m_Initialize(Base_TransformWithCovariance_m* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M		6295  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION		6215  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA		6208  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA_ELM		6197  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION		6255  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM		6237  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM_ELM		6226  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_RE		6244  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV		6284  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA		6277  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA_ELM		6266  /**/
flag Base_TransformWithCovariance_m_IsConstraintValid(const Base_TransformWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M		6296  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6222  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6262  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6291  /**/
#define Base_TransformWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       561 
#define Base_TransformWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4482

flag Base_TransformWithCovariance_m_Encode(const Base_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M		6297  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6223  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6263  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6292  /**/
flag Base_TransformWithCovariance_m_Decode(Base_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_VectorXd --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[200];
} Wrappers_VectorXd_data;
typedef struct {
    Wrappers_VectorXd_data data;

} Wrappers_VectorXd;

void Wrappers_VectorXd_data_Initialize(Wrappers_VectorXd_data* pVal);
void Wrappers_VectorXd_Initialize(Wrappers_VectorXd* pVal);

#define ERR_WRAPPERS_VECTORXD		6009  /**/
#define ERR_WRAPPERS_VECTORXD_DATA		6002  /**/
#define ERR_WRAPPERS_VECTORXD_DATA_ELM		5991  /**/
flag Wrappers_VectorXd_IsConstraintValid(const Wrappers_VectorXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD		6010  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA		6003  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA_ELM_2		5998  /**/
#define Wrappers_VectorXd_REQUIRED_BYTES_FOR_ENCODING       2601 
#define Wrappers_VectorXd_REQUIRED_BITS_FOR_ENCODING        20808

flag Wrappers_VectorXd_Encode(const Wrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTORXD		6011  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA		6004  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA_ELM_2		5999  /**/
flag Wrappers_VectorXd_Decode(Wrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointState --------------------------------------------*/
typedef struct {
    T_Double position;
    T_Float speed;
    T_Float effort;
    T_Float raw;
    T_Float acceleration;

} Base_JointState;

void Base_JointState_Initialize(Base_JointState* pVal);

#define ERR_BASE_JOINTSTATE		953  /**/
#define ERR_BASE_JOINTSTATE_POSITION		898  /**/
#define ERR_BASE_JOINTSTATE_SPEED		909  /**/
#define ERR_BASE_JOINTSTATE_EFFORT		920  /**/
#define ERR_BASE_JOINTSTATE_RAW		931  /**/
#define ERR_BASE_JOINTSTATE_ACCELERATION		942  /**/
flag Base_JointState_IsConstraintValid(const Base_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE		954  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_POSITION_2		905  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_SPEED_2		916  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_EFFORT_2		927  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_RAW_2		938  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_ACCELERATION_2		949  /**/
#define Base_JointState_REQUIRED_BYTES_FOR_ENCODING       65 
#define Base_JointState_REQUIRED_BITS_FOR_ENCODING        520

flag Base_JointState_Encode(const Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE		955  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_POSITION_2		906  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_SPEED_2		917  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_EFFORT_2		928  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_RAW_2		939  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_ACCELERATION_2		950  /**/
flag Base_JointState_Decode(Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    Base_JointState arr[200];
} Base_JointTrajectory;

void Base_JointTrajectory_Initialize(Base_JointTrajectory* pVal);

#define ERR_BASE_JOINTTRAJECTORY		152  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM		141  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_POSITION		86  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_SPEED		97  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_EFFORT		108  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_RAW		119  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_ACCELERATION		130  /**/
flag Base_JointTrajectory_IsConstraintValid(const Base_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY		153  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY_ELM_2		148  /**/
#define Base_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       13001 
#define Base_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        104008

flag Base_JointTrajectory_Encode(const Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY		154  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY_ELM_2		149  /**/
flag Base_JointTrajectory_Decode(Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointLimitRange --------------------------------------------*/
typedef struct {
    Base_JointState min;
    Base_JointState max;

} Base_JointLimitRange;

void Base_JointLimitRange_Initialize(Base_JointLimitRange* pVal);

#define ERR_BASE_JOINTLIMITRANGE		1400  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN		1323  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_POSITION		1268  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_SPEED		1279  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_EFFORT		1290  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_RAW		1301  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_ACCELERATION		1312  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX		1389  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_POSITION		1334  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_SPEED		1345  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_EFFORT		1356  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_RAW		1367  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_ACCELERATION		1378  /**/
flag Base_JointLimitRange_IsConstraintValid(const Base_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE		1401  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MIN_2		1330  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MAX_2		1396  /**/
#define Base_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       130 
#define Base_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        1040

flag Base_JointLimitRange_Encode(const Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE		1402  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MIN_2		1331  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MAX_2		1397  /**/
flag Base_JointLimitRange_Decode(Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Pressure --------------------------------------------*/
typedef struct {
    T_Float pascal;

} Base_Pressure;

void Base_Pressure_Initialize(Base_Pressure* pVal);

#define ERR_BASE_PRESSURE		1047  /**/
#define ERR_BASE_PRESSURE_PASCAL		1036  /**/
flag Base_Pressure_IsConstraintValid(const Base_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_PRESSURE		1048  /**/
#define ERR_UPER_ENCODE_BASE_PRESSURE_PASCAL_2		1043  /**/
#define Base_Pressure_REQUIRED_BYTES_FOR_ENCODING       13 
#define Base_Pressure_REQUIRED_BITS_FOR_ENCODING        104

flag Base_Pressure_Encode(const Base_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_PRESSURE		1049  /**/
#define ERR_UPER_DECODE_BASE_PRESSURE_PASCAL_2		1044  /**/
flag Base_Pressure_Decode(Base_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Time --------------------------------------------*/
typedef struct {
    T_Int64 microseconds;

} Base_Time;

void Base_Time_Initialize(Base_Time* pVal);

#define ERR_BASE_TIME		1083  /**/
#define ERR_BASE_TIME_MICROSECONDS		1072  /**/
flag Base_Time_IsConstraintValid(const Base_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME		1084  /**/
#define ERR_UPER_ENCODE_BASE_TIME_MICROSECONDS_2		1079  /**/
#define Base_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define Base_Time_REQUIRED_BITS_FOR_ENCODING        64

flag Base_Time_Encode(const Base_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME		1085  /**/
#define ERR_UPER_DECODE_BASE_TIME_MICROSECONDS_2		1080  /**/
flag Base_Time_Decode(Base_Time* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_TimeStamped_Base_commands_Motion2D --------------------------------------------*/
typedef struct {
    T_Double translation;
    T_Double rotation;
    Base_Angle heading;
    Base_Time time;

} Base_TimeStamped_Base_commands_Motion2D;

void Base_TimeStamped_Base_commands_Motion2D_Initialize(Base_TimeStamped_Base_commands_Motion2D* pVal);

#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1473  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION		1407  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION		1418  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING		1440  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_RAD		1429  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME		1462  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_MICROSECONDS		1451  /**/
flag Base_TimeStamped_Base_commands_Motion2D_IsConstraintValid(const Base_TimeStamped_Base_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1474  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1414  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1425  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1447  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1469  /**/
#define Base_TimeStamped_Base_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define Base_TimeStamped_Base_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag Base_TimeStamped_Base_commands_Motion2D_Encode(const Base_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1475  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1415  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1426  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1448  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1470  /**/
flag Base_TimeStamped_Base_commands_Motion2D_Decode(Base_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_LinearAngular6DCommand --------------------------------------------*/
typedef struct {
    Base_Time time;
    Wrappers_Vector3d linear;
    Wrappers_Vector3d angular;

} Base_LinearAngular6DCommand;

void Base_LinearAngular6DCommand_Initialize(Base_LinearAngular6DCommand* pVal);

#define ERR_BASE_LINEARANGULAR6DCOMMAND		1560  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_TIME		1491  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_TIME_MICROSECONDS		1480  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR		1520  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA		1513  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA_ELM		1502  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR		1549  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA		1542  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA_ELM		1531  /**/
flag Base_LinearAngular6DCommand_IsConstraintValid(const Base_LinearAngular6DCommand* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND		1561  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1498  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1527  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1556  /**/
#define Base_LinearAngular6DCommand_REQUIRED_BYTES_FOR_ENCODING       87 
#define Base_LinearAngular6DCommand_REQUIRED_BITS_FOR_ENCODING        692

flag Base_LinearAngular6DCommand_Encode(const Base_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND		1562  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1499  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1528  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1557  /**/
flag Base_LinearAngular6DCommand_Decode(Base_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_BodyState --------------------------------------------*/
typedef struct {
    Base_Time time;
    Base_TransformWithCovariance pose;
    Base_TwistWithCovariance velocity;

} Base_samples_BodyState;

void Base_samples_BodyState_Initialize(Base_samples_BodyState* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE		1920  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_TIME		1702  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_TIME_MICROSECONDS		1691  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE		1811  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION		1731  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA		1724  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA_ELM		1713  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION		1771  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM		1753  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM_ELM		1742  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_RE		1760  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV		1800  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA		1793  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA_ELM		1782  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY		1909  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL		1840  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA		1833  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA_ELM		1822  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT		1869  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA		1862  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA_ELM		1851  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV		1898  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA		1891  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA_ELM		1880  /**/
flag Base_samples_BodyState_IsConstraintValid(const Base_samples_BodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE		1921  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_TIME_2		1709  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_2		1818  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1916  /**/
#define Base_samples_BodyState_REQUIRED_BYTES_FOR_ENCODING       1116 
#define Base_samples_BodyState_REQUIRED_BITS_FOR_ENCODING        8924

flag Base_samples_BodyState_Encode(const Base_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE		1922  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_TIME_2		1710  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_POSE_2		1819  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1917  /**/
flag Base_samples_BodyState_Decode(Base_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_IMUSensors --------------------------------------------*/
typedef struct {
    Base_Time time;
    Wrappers_Vector3d acc;
    Wrappers_Vector3d gyro;
    Wrappers_Vector3d mag;

} Base_samples_IMUSensors;

void Base_samples_IMUSensors_Initialize(Base_samples_IMUSensors* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS		2036  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_TIME		1938  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_TIME_MICROSECONDS		1927  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC		1967  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA		1960  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA_ELM		1949  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO		1996  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA		1989  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA_ELM		1978  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG		2025  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA		2018  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA_ELM		2007  /**/
flag Base_samples_IMUSensors_IsConstraintValid(const Base_samples_IMUSensors* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS		2037  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1945  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1974  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		2003  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_MAG_2		2032  /**/
#define Base_samples_IMUSensors_REQUIRED_BYTES_FOR_ENCODING       126 
#define Base_samples_IMUSensors_REQUIRED_BITS_FOR_ENCODING        1006

flag Base_samples_IMUSensors_Encode(const Base_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS		2038  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1946  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1975  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		2004  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_MAG_2		2033  /**/
flag Base_samples_IMUSensors_Decode(Base_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Motion2D --------------------------------------------*/
typedef struct {
    T_Double translation;
    T_Double rotation;
    Base_Angle heading;
    Base_Time time;

} Base_samples_Motion2D;

void Base_samples_Motion2D_Initialize(Base_samples_Motion2D* pVal);

#define ERR_BASE_SAMPLES_MOTION2D		2109  /**/
#define ERR_BASE_SAMPLES_MOTION2D_TRANSLATION		2043  /**/
#define ERR_BASE_SAMPLES_MOTION2D_ROTATION		2054  /**/
#define ERR_BASE_SAMPLES_MOTION2D_HEADING		2076  /**/
#define ERR_BASE_SAMPLES_MOTION2D_HEADING_RAD		2065  /**/
#define ERR_BASE_SAMPLES_MOTION2D_TIME		2098  /**/
#define ERR_BASE_SAMPLES_MOTION2D_TIME_MICROSECONDS		2087  /**/
flag Base_samples_Motion2D_IsConstraintValid(const Base_samples_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D		2110  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		2050  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_ROTATION_2		2061  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_HEADING_2		2083  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TIME_2		2105  /**/
#define Base_samples_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define Base_samples_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag Base_samples_Motion2D_Encode(const Base_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D		2111  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		2051  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_ROTATION_2		2062  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_HEADING_2		2084  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TIME_2		2106  /**/
flag Base_samples_Motion2D_Decode(Base_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Pressure --------------------------------------------*/
typedef struct {
    T_Float pascal;
    Base_Time time;

} Base_samples_Pressure;

void Base_samples_Pressure_Initialize(Base_samples_Pressure* pVal);

#define ERR_BASE_SAMPLES_PRESSURE		2149  /**/
#define ERR_BASE_SAMPLES_PRESSURE_PASCAL		2116  /**/
#define ERR_BASE_SAMPLES_PRESSURE_TIME		2138  /**/
#define ERR_BASE_SAMPLES_PRESSURE_TIME_MICROSECONDS		2127  /**/
flag Base_samples_Pressure_IsConstraintValid(const Base_samples_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE		2150  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2123  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_TIME_2		2145  /**/
#define Base_samples_Pressure_REQUIRED_BYTES_FOR_ENCODING       21 
#define Base_samples_Pressure_REQUIRED_BITS_FOR_ENCODING        168

flag Base_samples_Pressure_Encode(const Base_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE		2151  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2124  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_TIME_2		2146  /**/
flag Base_samples_Pressure_Decode(Base_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_RigidBodyAcceleration --------------------------------------------*/
typedef struct {
    Base_Time time;
    Wrappers_Vector3d acceleration;
    Wrappers_Matrix3d cov_acceleration;
    Wrappers_Vector3d angular_acceleration;
    Wrappers_Matrix3d cov_angular_acceleration;

} Base_samples_RigidBodyAcceleration;

void Base_samples_RigidBodyAcceleration_Initialize(Base_samples_RigidBodyAcceleration* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION		2294  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME		2167  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_MICROSECONDS		2156  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION		2196  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA		2189  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA_ELM		2178  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION		2225  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA		2218  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA_ELM		2207  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION		2254  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA		2247  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA_ELM		2236  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION		2283  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA		2276  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA_ELM		2265  /**/
flag Base_samples_RigidBodyAcceleration_IsConstraintValid(const Base_samples_RigidBodyAcceleration* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2295  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2174  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2203  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2232  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2261  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2290  /**/
#define Base_samples_RigidBodyAcceleration_REQUIRED_BYTES_FOR_ENCODING       322 
#define Base_samples_RigidBodyAcceleration_REQUIRED_BITS_FOR_ENCODING        2572

flag Base_samples_RigidBodyAcceleration_Encode(const Base_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2296  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2175  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2204  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2233  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2262  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2291  /**/
flag Base_samples_RigidBodyAcceleration_Decode(Base_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Wrench --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d force;
    Wrappers_Vector3d torque;
    Base_Time time;

} Base_samples_Wrench;

void Base_samples_Wrench_Initialize(Base_samples_Wrench* pVal);

#define ERR_BASE_SAMPLES_WRENCH		2381  /**/
#define ERR_BASE_SAMPLES_WRENCH_FORCE		2319  /**/
#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA		2312  /**/
#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA_ELM		2301  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE		2348  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA		2341  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA_ELM		2330  /**/
#define ERR_BASE_SAMPLES_WRENCH_TIME		2370  /**/
#define ERR_BASE_SAMPLES_WRENCH_TIME_MICROSECONDS		2359  /**/
flag Base_samples_Wrench_IsConstraintValid(const Base_samples_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH		2382  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_FORCE_2		2326  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TORQUE_2		2355  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TIME_2		2377  /**/
#define Base_samples_Wrench_REQUIRED_BYTES_FOR_ENCODING       87 
#define Base_samples_Wrench_REQUIRED_BITS_FOR_ENCODING        692

flag Base_samples_Wrench_Encode(const Base_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH		2383  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_FORCE_2		2327  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TORQUE_2		2356  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TIME_2		2378  /**/
flag Base_samples_Wrench_Decode(Base_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Pointcloud --------------------------------------------*/


typedef struct {
    int nCount; 
    
    Wrappers_Vector3d arr[200];
} Base_samples_Pointcloud_points;


typedef struct {
    int nCount; 
    
    Wrappers_Vector4d arr[200];
} Base_samples_Pointcloud_colors;
typedef struct {
    Base_Time time;
    Base_samples_Pointcloud_points points;
    Base_samples_Pointcloud_colors colors;

} Base_samples_Pointcloud;

void Base_samples_Pointcloud_points_Initialize(Base_samples_Pointcloud_points* pVal);
void Base_samples_Pointcloud_colors_Initialize(Base_samples_Pointcloud_colors* pVal);
void Base_samples_Pointcloud_Initialize(Base_samples_Pointcloud* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD		3900  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_TIME		3817  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_TIME_MICROSECONDS		3806  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS		3857  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM		3846  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA		3839  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA_ELM		3828  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS		3893  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM		3882  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA		3875  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA_ELM		3864  /**/
flag Base_samples_Pointcloud_IsConstraintValid(const Base_samples_Pointcloud* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD		3901  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3824  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS		3858  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3853  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS		3894  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3889  /**/
#define Base_samples_Pointcloud_REQUIRED_BYTES_FOR_ENCODING       18310 
#define Base_samples_Pointcloud_REQUIRED_BITS_FOR_ENCODING        146480

flag Base_samples_Pointcloud_Encode(const Base_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD		3902  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3825  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS		3859  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3854  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS		3895  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3890  /**/
flag Base_samples_Pointcloud_Decode(Base_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_SonarBeam --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[200];
} Base_samples_SonarBeam_beam;

typedef struct {
    Base_Time time;
    Base_Angle bearing;
    T_Double sampling_interval;
    T_Float speed_of_sound;
    T_Float beamwidth_horizontal;
    T_Float beamwidth_vertical;
    Base_samples_SonarBeam_beam beam;

} Base_samples_SonarBeam;

void Base_samples_SonarBeam_beam_Initialize(Base_samples_SonarBeam_beam* pVal);
void Base_samples_SonarBeam_Initialize(Base_samples_SonarBeam* pVal);

#define ERR_BASE_SAMPLES_SONARBEAM		4500  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_TIME		4416  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_TIME_MICROSECONDS		4405  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEARING		4438  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEARING_RAD		4427  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL		4449  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND		4460  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL		4471  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL		4482  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAM		4493  /**/
flag Base_samples_SonarBeam_IsConstraintValid(const Base_samples_SonarBeam* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM		4501  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_TIME_2		4423  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4445  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4456  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4467  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4478  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4489  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAM		4494  /**/
#define Base_samples_SonarBeam_REQUIRED_BYTES_FOR_ENCODING       274 
#define Base_samples_SonarBeam_REQUIRED_BITS_FOR_ENCODING        2192

flag Base_samples_SonarBeam_Encode(const Base_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM		4502  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_TIME_2		4424  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4446  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4457  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4468  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4479  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4490  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAM		4495  /**/
flag Base_samples_SonarBeam_Decode(Base_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_commands_LinearAngular6DCommand_m --------------------------------------------*/
typedef struct {
    Base_Time time;
    Wrappers_Vector3d linear;
    Wrappers_Vector3d angular;

} Base_commands_LinearAngular6DCommand_m;

void Base_commands_LinearAngular6DCommand_m_Initialize(Base_commands_LinearAngular6DCommand_m* pVal);

#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6610  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME		6541  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_MICROSECONDS		6530  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR		6570  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA		6563  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA_ELM		6552  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR		6599  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA		6592  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA_ELM		6581  /**/
flag Base_commands_LinearAngular6DCommand_m_IsConstraintValid(const Base_commands_LinearAngular6DCommand_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6611  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6548  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6577  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6606  /**/
#define Base_commands_LinearAngular6DCommand_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define Base_commands_LinearAngular6DCommand_m_REQUIRED_BITS_FOR_ENCODING        692

flag Base_commands_LinearAngular6DCommand_m_Encode(const Base_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6612  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6549  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6578  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6607  /**/
flag Base_commands_LinearAngular6DCommand_m_Decode(Base_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_BodyState_m --------------------------------------------*/
typedef struct {
    Base_Time time;
    Base_TransformWithCovariance_m pose;
    Base_TwistWithCovariance_m velocity;

} Base_samples_BodyState_m;

void Base_samples_BodyState_m_Initialize(Base_samples_BodyState_m* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE_M		6846  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_TIME		6628  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_TIME_MICROSECONDS		6617  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE		6737  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION		6657  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA		6650  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA_ELM		6639  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION		6697  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM		6679  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM_ELM		6668  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_RE		6686  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV		6726  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA		6719  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA_ELM		6708  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY		6835  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL		6766  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA		6759  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA_ELM		6748  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT		6795  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA		6788  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA_ELM		6777  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV		6824  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA		6817  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA_ELM		6806  /**/
flag Base_samples_BodyState_m_IsConstraintValid(const Base_samples_BodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M		6847  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6635  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6744  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6842  /**/
#define Base_samples_BodyState_m_REQUIRED_BYTES_FOR_ENCODING       1116 
#define Base_samples_BodyState_m_REQUIRED_BITS_FOR_ENCODING        8924

flag Base_samples_BodyState_m_Encode(const Base_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M		6848  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6636  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6745  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6843  /**/
flag Base_samples_BodyState_m_Decode(Base_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_IMUSensors_m --------------------------------------------*/
typedef struct {
    Base_Time time;
    Wrappers_Vector3d acc;
    Wrappers_Vector3d gyro;
    Wrappers_Vector3d mag;

} Base_samples_IMUSensors_m;

void Base_samples_IMUSensors_m_Initialize(Base_samples_IMUSensors_m* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS_M		6962  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_TIME		6864  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_TIME_MICROSECONDS		6853  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC		6893  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA		6886  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA_ELM		6875  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO		6922  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA		6915  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA_ELM		6904  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG		6951  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA		6944  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA_ELM		6933  /**/
flag Base_samples_IMUSensors_m_IsConstraintValid(const Base_samples_IMUSensors_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M		6963  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6871  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6900  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6929  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6958  /**/
#define Base_samples_IMUSensors_m_REQUIRED_BYTES_FOR_ENCODING       126 
#define Base_samples_IMUSensors_m_REQUIRED_BITS_FOR_ENCODING        1006

flag Base_samples_IMUSensors_m_Encode(const Base_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M		6964  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6872  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6901  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6930  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6959  /**/
flag Base_samples_IMUSensors_m_Decode(Base_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_RigidBodyAcceleration_m --------------------------------------------*/
typedef struct {
    Base_Time time;
    Wrappers_Vector3d acceleration;
    Wrappers_Matrix3d cov_acceleration;
    Wrappers_Vector3d angular_acceleration;
    Wrappers_Matrix3d cov_angular_acceleration;

} Base_samples_RigidBodyAcceleration_m;

void Base_samples_RigidBodyAcceleration_m_Initialize(Base_samples_RigidBodyAcceleration_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M		7107  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME		6980  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_MICROSECONDS		6969  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION		7009  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA		7002  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA_ELM		6991  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION		7038  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA		7031  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA_ELM		7020  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION		7067  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA		7060  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA_ELM		7049  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION		7096  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA		7089  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA_ELM		7078  /**/
flag Base_samples_RigidBodyAcceleration_m_IsConstraintValid(const Base_samples_RigidBodyAcceleration_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		7108  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6987  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		7016  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		7045  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		7074  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		7103  /**/
#define Base_samples_RigidBodyAcceleration_m_REQUIRED_BYTES_FOR_ENCODING       322 
#define Base_samples_RigidBodyAcceleration_m_REQUIRED_BITS_FOR_ENCODING        2572

flag Base_samples_RigidBodyAcceleration_m_Encode(const Base_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		7109  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6988  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		7017  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		7046  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		7075  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		7104  /**/
flag Base_samples_RigidBodyAcceleration_m_Decode(Base_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Wrench_m --------------------------------------------*/
typedef struct {
    Wrappers_Vector3d force;
    Wrappers_Vector3d torque;
    Base_Time time;

} Base_samples_Wrench_m;

void Base_samples_Wrench_m_Initialize(Base_samples_Wrench_m* pVal);

#define ERR_BASE_SAMPLES_WRENCH_M		7488  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_FORCE		7426  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA		7419  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA_ELM		7408  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE		7455  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA		7448  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA_ELM		7437  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TIME		7477  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TIME_MICROSECONDS		7466  /**/
flag Base_samples_Wrench_m_IsConstraintValid(const Base_samples_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M		7489  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7433  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7462  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TIME_2		7484  /**/
#define Base_samples_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define Base_samples_Wrench_m_REQUIRED_BITS_FOR_ENCODING        692

flag Base_samples_Wrench_m_Encode(const Base_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M		7490  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7434  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7463  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TIME_2		7485  /**/
flag Base_samples_Wrench_m_Decode(Base_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Pointcloud_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    Wrappers_Vector3d arr[200];
} Base_samples_Pointcloud_m_points;


typedef struct {
    int nCount; 
    
    Wrappers_Vector4d arr[200];
} Base_samples_Pointcloud_m_colors;
typedef struct {
    Base_Time time;
    Base_samples_Pointcloud_m_points points;
    Base_samples_Pointcloud_m_colors colors;

} Base_samples_Pointcloud_m;

void Base_samples_Pointcloud_m_points_Initialize(Base_samples_Pointcloud_m_points* pVal);
void Base_samples_Pointcloud_m_colors_Initialize(Base_samples_Pointcloud_m_colors* pVal);
void Base_samples_Pointcloud_m_Initialize(Base_samples_Pointcloud_m* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD_M		7890  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_TIME		7807  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_TIME_MICROSECONDS		7796  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS		7847  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM		7836  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA		7829  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA_ELM		7818  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS		7883  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM		7872  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA		7865  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA_ELM		7854  /**/
flag Base_samples_Pointcloud_m_IsConstraintValid(const Base_samples_Pointcloud_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M		7891  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7814  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7848  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7843  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7884  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7879  /**/
#define Base_samples_Pointcloud_m_REQUIRED_BYTES_FOR_ENCODING       18310 
#define Base_samples_Pointcloud_m_REQUIRED_BITS_FOR_ENCODING        146480

flag Base_samples_Pointcloud_m_Encode(const Base_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M		7892  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7815  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7849  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7844  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7885  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7880  /**/
flag Base_samples_Pointcloud_m_Decode(Base_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_frame_frame_size_t --------------------------------------------*/
typedef struct {
    T_UInt16 width;
    T_UInt16 height;

} Base_samples_frame_frame_size_t;

void Base_samples_frame_frame_size_t_Initialize(Base_samples_frame_frame_size_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2410  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH		2388  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT		2399  /**/
flag Base_samples_frame_frame_size_t_IsConstraintValid(const Base_samples_frame_frame_size_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2411  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2395  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2406  /**/
#define Base_samples_frame_frame_size_t_REQUIRED_BYTES_FOR_ENCODING       4 
#define Base_samples_frame_frame_size_t_REQUIRED_BITS_FOR_ENCODING        32

flag Base_samples_frame_frame_size_t_Encode(const Base_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2412  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2396  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2407  /**/
flag Base_samples_frame_frame_size_t_Decode(Base_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_DistanceImage --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Float arr[200];
} Base_samples_DistanceImage_data;
typedef struct {
    Base_Time time;
    T_UInt16 width;
    T_UInt16 height;
    T_Float scale_x;
    T_Float scale_y;
    T_Float center_x;
    T_Float center_y;
    Base_samples_DistanceImage_data data;

} Base_samples_DistanceImage;

void Base_samples_DistanceImage_data_Initialize(Base_samples_DistanceImage_data* pVal);
void Base_samples_DistanceImage_Initialize(Base_samples_DistanceImage* pVal);

#define ERR_BASE_SAMPLES_DISTANCEIMAGE		3555  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_TIME		3460  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_TIME_MICROSECONDS		3449  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_WIDTH		3471  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT		3482  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X		3493  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y		3504  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X		3515  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y		3526  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA		3548  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM		3537  /**/
flag Base_samples_DistanceImage_IsConstraintValid(const Base_samples_DistanceImage* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE		3556  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3467  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3478  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3489  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3500  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3511  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3522  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3533  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3549  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3544  /**/
#define Base_samples_DistanceImage_REQUIRED_BYTES_FOR_ENCODING       2665 
#define Base_samples_DistanceImage_REQUIRED_BITS_FOR_ENCODING        21320

flag Base_samples_DistanceImage_Encode(const Base_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE		3557  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3468  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3479  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3490  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3501  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3512  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3523  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3534  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3550  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3545  /**/
flag Base_samples_DistanceImage_Decode(Base_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointLimits --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_JointLimits_names;


typedef struct {
    int nCount; 
    
    Base_JointLimitRange arr[200];
} Base_JointLimits_elements;
typedef struct {
    Base_JointLimits_names names;
    Base_JointLimits_elements elements;

} Base_JointLimits;

void Base_JointLimits_names_Initialize(Base_JointLimits_names* pVal);
void Base_JointLimits_elements_Initialize(Base_JointLimits_elements* pVal);
void Base_JointLimits_Initialize(Base_JointLimits* pVal);

#define ERR_BASE_JOINTLIMITS		2585  /**/
#define ERR_BASE_JOINTLIMITS_NAMES		2428  /**/
#define ERR_BASE_JOINTLIMITS_NAMES_ELM		2417  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS		2578  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM		2567  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN		2490  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_POSITION		2435  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_SPEED		2446  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_EFFORT		2457  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_RAW		2468  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_ACCELERATION		2479  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX		2556  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_POSITION		2501  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_SPEED		2512  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_EFFORT		2523  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_RAW		2534  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_ACCELERATION		2545  /**/
flag Base_JointLimits_IsConstraintValid(const Base_JointLimits* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITS		2586  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES		2429  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES_ELM_2		2424  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS		2579  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2574  /**/
#define Base_JointLimits_REQUIRED_BYTES_FOR_ENCODING       34152 
#define Base_JointLimits_REQUIRED_BITS_FOR_ENCODING        273216

flag Base_JointLimits_Encode(const Base_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITS		2587  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES		2430  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES_ELM_2		2425  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS		2580  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2575  /**/
flag Base_JointLimits_Decode(Base_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointTransform --------------------------------------------*/
typedef struct {
    T_String sourceframe;
    T_String targetframe;
    Wrappers_Vector3d rotationaxis;

} Base_JointTransform;

void Base_JointTransform_Initialize(Base_JointTransform* pVal);

#define ERR_BASE_JOINTTRANSFORM		2643  /**/
#define ERR_BASE_JOINTTRANSFORM_SOURCEFRAME		2592  /**/
#define ERR_BASE_JOINTTRANSFORM_TARGETFRAME		2603  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS		2632  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA		2625  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA_ELM		2614  /**/
flag Base_JointTransform_IsConstraintValid(const Base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM		2644  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2599  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2610  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2639  /**/
#define Base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       121 
#define Base_JointTransform_REQUIRED_BITS_FOR_ENCODING        966

flag Base_JointTransform_Encode(const Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM		2645  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2600  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2611  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2640  /**/
flag Base_JointTransform_Decode(Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointTransformVector --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_JointTransformVector_names;


typedef struct {
    int nCount; 
    
    Base_JointTransform arr[200];
} Base_JointTransformVector_elements;
typedef struct {
    Base_JointTransformVector_names names;
    Base_JointTransformVector_elements elements;

} Base_JointTransformVector;

void Base_JointTransformVector_names_Initialize(Base_JointTransformVector_names* pVal);
void Base_JointTransformVector_elements_Initialize(Base_JointTransformVector_elements* pVal);
void Base_JointTransformVector_Initialize(Base_JointTransformVector* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR		4965  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES		4889  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM		4878  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4958  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM		4947  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_SOURCEFRAME		4896  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_TARGETFRAME		4907  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS		4936  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA		4929  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4918  /**/
flag Base_JointTransformVector_IsConstraintValid(const Base_JointTransformVector* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR		4966  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4890  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4885  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4959  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4954  /**/
#define Base_JointTransformVector_REQUIRED_BYTES_FOR_ENCODING       32302 
#define Base_JointTransformVector_REQUIRED_BITS_FOR_ENCODING        258416

flag Base_JointTransformVector_Encode(const Base_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR		4967  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4891  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4886  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4960  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4955  /**/
flag Base_JointTransformVector_Decode(Base_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_NamedVector_Base_JointTransform --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_NamedVector_Base_JointTransform_names;


typedef struct {
    int nCount; 
    
    Base_JointTransform arr[200];
} Base_NamedVector_Base_JointTransform_elements;
typedef struct {
    Base_NamedVector_Base_JointTransform_names names;
    Base_NamedVector_Base_JointTransform_elements elements;

} Base_NamedVector_Base_JointTransform;

void Base_NamedVector_Base_JointTransform_names_Initialize(Base_NamedVector_Base_JointTransform_names* pVal);
void Base_NamedVector_Base_JointTransform_elements_Initialize(Base_NamedVector_Base_JointTransform_elements* pVal);
void Base_NamedVector_Base_JointTransform_Initialize(Base_NamedVector_Base_JointTransform* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		5059  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4983  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM		4972  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		5052  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM		5041  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_SOURCEFRAME		4990  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_TARGETFRAME		5001  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS		5030  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA		5023  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		5012  /**/
flag Base_NamedVector_Base_JointTransform_IsConstraintValid(const Base_NamedVector_Base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		5060  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4984  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4979  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		5053  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		5048  /**/
#define Base_NamedVector_Base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       32302 
#define Base_NamedVector_Base_JointTransform_REQUIRED_BITS_FOR_ENCODING        258416

flag Base_NamedVector_Base_JointTransform_Encode(const Base_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		5061  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4985  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4980  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		5054  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		5049  /**/
flag Base_NamedVector_Base_JointTransform_Decode(Base_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointsTrajectory --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_JointsTrajectory_names;


typedef struct {
    int nCount; 
    
    Base_JointTrajectory arr[200];
} Base_JointsTrajectory_elements;


typedef struct {
    int nCount; 
    
    Base_Time arr[200];
} Base_JointsTrajectory_times_val;
typedef struct {
    Base_JointsTrajectory_names names;
    Base_JointsTrajectory_elements elements;
    Base_JointsTrajectory_times_val times_val;

} Base_JointsTrajectory;

void Base_JointsTrajectory_names_Initialize(Base_JointsTrajectory_names* pVal);
void Base_JointsTrajectory_elements_Initialize(Base_JointsTrajectory_elements* pVal);
void Base_JointsTrajectory_times_val_Initialize(Base_JointsTrajectory_times_val* pVal);
void Base_JointsTrajectory_Initialize(Base_JointsTrajectory* pVal);

#define ERR_BASE_JOINTSTRAJECTORY		2781  /**/
#define ERR_BASE_JOINTSTRAJECTORY_NAMES		2661  /**/
#define ERR_BASE_JOINTSTRAJECTORY_NAMES_ELM		2650  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS		2745  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM		2734  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM		2723  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		2668  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		2679  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		2690  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_RAW		2701  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		2712  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL		2774  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM		2763  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_MICROSECONDS		2752  /**/
flag Base_JointsTrajectory_IsConstraintValid(const Base_JointsTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY		2782  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES		2662  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2657  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2746  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2741  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2775  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2770  /**/
#define Base_JointsTrajectory_REQUIRED_BYTES_FOR_ENCODING       2609953 
#define Base_JointsTrajectory_REQUIRED_BITS_FOR_ENCODING        20879624

flag Base_JointsTrajectory_Encode(const Base_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY		2783  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES		2663  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2658  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2747  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2742  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2776  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2771  /**/
flag Base_JointsTrajectory_Decode(Base_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_NamedVector_Base_JointLimitRange --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_NamedVector_Base_JointLimitRange_names;


typedef struct {
    int nCount; 
    
    Base_JointLimitRange arr[200];
} Base_NamedVector_Base_JointLimitRange_elements;
typedef struct {
    Base_NamedVector_Base_JointLimitRange_names names;
    Base_NamedVector_Base_JointLimitRange_elements elements;

} Base_NamedVector_Base_JointLimitRange;

void Base_NamedVector_Base_JointLimitRange_names_Initialize(Base_NamedVector_Base_JointLimitRange_names* pVal);
void Base_NamedVector_Base_JointLimitRange_elements_Initialize(Base_NamedVector_Base_JointLimitRange_elements* pVal);
void Base_NamedVector_Base_JointLimitRange_Initialize(Base_NamedVector_Base_JointLimitRange* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2956  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2799  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM		2788  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2949  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM		2938  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN		2861  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_POSITION		2806  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_SPEED		2817  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_EFFORT		2828  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_RAW		2839  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_ACCELERATION		2850  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX		2927  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_POSITION		2872  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_SPEED		2883  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_EFFORT		2894  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_RAW		2905  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_ACCELERATION		2916  /**/
flag Base_NamedVector_Base_JointLimitRange_IsConstraintValid(const Base_NamedVector_Base_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2957  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2800  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2795  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2950  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2945  /**/
#define Base_NamedVector_Base_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       34152 
#define Base_NamedVector_Base_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        273216

flag Base_NamedVector_Base_JointLimitRange_Encode(const Base_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2958  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2801  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2796  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2951  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2946  /**/
flag Base_NamedVector_Base_JointLimitRange_Decode(Base_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_NamedVector_Base_JointState --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_NamedVector_Base_JointState_names;
typedef struct {
    Base_NamedVector_Base_JointState_names names;
    Base_JointTrajectory elements;

} Base_NamedVector_Base_JointState;

void Base_NamedVector_Base_JointState_names_Initialize(Base_NamedVector_Base_JointState_names* pVal);
void Base_NamedVector_Base_JointState_Initialize(Base_NamedVector_Base_JointState* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE		3058  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2974  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM		2963  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS		3047  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM		3036  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_POSITION		2981  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_SPEED		2992  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_EFFORT		3003  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_RAW		3014  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_ACCELERATION		3025  /**/
flag Base_NamedVector_Base_JointState_IsConstraintValid(const Base_NamedVector_Base_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		3059  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2975  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2970  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		3054  /**/
#define Base_NamedVector_Base_JointState_REQUIRED_BYTES_FOR_ENCODING       21152 
#define Base_NamedVector_Base_JointState_REQUIRED_BITS_FOR_ENCODING        169216

flag Base_NamedVector_Base_JointState_Encode(const Base_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		3060  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2976  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2971  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		3055  /**/
flag Base_NamedVector_Base_JointState_Decode(Base_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_NamedVector_Base_Wrench --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_NamedVector_Base_Wrench_names;


typedef struct {
    int nCount; 
    
    Base_Wrench arr[200];
} Base_NamedVector_Base_Wrench_elements;
typedef struct {
    Base_NamedVector_Base_Wrench_names names;
    Base_NamedVector_Base_Wrench_elements elements;

} Base_NamedVector_Base_Wrench;

void Base_NamedVector_Base_Wrench_names_Initialize(Base_NamedVector_Base_Wrench_names* pVal);
void Base_NamedVector_Base_Wrench_elements_Initialize(Base_NamedVector_Base_Wrench_elements* pVal);
void Base_NamedVector_Base_Wrench_Initialize(Base_NamedVector_Base_Wrench* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH		3159  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		3076  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM		3065  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3152  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM		3141  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE		3101  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA		3094  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA_ELM		3083  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE		3130  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA		3123  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA_ELM		3112  /**/
flag Base_NamedVector_Base_Wrench_IsConstraintValid(const Base_NamedVector_Base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH		3160  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		3077  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		3072  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3153  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3148  /**/
#define Base_NamedVector_Base_Wrench_REQUIRED_BYTES_FOR_ENCODING       23852 
#define Base_NamedVector_Base_Wrench_REQUIRED_BITS_FOR_ENCODING        190816

flag Base_NamedVector_Base_Wrench_Encode(const Base_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH		3161  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		3078  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		3073  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3154  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3149  /**/
flag Base_NamedVector_Base_Wrench_Decode(Base_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_NamedVector_Base_JointTrajectory --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_NamedVector_Base_JointTrajectory_names;


typedef struct {
    int nCount; 
    
    Base_JointTrajectory arr[200];
} Base_NamedVector_Base_JointTrajectory_elements;
typedef struct {
    Base_NamedVector_Base_JointTrajectory_names names;
    Base_NamedVector_Base_JointTrajectory_elements elements;

} Base_NamedVector_Base_JointTrajectory;

void Base_NamedVector_Base_JointTrajectory_names_Initialize(Base_NamedVector_Base_JointTrajectory_names* pVal);
void Base_NamedVector_Base_JointTrajectory_elements_Initialize(Base_NamedVector_Base_JointTrajectory_elements* pVal);
void Base_NamedVector_Base_JointTrajectory_Initialize(Base_NamedVector_Base_JointTrajectory* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3268  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3177  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM		3166  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3261  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM		3250  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM		3239  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		3184  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		3195  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		3206  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_RAW		3217  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		3228  /**/
flag Base_NamedVector_Base_JointTrajectory_IsConstraintValid(const Base_NamedVector_Base_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3269  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3178  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3173  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3262  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3257  /**/
#define Base_NamedVector_Base_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       2608352 
#define Base_NamedVector_Base_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        20866816

flag Base_NamedVector_Base_JointTrajectory_Encode(const Base_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3270  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3179  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3174  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3263  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3258  /**/
flag Base_NamedVector_Base_JointTrajectory_Decode(Base_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_commands_Joints --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_commands_Joints_names;
typedef struct {
    Base_commands_Joints_names names;
    Base_JointTrajectory elements;
    Base_Time time;

} Base_commands_Joints;

void Base_commands_Joints_names_Initialize(Base_commands_Joints_names* pVal);
void Base_commands_Joints_Initialize(Base_commands_Joints* pVal);

#define ERR_BASE_COMMANDS_JOINTS		3679  /**/
#define ERR_BASE_COMMANDS_JOINTS_NAMES		3573  /**/
#define ERR_BASE_COMMANDS_JOINTS_NAMES_ELM		3562  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS		3646  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM		3635  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_POSITION		3580  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_SPEED		3591  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_EFFORT		3602  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_RAW		3613  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_ACCELERATION		3624  /**/
#define ERR_BASE_COMMANDS_JOINTS_TIME		3668  /**/
#define ERR_BASE_COMMANDS_JOINTS_TIME_MICROSECONDS		3657  /**/
flag Base_commands_Joints_IsConstraintValid(const Base_commands_Joints* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS		3680  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES		3574  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3569  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3653  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_TIME_2		3675  /**/
#define Base_commands_Joints_REQUIRED_BYTES_FOR_ENCODING       21160 
#define Base_commands_Joints_REQUIRED_BITS_FOR_ENCODING        169280

flag Base_commands_Joints_Encode(const Base_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS		3681  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES		3575  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3570  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3654  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_TIME_2		3676  /**/
flag Base_commands_Joints_Decode(Base_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_RigidBodyState --------------------------------------------*/
typedef struct {
    Base_Time time;
    T_String sourceframe;
    T_String targetframe;
    Wrappers_Vector3d position;
    Wrappers_Matrix3d cov_position;
    Wrappers_Quaterniond orientation;
    Wrappers_Matrix3d cov_orientation;
    Wrappers_Vector3d velocity;
    Wrappers_Matrix3d cov_velocity;
    Wrappers_Vector3d angular_velocity;
    Wrappers_Matrix3d cov_angular_velocity;

} Base_samples_RigidBodyState;

void Base_samples_RigidBodyState_Initialize(Base_samples_RigidBodyState* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE		4194  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TIME		3918  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TIME_MICROSECONDS		3907  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME		3929  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME		3940  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION		3969  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA		3962  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA_ELM		3951  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION		3998  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA		3991  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA_ELM		3980  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION		4038  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM		4020  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM_ELM		4009  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_RE		4027  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION		4067  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA		4060  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA_ELM		4049  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY		4096  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA		4089  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA_ELM		4078  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY		4125  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA		4118  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA_ELM		4107  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY		4154  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA		4147  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA_ELM		4136  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY		4183  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA		4176  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA_ELM		4165  /**/
flag Base_samples_RigidBodyState_IsConstraintValid(const Base_samples_RigidBodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE		4195  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3925  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3936  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3947  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3976  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		4005  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		4045  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		4074  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		4103  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4132  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4161  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4190  /**/
#define Base_samples_RigidBodyState_REQUIRED_BYTES_FOR_ENCODING       730 
#define Base_samples_RigidBodyState_REQUIRED_BITS_FOR_ENCODING        5836

flag Base_samples_RigidBodyState_Encode(const Base_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE		4196  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3926  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3937  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3948  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3977  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		4006  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		4046  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		4075  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		4104  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4133  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4162  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4191  /**/
flag Base_samples_RigidBodyState_Decode(Base_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Wrenches --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_samples_Wrenches_names;


typedef struct {
    int nCount; 
    
    Base_Wrench arr[200];
} Base_samples_Wrenches_elements;
typedef struct {
    Base_samples_Wrenches_names names;
    Base_samples_Wrenches_elements elements;
    Base_Time time;

} Base_samples_Wrenches;

void Base_samples_Wrenches_names_Initialize(Base_samples_Wrenches_names* pVal);
void Base_samples_Wrenches_elements_Initialize(Base_samples_Wrenches_elements* pVal);
void Base_samples_Wrenches_Initialize(Base_samples_Wrenches* pVal);

#define ERR_BASE_SAMPLES_WRENCHES		4842  /**/
#define ERR_BASE_SAMPLES_WRENCHES_NAMES		4737  /**/
#define ERR_BASE_SAMPLES_WRENCHES_NAMES_ELM		4726  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS		4813  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM		4802  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE		4762  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA		4755  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA_ELM		4744  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE		4791  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA		4784  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA_ELM		4773  /**/
#define ERR_BASE_SAMPLES_WRENCHES_TIME		4831  /**/
#define ERR_BASE_SAMPLES_WRENCHES_TIME_MICROSECONDS		4820  /**/
flag Base_samples_Wrenches_IsConstraintValid(const Base_samples_Wrenches* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES		4843  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES		4738  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4733  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4814  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4809  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_TIME_2		4838  /**/
#define Base_samples_Wrenches_REQUIRED_BYTES_FOR_ENCODING       23860 
#define Base_samples_Wrenches_REQUIRED_BITS_FOR_ENCODING        190880

flag Base_samples_Wrenches_Encode(const Base_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES		4844  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES		4739  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4734  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4815  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4810  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_TIME_2		4839  /**/
flag Base_samples_Wrenches_Decode(Base_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_frame_frame_attrib_t --------------------------------------------*/
typedef struct {
    T_String data;
    T_String name_val;

} Base_samples_frame_frame_attrib_t;

void Base_samples_frame_frame_attrib_t_Initialize(Base_samples_frame_frame_attrib_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4871  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA		4849  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL		4860  /**/
flag Base_samples_frame_frame_attrib_t_IsConstraintValid(const Base_samples_frame_frame_attrib_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4872  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4856  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4867  /**/
#define Base_samples_frame_frame_attrib_t_REQUIRED_BYTES_FOR_ENCODING       82 
#define Base_samples_frame_frame_attrib_t_REQUIRED_BITS_FOR_ENCODING        652

flag Base_samples_frame_frame_attrib_t_Encode(const Base_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4873  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4857  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4868  /**/
flag Base_samples_frame_frame_attrib_t_Decode(Base_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointTransform_m --------------------------------------------*/
typedef struct {
    T_String sourceframe;
    T_String targetframe;
    Wrappers_Vector3d rotationaxis;

} Base_JointTransform_m;

void Base_JointTransform_m_Initialize(Base_JointTransform_m* pVal);

#define ERR_BASE_JOINTTRANSFORM_M		6067  /**/
#define ERR_BASE_JOINTTRANSFORM_M_SOURCEFRAME		6016  /**/
#define ERR_BASE_JOINTTRANSFORM_M_TARGETFRAME		6027  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS		6056  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA		6049  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA_ELM		6038  /**/
flag Base_JointTransform_m_IsConstraintValid(const Base_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M		6068  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		6023  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		6034  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		6063  /**/
#define Base_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       121 
#define Base_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        966

flag Base_JointTransform_m_Encode(const Base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M		6069  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		6024  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		6035  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		6064  /**/
flag Base_JointTransform_m_Decode(Base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    Base_JointTransform_m arr[200];
} Std_orogen_typekits_mtype_std_vector_base_JointTransform;

void Std_orogen_typekits_mtype_std_vector_base_JointTransform_Initialize(Std_orogen_typekits_mtype_std_vector_base_JointTransform* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		221  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM		210  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_SOURCEFRAME		159  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_TARGETFRAME		170  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS		199  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA		192  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA_ELM		181  /**/
flag Std_orogen_typekits_mtype_std_vector_base_JointTransform_IsConstraintValid(const Std_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		222  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		217  /**/
#define Std_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       24151 
#define Std_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BITS_FOR_ENCODING        193208

flag Std_orogen_typekits_mtype_std_vector_base_JointTransform_Encode(const Std_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		223  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		218  /**/
flag Std_orogen_typekits_mtype_std_vector_base_JointTransform_Decode(Std_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_JointTransformVector_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_JointTransformVector_m_names;
typedef struct {
    Base_JointTransformVector_m_names names;
    Std_orogen_typekits_mtype_std_vector_base_JointTransform elements;

} Base_JointTransformVector_m;

void Base_JointTransformVector_m_names_Initialize(Base_JointTransformVector_m_names* pVal);
void Base_JointTransformVector_m_Initialize(Base_JointTransformVector_m* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR_M		7586  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7506  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM		7495  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS		7575  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM		7564  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_SOURCEFRAME		7513  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_TARGETFRAME		7524  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS		7553  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7546  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7535  /**/
flag Base_JointTransformVector_m_IsConstraintValid(const Base_JointTransformVector_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M		7587  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7507  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7502  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7582  /**/
#define Base_JointTransformVector_m_REQUIRED_BYTES_FOR_ENCODING       32302 
#define Base_JointTransformVector_m_REQUIRED_BITS_FOR_ENCODING        258416

flag Base_JointTransformVector_m_Encode(const Base_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M		7588  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7508  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7503  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7583  /**/
flag Base_JointTransformVector_m_Decode(Base_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_NamedVector_base_JointTransform_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_NamedVector_base_JointTransform_m_names;
typedef struct {
    Base_NamedVector_base_JointTransform_m_names names;
    Std_orogen_typekits_mtype_std_vector_base_JointTransform elements;

} Base_NamedVector_base_JointTransform_m;

void Base_NamedVector_base_JointTransform_m_names_Initialize(Base_NamedVector_base_JointTransform_m_names* pVal);
void Base_NamedVector_base_JointTransform_m_Initialize(Base_NamedVector_base_JointTransform_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7684  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7604  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM		7593  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS		7673  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM		7662  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_SOURCEFRAME		7611  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_TARGETFRAME		7622  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS		7651  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7644  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7633  /**/
flag Base_NamedVector_base_JointTransform_m_IsConstraintValid(const Base_NamedVector_base_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7685  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7605  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7600  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7680  /**/
#define Base_NamedVector_base_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       32302 
#define Base_NamedVector_base_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        258416

flag Base_NamedVector_base_JointTransform_m_Encode(const Base_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7686  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7606  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7601  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7681  /**/
flag Base_NamedVector_base_JointTransform_m_Decode(Base_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_RigidBodyState_m --------------------------------------------*/
typedef struct {
    Base_Time time;
    T_String sourceframe;
    T_String targetframe;
    Wrappers_Vector3d position;
    Wrappers_Matrix3d cov_position;
    Wrappers_Quaterniond orientation;
    Wrappers_Matrix3d cov_orientation;
    Wrappers_Vector3d velocity;
    Wrappers_Matrix3d cov_velocity;
    Wrappers_Vector3d angular_velocity;
    Wrappers_Matrix3d cov_angular_velocity;

} Base_samples_RigidBodyState_m;

void Base_samples_RigidBodyState_m_Initialize(Base_samples_RigidBodyState_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M		7401  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME		7125  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_MICROSECONDS		7114  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME		7136  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME		7147  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION		7176  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA		7169  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA_ELM		7158  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION		7205  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA		7198  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA_ELM		7187  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION		7245  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM		7227  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM_ELM		7216  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_RE		7234  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION		7274  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA		7267  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA_ELM		7256  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY		7303  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA		7296  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA_ELM		7285  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY		7332  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA		7325  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA_ELM		7314  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY		7361  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA		7354  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA_ELM		7343  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY		7390  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA		7383  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA_ELM		7372  /**/
flag Base_samples_RigidBodyState_m_IsConstraintValid(const Base_samples_RigidBodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7402  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		7132  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		7143  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		7154  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		7183  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		7212  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7252  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7281  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7310  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7339  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7368  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7397  /**/
#define Base_samples_RigidBodyState_m_REQUIRED_BYTES_FOR_ENCODING       730 
#define Base_samples_RigidBodyState_m_REQUIRED_BITS_FOR_ENCODING        5836

flag Base_samples_RigidBodyState_m_Encode(const Base_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7403  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		7133  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		7144  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		7155  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		7184  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		7213  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7253  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7282  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7311  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7340  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7369  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7398  /**/
flag Base_samples_RigidBodyState_m_Decode(Base_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_NamedVector_base_Wrench_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_NamedVector_base_Wrench_m_names;
typedef struct {
    Base_NamedVector_base_Wrench_m_names names;
    Std_orogen_typekits_mtype_std_vector_base_Wrench elements;

} Base_NamedVector_base_Wrench_m;

void Base_NamedVector_base_Wrench_m_names_Initialize(Base_NamedVector_base_Wrench_m_names* pVal);
void Base_NamedVector_base_Wrench_m_Initialize(Base_NamedVector_base_Wrench_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M		7789  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7702  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM		7691  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS		7778  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM		7767  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE		7727  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA		7720  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA_ELM		7709  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE		7756  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA		7749  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7738  /**/
flag Base_NamedVector_base_Wrench_m_IsConstraintValid(const Base_NamedVector_base_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7790  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7703  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7698  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7785  /**/
#define Base_NamedVector_base_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       23852 
#define Base_NamedVector_base_Wrench_m_REQUIRED_BITS_FOR_ENCODING        190816

flag Base_NamedVector_base_Wrench_m_Encode(const Base_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7791  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7704  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7699  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7786  /**/
flag Base_NamedVector_base_Wrench_m_Decode(Base_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Wrenches_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_String arr[200];
} Base_samples_Wrenches_m_names;
typedef struct {
    Base_samples_Wrenches_m_names names;
    Std_orogen_typekits_mtype_std_vector_base_Wrench elements;
    Base_Time time;

} Base_samples_Wrenches_m;

void Base_samples_Wrenches_m_names_Initialize(Base_samples_Wrenches_m_names* pVal);
void Base_samples_Wrenches_m_Initialize(Base_samples_Wrenches_m* pVal);

#define ERR_BASE_SAMPLES_WRENCHES_M		8017  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES		7908  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES_ELM		7897  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS		7984  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM		7973  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE		7933  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA		7926  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA_ELM		7915  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE		7962  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA		7955  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7944  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_TIME		8006  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_TIME_MICROSECONDS		7995  /**/
flag Base_samples_Wrenches_m_IsConstraintValid(const Base_samples_Wrenches_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M		8018  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES		7909  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7904  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7991  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_TIME_2		8013  /**/
#define Base_samples_Wrenches_m_REQUIRED_BYTES_FOR_ENCODING       23860 
#define Base_samples_Wrenches_m_REQUIRED_BITS_FOR_ENCODING        190880

flag Base_samples_Wrenches_m_Encode(const Base_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M		8019  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES		7910  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7905  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7992  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_TIME_2		8014  /**/
flag Base_samples_Wrenches_m_Decode(Base_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_LaserScan --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_UInt32 arr[200];
} Base_samples_LaserScan_ranges;


typedef struct {
    int nCount; 
    
    T_Float arr[200];
} Base_samples_LaserScan_remission;
typedef struct {
    Base_Time time;
    T_Double start_angle;
    T_Double angular_resolution;
    T_Double speed;
    Base_samples_LaserScan_ranges ranges;
    T_UInt32 minrange;
    T_UInt32 maxrange;
    Base_samples_LaserScan_remission remission;

} Base_samples_LaserScan;

void Base_samples_LaserScan_ranges_Initialize(Base_samples_LaserScan_ranges* pVal);
void Base_samples_LaserScan_remission_Initialize(Base_samples_LaserScan_remission* pVal);
void Base_samples_LaserScan_Initialize(Base_samples_LaserScan* pVal);

#define ERR_BASE_SAMPLES_LASERSCAN		3799  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_TIME		3697  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_TIME_MICROSECONDS		3686  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_START_ANGLE		3708  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION		3719  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_SPEED		3730  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES		3752  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES_ELM		3741  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MINRANGE		3759  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MAXRANGE		3770  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION		3792  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION_ELM		3781  /**/
flag Base_samples_LaserScan_IsConstraintValid(const Base_samples_LaserScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN		3800  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_TIME_2		3704  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3715  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3726  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3737  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES		3753  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3748  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3766  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3777  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION		3793  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3788  /**/
#define Base_samples_LaserScan_REQUIRED_BYTES_FOR_ENCODING       3457 
#define Base_samples_LaserScan_REQUIRED_BITS_FOR_ENCODING        27656

flag Base_samples_LaserScan_Encode(const Base_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN		3801  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_TIME_2		3705  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3716  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3727  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3738  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES		3754  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3749  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3767  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3778  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION		3794  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3789  /**/
flag Base_samples_LaserScan_Decode(Base_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_Sonar --------------------------------------------*/


typedef struct {
    int nCount; 
    
    Base_Time arr[200];
} Base_samples_Sonar_timestamps;


typedef struct {
    int nCount; 
    
    Base_Angle arr[200];
} Base_samples_Sonar_bearings;


typedef struct {
    int nCount; 
    
    T_Float arr[200];
} Base_samples_Sonar_bins;
typedef struct {
    Base_Time time;
    Base_samples_Sonar_timestamps timestamps;
    Base_Time bin_duration;
    Base_Angle beam_width;
    Base_Angle beam_height;
    Base_samples_Sonar_bearings bearings;
    T_Float speed_of_sound;
    T_UInt32 bin_count;
    T_UInt32 beam_count;
    Base_samples_Sonar_bins bins;

} Base_samples_Sonar;

void Base_samples_Sonar_timestamps_Initialize(Base_samples_Sonar_timestamps* pVal);
void Base_samples_Sonar_bearings_Initialize(Base_samples_Sonar_bearings* pVal);
void Base_samples_Sonar_bins_Initialize(Base_samples_Sonar_bins* pVal);
void Base_samples_Sonar_Initialize(Base_samples_Sonar* pVal);

#define ERR_BASE_SAMPLES_SONAR		4398  /**/
#define ERR_BASE_SAMPLES_SONAR_TIME		4212  /**/
#define ERR_BASE_SAMPLES_SONAR_TIME_MICROSECONDS		4201  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS		4245  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM		4234  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_MICROSECONDS		4223  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_DURATION		4263  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_DURATION_MICROSECONDS		4252  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_WIDTH		4285  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_WIDTH_RAD		4274  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_HEIGHT		4307  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_HEIGHT_RAD		4296  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS		4340  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS_ELM		4329  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS_ELM_RAD		4318  /**/
#define ERR_BASE_SAMPLES_SONAR_SPEED_OF_SOUND		4347  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_COUNT		4358  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_COUNT		4369  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS		4391  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS_ELM		4380  /**/
flag Base_samples_Sonar_IsConstraintValid(const Base_samples_Sonar* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR		4399  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIME_2		4219  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4246  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4241  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4270  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4292  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4314  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS		4341  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4336  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4354  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4365  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4376  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS		4392  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4387  /**/
#define Base_samples_Sonar_REQUIRED_BYTES_FOR_ENCODING       6866 
#define Base_samples_Sonar_REQUIRED_BITS_FOR_ENCODING        54928

flag Base_samples_Sonar_Encode(const Base_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR		4400  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIME_2		4220  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4247  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4242  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4271  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4293  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4315  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS		4342  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4337  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4355  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4366  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4377  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS		4393  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4388  /**/
flag Base_samples_Sonar_Decode(Base_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_SonarScan --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[200];
} Base_samples_SonarScan_data;



typedef struct {
    int nCount; 
    
    Base_Time arr[200];
} Base_samples_SonarScan_time_beams;
typedef struct {
    Base_Time time;
    Base_samples_SonarScan_data data;
    Base_samples_SonarScan_time_beams time_beams;
    T_UInt16 number_of_beams;
    T_UInt16 number_of_bins;
    Base_Angle start_bearing;
    Base_Angle angular_resolution;
    T_Double sampling_interval;
    T_Float speed_of_sound;
    Base_Angle beamwidth_horizontal;
    Base_Angle beamwidth_vertical;
    T_Boolean memory_layout_column;
    T_Boolean polar_coordinates;

} Base_samples_SonarScan;

void Base_samples_SonarScan_data_Initialize(Base_samples_SonarScan_data* pVal);
void Base_samples_SonarScan_time_beams_Initialize(Base_samples_SonarScan_time_beams* pVal);
void Base_samples_SonarScan_Initialize(Base_samples_SonarScan* pVal);

#define ERR_BASE_SAMPLES_SONARSCAN		4719  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME		4518  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_MICROSECONDS		4507  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_DATA		4529  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4558  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM		4547  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_MICROSECONDS		4536  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS		4565  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS		4576  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_START_BEARING		4598  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_START_BEARING_RAD		4587  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION		4620  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_RAD		4609  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL		4631  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND		4642  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL		4664  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_RAD		4653  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL		4686  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_RAD		4675  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN		4697  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES		4708  /**/
flag Base_samples_SonarScan_IsConstraintValid(const Base_samples_SonarScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN		4720  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_2		4525  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_DATA		4530  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4559  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4554  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4572  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4583  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4605  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4627  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4638  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4649  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4671  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4693  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4704  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4715  /**/
#define Base_samples_SonarScan_REQUIRED_BYTES_FOR_ENCODING       1893 
#define Base_samples_SonarScan_REQUIRED_BITS_FOR_ENCODING        15138

flag Base_samples_SonarScan_Encode(const Base_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN		4721  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_2		4526  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_DATA		4531  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4560  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4555  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4573  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4584  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4606  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4628  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4639  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4650  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4672  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4694  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4705  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4716  /**/
flag Base_samples_SonarScan_Decode(Base_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_MatrixXd --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[200];
} Wrappers_MatrixXd_data;
typedef struct {
    T_Int32 rows;
    T_Int32 cols;
    Wrappers_MatrixXd_data data;

} Wrappers_MatrixXd;

void Wrappers_MatrixXd_data_Initialize(Wrappers_MatrixXd_data* pVal);
void Wrappers_MatrixXd_Initialize(Wrappers_MatrixXd* pVal);

#define ERR_WRAPPERS_MATRIXXD		5948  /**/
#define ERR_WRAPPERS_MATRIXXD_ROWS		5908  /**/
#define ERR_WRAPPERS_MATRIXXD_COLS		5919  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA		5941  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA_ELM		5930  /**/
flag Wrappers_MatrixXd_IsConstraintValid(const Wrappers_MatrixXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD		5949  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_ROWS_2		5915  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_COLS_2		5926  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA		5942  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5937  /**/
#define Wrappers_MatrixXd_REQUIRED_BYTES_FOR_ENCODING       2609 
#define Wrappers_MatrixXd_REQUIRED_BITS_FOR_ENCODING        20872

flag Wrappers_MatrixXd_Encode(const Wrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD		5950  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_ROWS_2		5916  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_COLS_2		5927  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA		5943  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5938  /**/
flag Wrappers_MatrixXd_Decode(Wrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);
typedef DummyBase_T Dummy2Base_T;


void Dummy2Base_T_Initialize(Dummy2Base_T* pVal);

#define ERR_DUMMY2BASE_T		1  /**/
flag Dummy2Base_T_IsConstraintValid(const Dummy2Base_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY2BASE_T_2_2		12  /**/
#define Dummy2Base_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define Dummy2Base_T_REQUIRED_BITS_FOR_ENCODING        32

flag Dummy2Base_T_Encode(const Dummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY2BASE_T_2_2		13  /**/
flag Dummy2Base_T_Decode(Dummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_jointstate_mode_acceleration = 0,
    base_jointstate_mode_effort = 1,
    base_jointstate_mode_position = 2,
    base_jointstate_mode_raw = 3,
    base_jointstate_mode_speed = 4,
    base_jointstate_mode_unset = 5
} Base_JointState_MODE;

// please use the following macros to avoid breaking code.
#define Base_JointState_MODE_base_jointstate_mode_acceleration base_jointstate_mode_acceleration
#define Base_JointState_MODE_base_jointstate_mode_effort base_jointstate_mode_effort
#define Base_JointState_MODE_base_jointstate_mode_position base_jointstate_mode_position
#define Base_JointState_MODE_base_jointstate_mode_raw base_jointstate_mode_raw
#define Base_JointState_MODE_base_jointstate_mode_speed base_jointstate_mode_speed
#define Base_JointState_MODE_base_jointstate_mode_unset base_jointstate_mode_unset

void Base_JointState_MODE_Initialize(Base_JointState_MODE* pVal);

#define ERR_BASE_JOINTSTATE_MODE		16  /**/
flag Base_JointState_MODE_IsConstraintValid(const Base_JointState_MODE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE_MODE		17  /**/
#define Base_JointState_MODE_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_JointState_MODE_REQUIRED_BITS_FOR_ENCODING        3

flag Base_JointState_MODE_Encode(const Base_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE_MODE		18  /**/
flag Base_JointState_MODE_Decode(Base_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_time_resolution_microseconds = 0,
    base_time_resolution_milliseconds = 1,
    base_time_resolution_seconds = 2
} Base_Time_Resolution;

// please use the following macros to avoid breaking code.
#define Base_Time_Resolution_base_time_resolution_microseconds base_time_resolution_microseconds
#define Base_Time_Resolution_base_time_resolution_milliseconds base_time_resolution_milliseconds
#define Base_Time_Resolution_base_time_resolution_seconds base_time_resolution_seconds

void Base_Time_Resolution_Initialize(Base_Time_Resolution* pVal);

#define ERR_BASE_TIME_RESOLUTION		23  /**/
flag Base_Time_Resolution_IsConstraintValid(const Base_Time_Resolution* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME_RESOLUTION		24  /**/
#define Base_Time_Resolution_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_Time_Resolution_REQUIRED_BITS_FOR_ENCODING        2

flag Base_Time_Resolution_Encode(const Base_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME_RESOLUTION		25  /**/
flag Base_Time_Resolution_Decode(Base_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_geometry_splinebase_coordinatetype_derivative_to_next = 0,
    base_geometry_splinebase_coordinatetype_derivative_to_prior = 1,
    base_geometry_splinebase_coordinatetype_knuckle_point = 2,
    base_geometry_splinebase_coordinatetype_ordinary_point = 3,
    base_geometry_splinebase_coordinatetype_second_derivative_to_next = 4,
    base_geometry_splinebase_coordinatetype_second_derivative_to_prior = 5,
    base_geometry_splinebase_coordinatetype_tangent_point_for_next = 6,
    base_geometry_splinebase_coordinatetype_tangent_point_for_prior = 7
} Base_geometry_SplineBase_CoordinateType;

// please use the following macros to avoid breaking code.
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_derivative_to_next base_geometry_splinebase_coordinatetype_derivative_to_next
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_derivative_to_prior base_geometry_splinebase_coordinatetype_derivative_to_prior
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_knuckle_point base_geometry_splinebase_coordinatetype_knuckle_point
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_ordinary_point base_geometry_splinebase_coordinatetype_ordinary_point
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_second_derivative_to_next base_geometry_splinebase_coordinatetype_second_derivative_to_next
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_second_derivative_to_prior base_geometry_splinebase_coordinatetype_second_derivative_to_prior
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_tangent_point_for_next base_geometry_splinebase_coordinatetype_tangent_point_for_next
#define Base_geometry_SplineBase_CoordinateType_base_geometry_splinebase_coordinatetype_tangent_point_for_prior base_geometry_splinebase_coordinatetype_tangent_point_for_prior

void Base_geometry_SplineBase_CoordinateType_Initialize(Base_geometry_SplineBase_CoordinateType* pVal);

#define ERR_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		30  /**/
flag Base_geometry_SplineBase_CoordinateType_IsConstraintValid(const Base_geometry_SplineBase_CoordinateType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		31  /**/
#define Base_geometry_SplineBase_CoordinateType_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_geometry_SplineBase_CoordinateType_REQUIRED_BITS_FOR_ENCODING        3

flag Base_geometry_SplineBase_CoordinateType_Encode(const Base_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		32  /**/
flag Base_geometry_SplineBase_CoordinateType_Decode(Base_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_samples_depthmap_depth_measurement_state_measurement_error = 0,
    base_samples_depthmap_depth_measurement_state_too_far = 1,
    base_samples_depthmap_depth_measurement_state_too_near = 2,
    base_samples_depthmap_depth_measurement_state_valid_measurement = 3
} Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE;

// please use the following macros to avoid breaking code.
#define Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_base_samples_depthmap_depth_measurement_state_measurement_error base_samples_depthmap_depth_measurement_state_measurement_error
#define Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_base_samples_depthmap_depth_measurement_state_too_far base_samples_depthmap_depth_measurement_state_too_far
#define Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_base_samples_depthmap_depth_measurement_state_too_near base_samples_depthmap_depth_measurement_state_too_near
#define Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_base_samples_depthmap_depth_measurement_state_valid_measurement base_samples_depthmap_depth_measurement_state_valid_measurement

void Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Initialize(Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		37  /**/
flag Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_IsConstraintValid(const Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		38  /**/
#define Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BITS_FOR_ENCODING        2

flag Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Encode(const Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		39  /**/
flag Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Decode(Base_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_samples_depthmap_projection_type_planar = 0,
    base_samples_depthmap_projection_type_polar = 1
} Base_samples_DepthMap_PROJECTION_TYPE;

// please use the following macros to avoid breaking code.
#define Base_samples_DepthMap_PROJECTION_TYPE_base_samples_depthmap_projection_type_planar base_samples_depthmap_projection_type_planar
#define Base_samples_DepthMap_PROJECTION_TYPE_base_samples_depthmap_projection_type_polar base_samples_depthmap_projection_type_polar

void Base_samples_DepthMap_PROJECTION_TYPE_Initialize(Base_samples_DepthMap_PROJECTION_TYPE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		44  /**/
flag Base_samples_DepthMap_PROJECTION_TYPE_IsConstraintValid(const Base_samples_DepthMap_PROJECTION_TYPE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		45  /**/
#define Base_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BITS_FOR_ENCODING        1

flag Base_samples_DepthMap_PROJECTION_TYPE_Encode(const Base_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		46  /**/
flag Base_samples_DepthMap_PROJECTION_TYPE_Decode(Base_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_DepthMap --------------------------------------------*/


typedef struct {
    int nCount; 
    
    Base_Time arr[200];
} Base_samples_DepthMap_timestamps;


typedef struct {
    int nCount; 
    
    T_Double arr[200];
} Base_samples_DepthMap_vertical_interval;


typedef struct {
    int nCount; 
    
    T_Double arr[200];
} Base_samples_DepthMap_horizontal_interval;


typedef struct {
    int nCount; 
    
    T_Float arr[200];
} Base_samples_DepthMap_distances;


typedef struct {
    int nCount; 
    
    T_Float arr[200];
} Base_samples_DepthMap_remissions;
typedef struct {
    Base_Time time;
    Base_samples_DepthMap_timestamps timestamps;
    Base_samples_DepthMap_PROJECTION_TYPE vertical_projection;
    Base_samples_DepthMap_PROJECTION_TYPE horizontal_projection;
    Base_samples_DepthMap_vertical_interval vertical_interval;
    Base_samples_DepthMap_horizontal_interval horizontal_interval;
    T_UInt32 vertical_size;
    T_UInt32 horizontal_size;
    Base_samples_DepthMap_distances distances;
    Base_samples_DepthMap_remissions remissions;

} Base_samples_DepthMap;

void Base_samples_DepthMap_timestamps_Initialize(Base_samples_DepthMap_timestamps* pVal);
void Base_samples_DepthMap_vertical_interval_Initialize(Base_samples_DepthMap_vertical_interval* pVal);
void Base_samples_DepthMap_horizontal_interval_Initialize(Base_samples_DepthMap_horizontal_interval* pVal);
void Base_samples_DepthMap_distances_Initialize(Base_samples_DepthMap_distances* pVal);
void Base_samples_DepthMap_remissions_Initialize(Base_samples_DepthMap_remissions* pVal);
void Base_samples_DepthMap_Initialize(Base_samples_DepthMap* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP		3442  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIME		3286  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIME_MICROSECONDS		3275  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3319  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM		3308  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_MICROSECONDS		3297  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION		3326  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION		3337  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3359  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM		3348  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3377  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM		3366  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE		3384  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE		3395  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES		3417  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM		3406  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3435  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM		3424  /**/
flag Base_samples_DepthMap_IsConstraintValid(const Base_samples_DepthMap* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP		3443  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3293  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3320  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3315  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3333  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3344  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3360  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3355  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3378  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3373  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3391  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3402  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3418  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3413  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3436  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3431  /**/
#define Base_samples_DepthMap_REQUIRED_BYTES_FOR_ENCODING       12022 
#define Base_samples_DepthMap_REQUIRED_BITS_FOR_ENCODING        96170

flag Base_samples_DepthMap_Encode(const Base_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP		3444  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3294  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3321  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3316  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3334  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3345  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3361  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3356  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3379  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3374  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3392  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3403  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3419  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3414  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3437  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3432  /**/
flag Base_samples_DepthMap_Decode(Base_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_samples_depthmap_unit_axis_unit_x = 0,
    base_samples_depthmap_unit_axis_unit_y = 1,
    base_samples_depthmap_unit_axis_unit_z = 2
} Base_samples_DepthMap_UNIT_AXIS;

// please use the following macros to avoid breaking code.
#define Base_samples_DepthMap_UNIT_AXIS_base_samples_depthmap_unit_axis_unit_x base_samples_depthmap_unit_axis_unit_x
#define Base_samples_DepthMap_UNIT_AXIS_base_samples_depthmap_unit_axis_unit_y base_samples_depthmap_unit_axis_unit_y
#define Base_samples_DepthMap_UNIT_AXIS_base_samples_depthmap_unit_axis_unit_z base_samples_depthmap_unit_axis_unit_z

void Base_samples_DepthMap_UNIT_AXIS_Initialize(Base_samples_DepthMap_UNIT_AXIS* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		51  /**/
flag Base_samples_DepthMap_UNIT_AXIS_IsConstraintValid(const Base_samples_DepthMap_UNIT_AXIS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		52  /**/
#define Base_samples_DepthMap_UNIT_AXIS_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_samples_DepthMap_UNIT_AXIS_REQUIRED_BITS_FOR_ENCODING        2

flag Base_samples_DepthMap_UNIT_AXIS_Encode(const Base_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		53  /**/
flag Base_samples_DepthMap_UNIT_AXIS_Decode(Base_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_samples_laser_range_errors_end_laser_range_errors = 0,
    base_samples_laser_range_errors_max_range_error = 1,
    base_samples_laser_range_errors_measurement_error = 2,
    base_samples_laser_range_errors_other_range_errors = 3,
    base_samples_laser_range_errors_too_far = 4,
    base_samples_laser_range_errors_too_near = 5
} Base_samples_LASER_RANGE_ERRORS;

// please use the following macros to avoid breaking code.
#define Base_samples_LASER_RANGE_ERRORS_base_samples_laser_range_errors_end_laser_range_errors base_samples_laser_range_errors_end_laser_range_errors
#define Base_samples_LASER_RANGE_ERRORS_base_samples_laser_range_errors_max_range_error base_samples_laser_range_errors_max_range_error
#define Base_samples_LASER_RANGE_ERRORS_base_samples_laser_range_errors_measurement_error base_samples_laser_range_errors_measurement_error
#define Base_samples_LASER_RANGE_ERRORS_base_samples_laser_range_errors_other_range_errors base_samples_laser_range_errors_other_range_errors
#define Base_samples_LASER_RANGE_ERRORS_base_samples_laser_range_errors_too_far base_samples_laser_range_errors_too_far
#define Base_samples_LASER_RANGE_ERRORS_base_samples_laser_range_errors_too_near base_samples_laser_range_errors_too_near

void Base_samples_LASER_RANGE_ERRORS_Initialize(Base_samples_LASER_RANGE_ERRORS* pVal);

#define ERR_BASE_SAMPLES_LASER_RANGE_ERRORS		58  /**/
flag Base_samples_LASER_RANGE_ERRORS_IsConstraintValid(const Base_samples_LASER_RANGE_ERRORS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASER_RANGE_ERRORS		59  /**/
#define Base_samples_LASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_samples_LASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ENCODING        3

flag Base_samples_LASER_RANGE_ERRORS_Encode(const Base_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASER_RANGE_ERRORS		60  /**/
flag Base_samples_LASER_RANGE_ERRORS_Decode(Base_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_samples_frame_frame_mode_t_compressed_modes = 0,
    base_samples_frame_frame_mode_t_mode_bayer = 1,
    base_samples_frame_frame_mode_t_mode_bayer_bggr = 2,
    base_samples_frame_frame_mode_t_mode_bayer_gbrg = 3,
    base_samples_frame_frame_mode_t_mode_bayer_grbg = 4,
    base_samples_frame_frame_mode_t_mode_bayer_rggb = 5,
    base_samples_frame_frame_mode_t_mode_bgr = 6,
    base_samples_frame_frame_mode_t_mode_grayscale = 7,
    base_samples_frame_frame_mode_t_mode_jpeg = 8,
    base_samples_frame_frame_mode_t_mode_pjpg = 9,
    base_samples_frame_frame_mode_t_mode_png = 10,
    base_samples_frame_frame_mode_t_mode_rgb = 11,
    base_samples_frame_frame_mode_t_mode_rgb32 = 12,
    base_samples_frame_frame_mode_t_mode_undefined = 13,
    base_samples_frame_frame_mode_t_mode_uyvy = 14,
    base_samples_frame_frame_mode_t_raw_modes = 15
} Base_samples_frame_frame_mode_t;

// please use the following macros to avoid breaking code.
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_compressed_modes base_samples_frame_frame_mode_t_compressed_modes
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_bayer base_samples_frame_frame_mode_t_mode_bayer
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_bayer_bggr base_samples_frame_frame_mode_t_mode_bayer_bggr
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_bayer_gbrg base_samples_frame_frame_mode_t_mode_bayer_gbrg
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_bayer_grbg base_samples_frame_frame_mode_t_mode_bayer_grbg
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_bayer_rggb base_samples_frame_frame_mode_t_mode_bayer_rggb
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_bgr base_samples_frame_frame_mode_t_mode_bgr
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_grayscale base_samples_frame_frame_mode_t_mode_grayscale
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_jpeg base_samples_frame_frame_mode_t_mode_jpeg
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_pjpg base_samples_frame_frame_mode_t_mode_pjpg
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_png base_samples_frame_frame_mode_t_mode_png
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_rgb base_samples_frame_frame_mode_t_mode_rgb
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_rgb32 base_samples_frame_frame_mode_t_mode_rgb32
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_undefined base_samples_frame_frame_mode_t_mode_undefined
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_mode_uyvy base_samples_frame_frame_mode_t_mode_uyvy
#define Base_samples_frame_frame_mode_t_base_samples_frame_frame_mode_t_raw_modes base_samples_frame_frame_mode_t_raw_modes

void Base_samples_frame_frame_mode_t_Initialize(Base_samples_frame_frame_mode_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_MODE_T		65  /**/
flag Base_samples_frame_frame_mode_t_IsConstraintValid(const Base_samples_frame_frame_mode_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		66  /**/
#define Base_samples_frame_frame_mode_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_samples_frame_frame_mode_t_REQUIRED_BITS_FOR_ENCODING        4

flag Base_samples_frame_frame_mode_t_Encode(const Base_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		67  /**/
flag Base_samples_frame_frame_mode_t_Decode(Base_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    base_samples_frame_frame_status_t_status_empty = 0,
    base_samples_frame_frame_status_t_status_invalid = 1,
    base_samples_frame_frame_status_t_status_valid = 2
} Base_samples_frame_frame_status_t;

// please use the following macros to avoid breaking code.
#define Base_samples_frame_frame_status_t_base_samples_frame_frame_status_t_status_empty base_samples_frame_frame_status_t_status_empty
#define Base_samples_frame_frame_status_t_base_samples_frame_frame_status_t_status_invalid base_samples_frame_frame_status_t_status_invalid
#define Base_samples_frame_frame_status_t_base_samples_frame_frame_status_t_status_valid base_samples_frame_frame_status_t_status_valid

void Base_samples_frame_frame_status_t_Initialize(Base_samples_frame_frame_status_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_STATUS_T		72  /**/
flag Base_samples_frame_frame_status_t_IsConstraintValid(const Base_samples_frame_frame_status_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		73  /**/
#define Base_samples_frame_frame_status_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define Base_samples_frame_frame_status_t_REQUIRED_BITS_FOR_ENCODING        2

flag Base_samples_frame_frame_status_t_Encode(const Base_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		74  /**/
flag Base_samples_frame_frame_status_t_Decode(Base_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_frame_Frame --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[200];
} Base_samples_frame_Frame_image;



typedef struct {
    int nCount; 
    
    Base_samples_frame_frame_attrib_t arr[200];
} Base_samples_frame_Frame_attributes;
typedef struct {
    Base_Time time;
    Base_Time received_time;
    Base_samples_frame_Frame_image image;
    Base_samples_frame_Frame_attributes attributes;
    Base_samples_frame_frame_size_t size_val;
    T_UInt32 data_depth;
    T_UInt32 pixel_size;
    T_UInt32 row_size;
    Base_samples_frame_frame_mode_t frame_mode;
    Base_samples_frame_frame_status_t frame_status;

} Base_samples_frame_Frame;

void Base_samples_frame_Frame_image_Initialize(Base_samples_frame_Frame_image* pVal);
void Base_samples_frame_Frame_attributes_Initialize(Base_samples_frame_Frame_attributes* pVal);
void Base_samples_frame_Frame_Initialize(Base_samples_frame_Frame* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME		5245  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_TIME		5077  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_TIME_MICROSECONDS		5066  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME		5099  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_MICROSECONDS		5088  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_IMAGE		5110  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5150  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM		5139  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_DATA		5117  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_NAME_VAL		5128  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL		5179  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_WIDTH		5157  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_HEIGHT		5168  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH		5190  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE		5201  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE		5212  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE		5223  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS		5234  /**/
flag Base_samples_frame_Frame_IsConstraintValid(const Base_samples_frame_Frame* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME		5246  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		5084  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		5106  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		5111  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5151  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		5146  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5186  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5197  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5208  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5219  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5230  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5241  /**/
#define Base_samples_frame_Frame_REQUIRED_BYTES_FOR_ENCODING       16535 
#define Base_samples_frame_Frame_REQUIRED_BITS_FOR_ENCODING        132278

flag Base_samples_frame_Frame_Encode(const Base_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME		5247  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		5085  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		5107  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		5112  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		5152  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		5147  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5187  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5198  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5209  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5220  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5231  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5242  /**/
flag Base_samples_frame_Frame_Decode(Base_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_samples_frame_FramePair --------------------------------------------*/
typedef struct {
    Base_Time time;
    Base_samples_frame_Frame first;
    Base_samples_frame_Frame second;
    T_UInt32 id;

} Base_samples_frame_FramePair;

void Base_samples_frame_FramePair_Initialize(Base_samples_frame_FramePair* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR		5665  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME		5263  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_MICROSECONDS		5252  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST		5453  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME		5285  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME_MICROSECONDS		5274  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME		5307  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME_MICROSECONDS		5296  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE		5318  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES		5358  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM		5347  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_DATA		5325  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_NAME_VAL		5336  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL		5387  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_WIDTH		5365  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_HEIGHT		5376  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_DATA_DEPTH		5398  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_PIXEL_SIZE		5409  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ROW_SIZE		5420  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_MODE		5431  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_STATUS		5442  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND		5643  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME		5475  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME_MICROSECONDS		5464  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME		5497  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME_MICROSECONDS		5486  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE		5508  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES		5548  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM		5537  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_DATA		5515  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_NAME_VAL		5526  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL		5577  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_WIDTH		5555  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_HEIGHT		5566  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_DATA_DEPTH		5588  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_PIXEL_SIZE		5599  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ROW_SIZE		5610  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_MODE		5621  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_STATUS		5632  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_ID		5654  /**/
flag Base_samples_frame_FramePair_IsConstraintValid(const Base_samples_frame_FramePair* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5666  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5270  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5460  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5650  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5661  /**/
#define Base_samples_frame_FramePair_REQUIRED_BYTES_FOR_ENCODING       33082 
#define Base_samples_frame_FramePair_REQUIRED_BITS_FOR_ENCODING        264652

flag Base_samples_frame_FramePair_Encode(const Base_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5667  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5271  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5461  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5651  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5662  /**/
flag Base_samples_frame_FramePair_Decode(Base_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    wrappers_geometry_splinetype_degenerate = 0,
    wrappers_geometry_splinetype_polynomial_bezier = 1,
    wrappers_geometry_splinetype_polynomial_bspline = 2,
    wrappers_geometry_splinetype_rational_bezier = 3,
    wrappers_geometry_splinetype_rational_bspline = 4
} Wrappers_geometry_SplineType;

// please use the following macros to avoid breaking code.
#define Wrappers_geometry_SplineType_wrappers_geometry_splinetype_degenerate wrappers_geometry_splinetype_degenerate
#define Wrappers_geometry_SplineType_wrappers_geometry_splinetype_polynomial_bezier wrappers_geometry_splinetype_polynomial_bezier
#define Wrappers_geometry_SplineType_wrappers_geometry_splinetype_polynomial_bspline wrappers_geometry_splinetype_polynomial_bspline
#define Wrappers_geometry_SplineType_wrappers_geometry_splinetype_rational_bezier wrappers_geometry_splinetype_rational_bezier
#define Wrappers_geometry_SplineType_wrappers_geometry_splinetype_rational_bspline wrappers_geometry_splinetype_rational_bspline

void Wrappers_geometry_SplineType_Initialize(Wrappers_geometry_SplineType* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINETYPE		79  /**/
flag Wrappers_geometry_SplineType_IsConstraintValid(const Wrappers_geometry_SplineType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINETYPE		80  /**/
#define Wrappers_geometry_SplineType_REQUIRED_BYTES_FOR_ENCODING       1 
#define Wrappers_geometry_SplineType_REQUIRED_BITS_FOR_ENCODING        3

flag Wrappers_geometry_SplineType_Encode(const Wrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINETYPE		81  /**/
flag Wrappers_geometry_SplineType_Decode(Wrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Wrappers_geometry_Spline --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[200];
} Wrappers_geometry_Spline_knots;


typedef struct {
    int nCount; 
    
    T_Double arr[200];
} Wrappers_geometry_Spline_vertices;
typedef struct {
    T_Double geometric_resolution;
    T_Int32 dimension;
    T_Int32 curve_order;
    Wrappers_geometry_SplineType kind;
    Wrappers_geometry_Spline_knots knots;
    Wrappers_geometry_Spline_vertices vertices;

} Wrappers_geometry_Spline;

void Wrappers_geometry_Spline_knots_Initialize(Wrappers_geometry_Spline_knots* pVal);
void Wrappers_geometry_Spline_vertices_Initialize(Wrappers_geometry_Spline_vertices* pVal);
void Wrappers_geometry_Spline_Initialize(Wrappers_geometry_Spline* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINE		8104  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION		8024  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_DIMENSION		8035  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER		8046  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KIND		8057  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS		8079  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM		8068  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES		8097  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM		8086  /**/
flag Wrappers_geometry_Spline_IsConstraintValid(const Wrappers_geometry_Spline* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE		8105  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		8031  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		8042  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		8053  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		8064  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		8080  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		8075  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		8098  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		8093  /**/
#define Wrappers_geometry_Spline_REQUIRED_BYTES_FOR_ENCODING       5224 
#define Wrappers_geometry_Spline_REQUIRED_BITS_FOR_ENCODING        41787

flag Wrappers_geometry_Spline_Encode(const Wrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE		8106  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		8032  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		8043  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		8054  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		8065  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		8081  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		8076  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		8099  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		8094  /**/
flag Wrappers_geometry_Spline_Decode(Wrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Trajectory --------------------------------------------*/
typedef struct {
    T_Double speed;
    Wrappers_geometry_Spline spline;

} Base_Trajectory;

void Base_Trajectory_Initialize(Base_Trajectory* pVal);

#define ERR_BASE_TRAJECTORY		1192  /**/
#define ERR_BASE_TRAJECTORY_SPEED		1090  /**/
#define ERR_BASE_TRAJECTORY_SPLINE		1181  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_GEOMETRIC_RESOLUTION		1101  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_DIMENSION		1112  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_CURVE_ORDER		1123  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KIND		1134  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS		1156  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS_ELM		1145  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES		1174  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES_ELM		1163  /**/
flag Base_Trajectory_IsConstraintValid(const Base_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY		1193  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPEED_2		1097  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPLINE_2		1188  /**/
#define Base_Trajectory_REQUIRED_BYTES_FOR_ENCODING       5237 
#define Base_Trajectory_REQUIRED_BITS_FOR_ENCODING        41891

flag Base_Trajectory_Encode(const Base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY		1194  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPEED_2		1098  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPLINE_2		1189  /**/
flag Base_Trajectory_Decode(Base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Base_Trajectory_m --------------------------------------------*/
typedef struct {
    T_Double speed;
    Wrappers_geometry_Spline spline;

} Base_Trajectory_m;

void Base_Trajectory_m_Initialize(Base_Trajectory_m* pVal);

#define ERR_BASE_TRAJECTORY_M		8213  /**/
#define ERR_BASE_TRAJECTORY_M_SPEED		8111  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE		8202  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_GEOMETRIC_RESOLUTION		8122  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_DIMENSION		8133  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_CURVE_ORDER		8144  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KIND		8155  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS		8177  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS_ELM		8166  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES		8195  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES_ELM		8184  /**/
flag Base_Trajectory_m_IsConstraintValid(const Base_Trajectory_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M		8214  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPEED_2		8118  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPLINE_2		8209  /**/
#define Base_Trajectory_m_REQUIRED_BYTES_FOR_ENCODING       5237 
#define Base_Trajectory_m_REQUIRED_BITS_FOR_ENCODING        41891

flag Base_Trajectory_m_Encode(const Base_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY_M		8215  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPEED_2		8119  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPLINE_2		8210  /**/
flag Base_Trajectory_m_Decode(Base_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    Base_Trajectory_m arr[200];
} Std_orogen_typekits_mtype_std_vector_base_Trajectory;

void Std_orogen_typekits_mtype_std_vector_base_Trajectory_Initialize(Std_orogen_typekits_mtype_std_vector_base_Trajectory* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		533  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM		522  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPEED		420  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE		511  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_GEOMETRIC_RESOLUTION		431  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_DIMENSION		442  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_CURVE_ORDER		453  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KIND		464  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS		486  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS_ELM		475  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES		504  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES_ELM		493  /**/
flag Std_orogen_typekits_mtype_std_vector_base_Trajectory_IsConstraintValid(const Std_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		534  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		529  /**/
#define Std_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BYTES_FOR_ENCODING       1047276 
#define Std_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BITS_FOR_ENCODING        8378208

flag Std_orogen_typekits_mtype_std_vector_base_Trajectory_Encode(const Std_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		535  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		530  /**/
flag Std_orogen_typekits_mtype_std_vector_base_Trajectory_Decode(Std_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
