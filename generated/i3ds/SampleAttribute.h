#ifndef GENERATED_ASN1SCC_SampleAttribute_H
#define GENERATED_ASN1SCC_SampleAttribute_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-extended.h"
#include "taste-types.h"
#include "Common.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef enum
{
  sample_empty = 0,
  sample_valid = 1,
  sample_invalid = 2
} SampleValidity;

#define SampleValidity_REQUIRED_BYTES_FOR_ENCODING       1
#define SampleValidity_REQUIRED_BITS_FOR_ENCODING        2
#define SampleValidity_REQUIRED_BYTES_FOR_ACN_ENCODING   1
#define SampleValidity_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define SampleValidity_REQUIRED_BYTES_FOR_XER_ENCODING   60

void SampleValidity_Initialize(SampleValidity* pVal);
flag SampleValidity_IsConstraintValid(const SampleValidity* val, int* pErrCode);
#ifndef ERR_SampleValidity_unknown_enumeration_value
#define ERR_SampleValidity_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_SampleValidity
#define ERR_SampleValidity		1001  /**/
#endif

typedef struct
{
  int nCount;

  byte arr[8];
} T_String8;

#define T_String8_REQUIRED_BYTES_FOR_ENCODING       9
#define T_String8_REQUIRED_BITS_FOR_ENCODING        68
#define T_String8_REQUIRED_BYTES_FOR_ACN_ENCODING   9
#define T_String8_REQUIRED_BITS_FOR_ACN_ENCODING    68
#define T_String8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void T_String8_Initialize(T_String8* pVal);
flag T_String8_IsConstraintValid(const T_String8* val, int* pErrCode);
#ifndef ERR_T_String8
#define ERR_T_String8		1003  /*(SIZE(0 .. 8))*/
#endif

typedef struct
{
  enum
  {
    Attribute_value_t_NONE,
    boolean_value_PRESENT,
    discrete_value_PRESENT,
    real_value_PRESENT,
    string_value_PRESENT
  } kind;
  union
  {
    T_Boolean boolean_value;
    T_Int64 discrete_value;
    T_Double real_value;
    T_String8 string_value;
  } u;
} Attribute_value_t;

#define Attribute_value_t_REQUIRED_BYTES_FOR_ENCODING       14
#define Attribute_value_t_REQUIRED_BITS_FOR_ENCODING        107
#define Attribute_value_t_REQUIRED_BYTES_FOR_ACN_ENCODING   14
#define Attribute_value_t_REQUIRED_BITS_FOR_ACN_ENCODING    107
#define Attribute_value_t_REQUIRED_BYTES_FOR_XER_ENCODING   114

void Attribute_value_t_Initialize(Attribute_value_t* pVal);
flag Attribute_value_t_IsConstraintValid(const Attribute_value_t* val, int* pErrCode);
#ifndef ERR_Attribute_value_t_unknown_choice_index
#define ERR_Attribute_value_t_unknown_choice_index		1004  /**/
#endif

typedef struct
{
  T_UInt8 attribute_key;
  Attribute_value_t attribute_value;
} Sample_attribute_t;

#define Sample_attribute_t_REQUIRED_BYTES_FOR_ENCODING       15
#define Sample_attribute_t_REQUIRED_BITS_FOR_ENCODING        115
#define Sample_attribute_t_REQUIRED_BYTES_FOR_ACN_ENCODING   15
#define Sample_attribute_t_REQUIRED_BITS_FOR_ACN_ENCODING    115
#define Sample_attribute_t_REQUIRED_BYTES_FOR_XER_ENCODING   202

void Sample_attribute_t_Initialize(Sample_attribute_t* pVal);
flag Sample_attribute_t_IsConstraintValid(const Sample_attribute_t* val, int* pErrCode);


typedef struct
{
  int nCount;

  Sample_attribute_t arr[4];
} SampleAttributes_attributes;

#define SampleAttributes_attributes_REQUIRED_BYTES_FOR_ENCODING       58
#define SampleAttributes_attributes_REQUIRED_BITS_FOR_ENCODING        463
#define SampleAttributes_attributes_REQUIRED_BYTES_FOR_ACN_ENCODING   58
#define SampleAttributes_attributes_REQUIRED_BITS_FOR_ACN_ENCODING    463
#define SampleAttributes_attributes_REQUIRED_BYTES_FOR_XER_ENCODING   867

void SampleAttributes_attributes_Initialize(SampleAttributes_attributes* pVal);
flag SampleAttributes_attributes_IsConstraintValid(const SampleAttributes_attributes* val, int* pErrCode);
#ifndef ERR_SampleAttributes_attributes
#define ERR_SampleAttributes_attributes		1005  /*(SIZE(0 .. 4))*/
#endif

typedef struct
{
  Timepoint timestamp;
  SampleValidity validity;
  SampleAttributes_attributes attributes;
} SampleAttributes;

#define SampleAttributes_REQUIRED_BYTES_FOR_ENCODING       67
#define SampleAttributes_REQUIRED_BITS_FOR_ENCODING        529
#define SampleAttributes_REQUIRED_BYTES_FOR_ACN_ENCODING   67
#define SampleAttributes_REQUIRED_BITS_FOR_ACN_ENCODING    529
#define SampleAttributes_REQUIRED_BYTES_FOR_XER_ENCODING   961

void SampleAttributes_Initialize(SampleAttributes* pVal);
flag SampleAttributes_IsConstraintValid(const SampleAttributes* val, int* pErrCode);




/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag SampleValidity_Encode(const SampleValidity* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SampleValidity_Decode(SampleValidity* pVal, BitStream* pBitStrm, int* pErrCode);
flag T_String8_Encode(const T_String8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_String8_Decode(T_String8* pVal, BitStream* pBitStrm, int* pErrCode);
flag Attribute_value_t_Encode(const Attribute_value_t* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Attribute_value_t_Decode(Attribute_value_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag Sample_attribute_t_Encode(const Sample_attribute_t* val, BitStream* pBitStrm, int* pErrCode,
                               flag bCheckConstraints);
flag Sample_attribute_t_Decode(Sample_attribute_t* pVal, BitStream* pBitStrm, int* pErrCode);
flag SampleAttributes_attributes_Encode(const SampleAttributes_attributes* val, BitStream* pBitStrm, int* pErrCode,
                                        flag bCheckConstraints);
flag SampleAttributes_attributes_Decode(SampleAttributes_attributes* pVal, BitStream* pBitStrm, int* pErrCode);
flag SampleAttributes_Encode(const SampleAttributes* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SampleAttributes_Decode(SampleAttributes* pVal, BitStream* pBitStrm, int* pErrCode);


#ifdef  __cplusplus
}
#define ENUM_sample_empty	sample_empty
#define ENUM_sample_valid	sample_valid
#define ENUM_sample_invalid	sample_invalid
#define CHOICE_boolean_value_PRESENT	Attribute_value_t::boolean_value_PRESENT
#define CHOICE_discrete_value_PRESENT	Attribute_value_t::discrete_value_PRESENT
#define CHOICE_real_value_PRESENT	Attribute_value_t::real_value_PRESENT
#define CHOICE_string_value_PRESENT	Attribute_value_t::string_value_PRESENT

#endif

#endif
