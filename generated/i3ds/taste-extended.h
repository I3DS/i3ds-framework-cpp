#ifndef GENERATED_ASN1SCC_taste_extended_H
#define GENERATED_ASN1SCC_taste_extended_H
/*
Code automatically generated by asn1scc tool
*/
#include "taste-types.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1Real T_Double;


void T_Double_Initialize(T_Double* pVal);

#define ERR_T_DOUBLE		349  /**/
flag T_Double_IsConstraintValid(const T_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		350  /**/
#define T_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Double_REQUIRED_BITS_FOR_ENCODING        104

flag T_Double_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		351  /**/
flag T_Double_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Float;


void T_Float_Initialize(T_Float* pVal);

#define ERR_T_FLOAT		356  /**/
flag T_Float_IsConstraintValid(const T_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		357  /**/
#define T_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define T_Float_REQUIRED_BITS_FOR_ENCODING        104

flag T_Float_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		358  /**/
flag T_Float_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int16;


void T_Int16_Initialize(T_Int16* pVal);

#define ERR_T_INT16		363  /**/
flag T_Int16_IsConstraintValid(const T_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		364  /**/
#define T_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag T_Int16_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		365  /**/
flag T_Int16_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt16;


void T_UInt16_Initialize(T_UInt16* pVal);

#define ERR_T_UINT16		370  /**/
flag T_UInt16_IsConstraintValid(const T_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		371  /**/
#define T_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define T_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag T_UInt16_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		372  /**/
flag T_UInt16_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt64;


void T_UInt64_Initialize(T_UInt64* pVal);

#define ERR_T_UINT64		377  /**/
flag T_UInt64_IsConstraintValid(const T_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		378  /**/
#define T_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define T_UInt64_REQUIRED_BITS_FOR_ENCODING        63

flag T_UInt64_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		379  /**/
flag T_UInt64_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int64;


void T_Int64_Initialize(T_Int64* pVal);

#define ERR_T_INT64		384  /**/
flag T_Int64_IsConstraintValid(const T_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT64		385  /**/
#define T_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define T_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag T_Int64_Encode(const T_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT64		386  /**/
flag T_Int64_Decode(T_Int64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount; 
    
    byte arr[256];
} T_String;


void T_String_Initialize(T_String* pVal);

#define ERR_T_STRING		391  /**/
flag T_String_IsConstraintValid(const T_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_STRING		392  /**/
#define T_String_REQUIRED_BYTES_FOR_ENCODING       258 
#define T_String_REQUIRED_BITS_FOR_ENCODING        2057

flag T_String_Encode(const T_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_STRING		393  /**/
flag T_String_Decode(T_String* pVal, BitStream* pBitStrm, int* pErrCode);

extern const T_UInt32 maxSize_T_String; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
