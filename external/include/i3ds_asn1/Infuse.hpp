#ifndef i3ds_asn1_GENERATED_ASN1SCC_Infuse_H
#define i3ds_asn1_GENERATED_ASN1SCC_Infuse_H
/*
Code automatically generated by asn1scc tool
*/
#include <i3ds_asn1/asn1crt.hpp>
#include <i3ds_asn1/asn1crt_encoding.hpp>

#include <i3ds_asn1/taste-types.hpp>
#include <i3ds_asn1/taste-extended.hpp>

namespace i3ds_asn1 {


typedef enum {
    Trg_pfip_infuse_mode_modeEnum_dis = 0,
    Trg_pfip_infuse_mode_modeEnum_rorn = 1,
    Trg_pfip_infuse_mode_modeEnum_tprn = 2
} Trg_pfip_infuse_mode_modeEnum;

// please use the following macros to avoid breaking code.
#define nsTrg_pfip_infuse_mode_modeEnum_dis i3ds_asn1::Trg_pfip_infuse_mode_modeEnum_dis
#define nsTrg_pfip_infuse_mode_modeEnum_rorn i3ds_asn1::Trg_pfip_infuse_mode_modeEnum_rorn
#define nsTrg_pfip_infuse_mode_modeEnum_tprn i3ds_asn1::Trg_pfip_infuse_mode_modeEnum_tprn

void Trg_pfip_infuse_mode_modeEnum_Initialize(Trg_pfip_infuse_mode_modeEnum* pVal);

#define i3ds_asn1_ERR_TRG_PFIP_INFUSE_MODE_MODEENUM		85  /**/
flag Trg_pfip_infuse_mode_modeEnum_IsConstraintValid(const Trg_pfip_infuse_mode_modeEnum* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_TRG_PFIP_INFUSE_MODE_MODEENUM		86  /**/
#define i3ds_asn1_Trg_pfip_infuse_mode_modeEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_Trg_pfip_infuse_mode_modeEnum_REQUIRED_BITS_FOR_ENCODING        2

flag Trg_pfip_infuse_mode_modeEnum_Encode(const Trg_pfip_infuse_mode_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_TRG_PFIP_INFUSE_MODE_MODEENUM		87  /**/
flag Trg_pfip_infuse_mode_modeEnum_Decode(Trg_pfip_infuse_mode_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- INFUSE_IP_IF_Input --------------------------------------------*/
typedef struct {
    Trg_pfip_infuse_mode_modeEnum trg_pfip_infuse_mode;
    T_Double gnc_time;

} INFUSE_IP_IF_Input;

void INFUSE_IP_IF_Input_Initialize(INFUSE_IP_IF_Input* pVal);

#define i3ds_asn1_ERR_INFUSE_IP_IF_INPUT		120  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_INPUT_TRG_PFIP_INFUSE_MODE_2		99  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_INPUT_GNC_TIME_2		113  /**/
flag INFUSE_IP_IF_Input_IsConstraintValid(const INFUSE_IP_IF_Input* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_INPUT		121  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_INPUT_TRG_PFIP_INFUSE_MODE_2		100  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_INPUT_GNC_TIME_2		114  /**/
#define i3ds_asn1_INFUSE_IP_IF_Input_REQUIRED_BYTES_FOR_ENCODING       14 
#define i3ds_asn1_INFUSE_IP_IF_Input_REQUIRED_BITS_FOR_ENCODING        106

flag INFUSE_IP_IF_Input_Encode(const INFUSE_IP_IF_Input* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_INPUT		122  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_INPUT_TRG_PFIP_INFUSE_MODE_2		101  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_INPUT_GNC_TIME_2		115  /**/
flag INFUSE_IP_IF_Input_Decode(INFUSE_IP_IF_Input* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    Flg_pfip_mode_meas_modeEnum_dis = 0,
    Flg_pfip_mode_meas_modeEnum_rorn = 1,
    Flg_pfip_mode_meas_modeEnum_tprn = 2
} Flg_pfip_mode_meas_modeEnum;

// please use the following macros to avoid breaking code.
#define nsFlg_pfip_mode_meas_modeEnum_dis i3ds_asn1::Flg_pfip_mode_meas_modeEnum_dis
#define nsFlg_pfip_mode_meas_modeEnum_rorn i3ds_asn1::Flg_pfip_mode_meas_modeEnum_rorn
#define nsFlg_pfip_mode_meas_modeEnum_tprn i3ds_asn1::Flg_pfip_mode_meas_modeEnum_tprn

void Flg_pfip_mode_meas_modeEnum_Initialize(Flg_pfip_mode_meas_modeEnum* pVal);

#define i3ds_asn1_ERR_FLG_PFIP_MODE_MEAS_MODEENUM		127  /**/
flag Flg_pfip_mode_meas_modeEnum_IsConstraintValid(const Flg_pfip_mode_meas_modeEnum* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_FLG_PFIP_MODE_MEAS_MODEENUM		128  /**/
#define i3ds_asn1_Flg_pfip_mode_meas_modeEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_Flg_pfip_mode_meas_modeEnum_REQUIRED_BITS_FOR_ENCODING        2

flag Flg_pfip_mode_meas_modeEnum_Encode(const Flg_pfip_mode_meas_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_FLG_PFIP_MODE_MEAS_MODEENUM		129  /**/
flag Flg_pfip_mode_meas_modeEnum_Decode(Flg_pfip_mode_meas_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- INFUSE_IP_IF_Output --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[3];
} INFUSE_IP_IF_Output_svc_pos_svc_clt_meas;


typedef struct {
    int nCount; 
    
    T_Double arr[4];
} INFUSE_IP_IF_Output_q_svc_clt_meas;


typedef struct {
    int nCount; 
    
    T_Double arr[36];
} INFUSE_IP_IF_Output_cov_svc_pose_svc_clt_meas;
typedef struct {
    INFUSE_IP_IF_Output_svc_pos_svc_clt_meas svc_pos_svc_clt_meas;
    INFUSE_IP_IF_Output_q_svc_clt_meas q_svc_clt_meas;
    T_UInt64 pose_proc_delay_meas;
    INFUSE_IP_IF_Output_cov_svc_pose_svc_clt_meas cov_svc_pose_svc_clt_meas;
    T_Boolean flg_pfip_converged_meas;
    T_Boolean flg_sppj_PC_used_meas;
    T_Boolean flg_pfip_detectfailed_meas;
    Flg_pfip_mode_meas_modeEnum flg_pfip_mode_meas;

} INFUSE_IP_IF_Output;

void INFUSE_IP_IF_Output_svc_pos_svc_clt_meas_Initialize(INFUSE_IP_IF_Output_svc_pos_svc_clt_meas* pVal);
void INFUSE_IP_IF_Output_q_svc_clt_meas_Initialize(INFUSE_IP_IF_Output_q_svc_clt_meas* pVal);
void INFUSE_IP_IF_Output_cov_svc_pose_svc_clt_meas_Initialize(INFUSE_IP_IF_Output_cov_svc_pose_svc_clt_meas* pVal);
void INFUSE_IP_IF_Output_Initialize(INFUSE_IP_IF_Output* pVal);

#define i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT		267  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_SVC_POS_SVC_CLT_MEAS		148  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_SVC_POS_SVC_CLT_MEAS_ELM_2		141  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_Q_SVC_CLT_MEAS		169  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_Q_SVC_CLT_MEAS_ELM_2		162  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_POSE_PROC_DELAY_MEAS_2		183  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_COV_SVC_POSE_SVC_CLT_MEAS		204  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_COV_SVC_POSE_SVC_CLT_MEAS_ELM_2		197  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_FLG_PFIP_CONVERGED_MEAS_2		218  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_FLG_SPPJ_PC_USED_MEAS_2		232  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_FLG_PFIP_DETECTFAILED_MEAS_2		246  /**/
#define i3ds_asn1_i3ds_asn1_ERR_INFUSE_IP_IF_OUTPUT_FLG_PFIP_MODE_MEAS_2		260  /**/
flag INFUSE_IP_IF_Output_IsConstraintValid(const INFUSE_IP_IF_Output* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT		268  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_SVC_POS_SVC_CLT_MEAS		149  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_SVC_POS_SVC_CLT_MEAS_ELM_2		142  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_Q_SVC_CLT_MEAS		170  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_Q_SVC_CLT_MEAS_ELM_2		163  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_POSE_PROC_DELAY_MEAS_2		184  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_COV_SVC_POSE_SVC_CLT_MEAS		205  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_COV_SVC_POSE_SVC_CLT_MEAS_ELM_2		198  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_FLG_PFIP_CONVERGED_MEAS_2		219  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_FLG_SPPJ_PC_USED_MEAS_2		233  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_FLG_PFIP_DETECTFAILED_MEAS_2		247  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_INFUSE_IP_IF_OUTPUT_FLG_PFIP_MODE_MEAS_2		261  /**/
#define i3ds_asn1_INFUSE_IP_IF_Output_REQUIRED_BYTES_FOR_ENCODING       569 
#define i3ds_asn1_INFUSE_IP_IF_Output_REQUIRED_BITS_FOR_ENCODING        4551

flag INFUSE_IP_IF_Output_Encode(const INFUSE_IP_IF_Output* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT		269  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_SVC_POS_SVC_CLT_MEAS		150  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_SVC_POS_SVC_CLT_MEAS_ELM_2		143  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_Q_SVC_CLT_MEAS		171  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_Q_SVC_CLT_MEAS_ELM_2		164  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_POSE_PROC_DELAY_MEAS_2		185  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_COV_SVC_POSE_SVC_CLT_MEAS		206  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_COV_SVC_POSE_SVC_CLT_MEAS_ELM_2		199  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_FLG_PFIP_CONVERGED_MEAS_2		220  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_FLG_SPPJ_PC_USED_MEAS_2		234  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_FLG_PFIP_DETECTFAILED_MEAS_2		248  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_INFUSE_IP_IF_OUTPUT_FLG_PFIP_MODE_MEAS_2		262  /**/
flag INFUSE_IP_IF_Output_Decode(INFUSE_IP_IF_Output* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    Trg_raip_mode_modeEnum_dis = 0,
    Trg_raip_mode_modeEnum_jbsf = 1,
    Trg_raip_mode_modeEnum_prince = 2,
    Trg_raip_mode_modeEnum_assist = 3,
    Trg_raip_mode_modeEnum_sirom = 4,
    Trg_raip_mode_modeEnum_point_cloud = 5
} Trg_raip_mode_modeEnum;

// please use the following macros to avoid breaking code.
#define nsTrg_raip_mode_modeEnum_dis i3ds_asn1::Trg_raip_mode_modeEnum_dis
#define nsTrg_raip_mode_modeEnum_jbsf i3ds_asn1::Trg_raip_mode_modeEnum_jbsf
#define nsTrg_raip_mode_modeEnum_prince i3ds_asn1::Trg_raip_mode_modeEnum_prince
#define nsTrg_raip_mode_modeEnum_assist i3ds_asn1::Trg_raip_mode_modeEnum_assist
#define nsTrg_raip_mode_modeEnum_sirom i3ds_asn1::Trg_raip_mode_modeEnum_sirom
#define nsTrg_raip_mode_modeEnum_point_cloud i3ds_asn1::Trg_raip_mode_modeEnum_point_cloud

void Trg_raip_mode_modeEnum_Initialize(Trg_raip_mode_modeEnum* pVal);

#define i3ds_asn1_ERR_TRG_RAIP_MODE_MODEENUM		274  /**/
flag Trg_raip_mode_modeEnum_IsConstraintValid(const Trg_raip_mode_modeEnum* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_TRG_RAIP_MODE_MODEENUM		275  /**/
#define i3ds_asn1_Trg_raip_mode_modeEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_Trg_raip_mode_modeEnum_REQUIRED_BITS_FOR_ENCODING        3

flag Trg_raip_mode_modeEnum_Encode(const Trg_raip_mode_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_TRG_RAIP_MODE_MODEENUM		276  /**/
flag Trg_raip_mode_modeEnum_Decode(Trg_raip_mode_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    Trg_raip_config_selector_modeEnum_empty = 0,
    Trg_raip_config_selector_modeEnum_gripper = 1,
    Trg_raip_config_selector_modeEnum_gripper_client = 2,
    Trg_raip_config_selector_modeEnum_sirom = 3,
    Trg_raip_config_selector_modeEnum_sirom_oru = 4
} Trg_raip_config_selector_modeEnum;

// please use the following macros to avoid breaking code.
#define nsTrg_raip_config_selector_modeEnum_empty i3ds_asn1::Trg_raip_config_selector_modeEnum_empty
#define nsTrg_raip_config_selector_modeEnum_gripper i3ds_asn1::Trg_raip_config_selector_modeEnum_gripper
#define nsTrg_raip_config_selector_modeEnum_gripper_client i3ds_asn1::Trg_raip_config_selector_modeEnum_gripper_client
#define nsTrg_raip_config_selector_modeEnum_sirom i3ds_asn1::Trg_raip_config_selector_modeEnum_sirom
#define nsTrg_raip_config_selector_modeEnum_sirom_oru i3ds_asn1::Trg_raip_config_selector_modeEnum_sirom_oru

void Trg_raip_config_selector_modeEnum_Initialize(Trg_raip_config_selector_modeEnum* pVal);

#define i3ds_asn1_ERR_TRG_RAIP_CONFIG_SELECTOR_MODEENUM		281  /**/
flag Trg_raip_config_selector_modeEnum_IsConstraintValid(const Trg_raip_config_selector_modeEnum* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_TRG_RAIP_CONFIG_SELECTOR_MODEENUM		282  /**/
#define i3ds_asn1_Trg_raip_config_selector_modeEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_Trg_raip_config_selector_modeEnum_REQUIRED_BITS_FOR_ENCODING        3

flag Trg_raip_config_selector_modeEnum_Encode(const Trg_raip_config_selector_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_TRG_RAIP_CONFIG_SELECTOR_MODEENUM		283  /**/
flag Trg_raip_config_selector_modeEnum_Decode(Trg_raip_config_selector_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- RA_IP_IF_Input --------------------------------------------*/
typedef struct {
    Trg_raip_mode_modeEnum trg_raip_mode;
    Trg_raip_config_selector_modeEnum trg_raip_config_selector;
    T_Boolean trg_raip_reset;
    T_Double gnc_time;

} RA_IP_IF_Input;

void RA_IP_IF_Input_Initialize(RA_IP_IF_Input* pVal);

#define i3ds_asn1_ERR_RA_IP_IF_INPUT		344  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_INPUT_TRG_RAIP_MODE_2		295  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_INPUT_TRG_RAIP_CONFIG_SELECTOR_2		309  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_INPUT_TRG_RAIP_RESET_2		323  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_INPUT_GNC_TIME_2		337  /**/
flag RA_IP_IF_Input_IsConstraintValid(const RA_IP_IF_Input* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_INPUT		345  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_INPUT_TRG_RAIP_MODE_2		296  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_INPUT_TRG_RAIP_CONFIG_SELECTOR_2		310  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_INPUT_TRG_RAIP_RESET_2		324  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_INPUT_GNC_TIME_2		338  /**/
#define i3ds_asn1_RA_IP_IF_Input_REQUIRED_BYTES_FOR_ENCODING       14 
#define i3ds_asn1_RA_IP_IF_Input_REQUIRED_BITS_FOR_ENCODING        111

flag RA_IP_IF_Input_Encode(const RA_IP_IF_Input* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_INPUT		346  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_INPUT_TRG_RAIP_MODE_2		297  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_INPUT_TRG_RAIP_CONFIG_SELECTOR_2		311  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_INPUT_TRG_RAIP_RESET_2		325  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_INPUT_GNC_TIME_2		339  /**/
flag RA_IP_IF_Input_Decode(RA_IP_IF_Input* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    Flg_raip_mode_modeEnum_dis = 0,
    Flg_raip_mode_modeEnum_pbsf = 1
} Flg_raip_mode_modeEnum;

// please use the following macros to avoid breaking code.
#define nsFlg_raip_mode_modeEnum_dis i3ds_asn1::Flg_raip_mode_modeEnum_dis
#define nsFlg_raip_mode_modeEnum_pbsf i3ds_asn1::Flg_raip_mode_modeEnum_pbsf

void Flg_raip_mode_modeEnum_Initialize(Flg_raip_mode_modeEnum* pVal);

#define i3ds_asn1_ERR_FLG_RAIP_MODE_MODEENUM		351  /**/
flag Flg_raip_mode_modeEnum_IsConstraintValid(const Flg_raip_mode_modeEnum* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_FLG_RAIP_MODE_MODEENUM		352  /**/
#define i3ds_asn1_Flg_raip_mode_modeEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_Flg_raip_mode_modeEnum_REQUIRED_BITS_FOR_ENCODING        1

flag Flg_raip_mode_modeEnum_Encode(const Flg_raip_mode_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_FLG_RAIP_MODE_MODEENUM		353  /**/
flag Flg_raip_mode_modeEnum_Decode(Flg_raip_mode_modeEnum* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- RA_IP_IF_Output --------------------------------------------*/


typedef struct {
    int nCount; 
    
    T_Double arr[3];
} RA_IP_IF_Output_rgti_pos_rgti_clt_meas;


typedef struct {
    int nCount; 
    
    T_Double arr[3];
} RA_IP_IF_Output_rgti_vel_rgti_clt_meas;


typedef struct {
    int nCount; 
    
    T_Double arr[4];
} RA_IP_IF_Output_q_rgti_clt_meas;


typedef struct {
    int nCount; 
    
    T_Double arr[3];
} RA_IP_IF_Output_rgti_rate_rgti_clt_meas;
typedef struct {
    RA_IP_IF_Output_rgti_pos_rgti_clt_meas rgti_pos_rgti_clt_meas;
    RA_IP_IF_Output_rgti_vel_rgti_clt_meas rgti_vel_rgti_clt_meas;
    RA_IP_IF_Output_q_rgti_clt_meas q_rgti_clt_meas;
    RA_IP_IF_Output_rgti_rate_rgti_clt_meas rgti_rate_rgti_clt_meas;
    T_Boolean flg_raip_converged_meas;
    T_Boolean flg_raip_trackloss_meas;
    T_Boolean flg_rppj_pc_used_meas;
    Flg_raip_mode_modeEnum flg_raip_mode;

} RA_IP_IF_Output;

void RA_IP_IF_Output_rgti_pos_rgti_clt_meas_Initialize(RA_IP_IF_Output_rgti_pos_rgti_clt_meas* pVal);
void RA_IP_IF_Output_rgti_vel_rgti_clt_meas_Initialize(RA_IP_IF_Output_rgti_vel_rgti_clt_meas* pVal);
void RA_IP_IF_Output_q_rgti_clt_meas_Initialize(RA_IP_IF_Output_q_rgti_clt_meas* pVal);
void RA_IP_IF_Output_rgti_rate_rgti_clt_meas_Initialize(RA_IP_IF_Output_rgti_rate_rgti_clt_meas* pVal);
void RA_IP_IF_Output_Initialize(RA_IP_IF_Output* pVal);

#define i3ds_asn1_ERR_RA_IP_IF_OUTPUT		498  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_RGTI_POS_RGTI_CLT_MEAS		372  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_RGTI_POS_RGTI_CLT_MEAS_ELM_2		365  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_RGTI_VEL_RGTI_CLT_MEAS		393  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_RGTI_VEL_RGTI_CLT_MEAS_ELM_2		386  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_Q_RGTI_CLT_MEAS		414  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_Q_RGTI_CLT_MEAS_ELM_2		407  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_RGTI_RATE_RGTI_CLT_MEAS		435  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_RGTI_RATE_RGTI_CLT_MEAS_ELM_2		428  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_FLG_RAIP_CONVERGED_MEAS_2		449  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_FLG_RAIP_TRACKLOSS_MEAS_2		463  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_FLG_RPPJ_PC_USED_MEAS_2		477  /**/
#define i3ds_asn1_i3ds_asn1_ERR_RA_IP_IF_OUTPUT_FLG_RAIP_MODE_2		491  /**/
flag RA_IP_IF_Output_IsConstraintValid(const RA_IP_IF_Output* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT		499  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_RGTI_POS_RGTI_CLT_MEAS		373  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_RGTI_POS_RGTI_CLT_MEAS_ELM_2		366  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_RGTI_VEL_RGTI_CLT_MEAS		394  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_RGTI_VEL_RGTI_CLT_MEAS_ELM_2		387  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_Q_RGTI_CLT_MEAS		415  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_Q_RGTI_CLT_MEAS_ELM_2		408  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_RGTI_RATE_RGTI_CLT_MEAS		436  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_RGTI_RATE_RGTI_CLT_MEAS_ELM_2		429  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_FLG_RAIP_CONVERGED_MEAS_2		450  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_FLG_RAIP_TRACKLOSS_MEAS_2		464  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_FLG_RPPJ_PC_USED_MEAS_2		478  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_RA_IP_IF_OUTPUT_FLG_RAIP_MODE_2		492  /**/
#define i3ds_asn1_RA_IP_IF_Output_REQUIRED_BYTES_FOR_ENCODING       171 
#define i3ds_asn1_RA_IP_IF_Output_REQUIRED_BITS_FOR_ENCODING        1364

flag RA_IP_IF_Output_Encode(const RA_IP_IF_Output* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT		500  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_RGTI_POS_RGTI_CLT_MEAS		374  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_RGTI_POS_RGTI_CLT_MEAS_ELM_2		367  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_RGTI_VEL_RGTI_CLT_MEAS		395  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_RGTI_VEL_RGTI_CLT_MEAS_ELM_2		388  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_Q_RGTI_CLT_MEAS		416  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_Q_RGTI_CLT_MEAS_ELM_2		409  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_RGTI_RATE_RGTI_CLT_MEAS		437  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_RGTI_RATE_RGTI_CLT_MEAS_ELM_2		430  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_FLG_RAIP_CONVERGED_MEAS_2		451  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_FLG_RAIP_TRACKLOSS_MEAS_2		465  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_FLG_RPPJ_PC_USED_MEAS_2		479  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_RA_IP_IF_OUTPUT_FLG_RAIP_MODE_2		493  /**/
flag RA_IP_IF_Output_Decode(RA_IP_IF_Output* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 



} // namespace i3ds_asn1
#endif
