#ifndef i3ds_asn1_GENERATED_ASN1SCC_SampleAttribute_H
#define i3ds_asn1_GENERATED_ASN1SCC_SampleAttribute_H
/*
Code automatically generated by asn1scc tool
*/
#include <i3ds_asn1/asn1crt.hpp>
#include <i3ds_asn1/asn1crt_encoding.hpp>

#include <i3ds_asn1/Common.hpp>
#include <i3ds_asn1/taste-extended.hpp>
#include <i3ds_asn1/taste-types.hpp>

namespace i3ds_asn1 {


typedef enum {
    sample_empty = 0,
    sample_valid = 1,
    sample_invalid = 2
} SampleValidity;

// please use the following macros to avoid breaking code.
#define i3ds_asn1_SampleValidity_sample_empty sample_empty
#define i3ds_asn1_SampleValidity_sample_valid sample_valid
#define i3ds_asn1_SampleValidity_sample_invalid sample_invalid

void SampleValidity_Initialize(SampleValidity* pVal);

#define i3ds_asn1_ERR_SAMPLEVALIDITY		2775  /**/
flag SampleValidity_IsConstraintValid(const SampleValidity* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_SAMPLEVALIDITY		2776  /**/
#define i3ds_asn1_SampleValidity_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_SampleValidity_REQUIRED_BITS_FOR_ENCODING        2

flag SampleValidity_Encode(const SampleValidity* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_SAMPLEVALIDITY		2777  /**/
flag SampleValidity_Decode(SampleValidity* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount; 
    
    byte arr[8];
} T_String8;


void T_String8_Initialize(T_String8* pVal);

#define i3ds_asn1_i3ds_asn1_ERR_T_STRING8		2782  /**/
flag T_String8_IsConstraintValid(const T_String8* pVal, int* pErrCode);

#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_T_STRING8		2783  /**/
#define i3ds_asn1_T_String8_REQUIRED_BYTES_FOR_ENCODING       9 
#define i3ds_asn1_T_String8_REQUIRED_BITS_FOR_ENCODING        68

flag T_String8_Encode(const T_String8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_T_STRING8		2784  /**/
flag T_String8_Decode(T_String8* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Attribute_value_t --------------------------------------------*/

typedef enum {
    Attribute_value_t_NONE,
    boolean_value_PRESENT,
    discrete_value_PRESENT,
    real_value_PRESENT,
    string_value_PRESENT 
} Attribute_value_t_selection;


typedef struct {
    Attribute_value_t_selection kind;
    
    union {
        T_Boolean boolean_value;
        T_Int64 discrete_value;
        T_Double real_value;
        T_String8 string_value;
    } u; 
} Attribute_value_t;

void Attribute_value_t_Initialize(Attribute_value_t* pVal);

#define i3ds_asn1_ERR_ATTRIBUTE_VALUE_T		2837  /**/
#define i3ds_asn1_i3ds_asn1_ERR_ATTRIBUTE_VALUE_T_BOOLEAN_VALUE_2		2796  /**/
#define i3ds_asn1_i3ds_asn1_ERR_ATTRIBUTE_VALUE_T_DISCRETE_VALUE_2		2808  /**/
#define i3ds_asn1_i3ds_asn1_ERR_ATTRIBUTE_VALUE_T_REAL_VALUE_2		2820  /**/
#define i3ds_asn1_i3ds_asn1_ERR_ATTRIBUTE_VALUE_T_STRING_VALUE_2		2832  /**/
flag Attribute_value_t_IsConstraintValid(const Attribute_value_t* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_ATTRIBUTE_VALUE_T		2838  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_ATTRIBUTE_VALUE_T_BOOLEAN_VALUE_2		2797  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_ATTRIBUTE_VALUE_T_DISCRETE_VALUE_2		2809  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_ATTRIBUTE_VALUE_T_REAL_VALUE_2		2821  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_ATTRIBUTE_VALUE_T_STRING_VALUE_2		2833  /**/
#define i3ds_asn1_Attribute_value_t_REQUIRED_BYTES_FOR_ENCODING       14 
#define i3ds_asn1_Attribute_value_t_REQUIRED_BITS_FOR_ENCODING        106

flag Attribute_value_t_Encode(const Attribute_value_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_ATTRIBUTE_VALUE_T		2839  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_ATTRIBUTE_VALUE_T_BOOLEAN_VALUE_2		2798  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_ATTRIBUTE_VALUE_T_DISCRETE_VALUE_2		2810  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_ATTRIBUTE_VALUE_T_REAL_VALUE_2		2822  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_ATTRIBUTE_VALUE_T_STRING_VALUE_2		2834  /**/
flag Attribute_value_t_Decode(Attribute_value_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Sample_attribute_t --------------------------------------------*/
typedef struct {
    T_UInt8 attribute_key;
    Attribute_value_t attribute_value;

} Sample_attribute_t;

void Sample_attribute_t_Initialize(Sample_attribute_t* pVal);

#define i3ds_asn1_ERR_SAMPLE_ATTRIBUTE_T		2916  /**/
#define i3ds_asn1_i3ds_asn1_ERR_SAMPLE_ATTRIBUTE_T_ATTRIBUTE_KEY_2		2851  /**/
#define i3ds_asn1_i3ds_asn1_ERR_SAMPLE_ATTRIBUTE_T_ATTRIBUTE_VALUE_2		2911  /**/
flag Sample_attribute_t_IsConstraintValid(const Sample_attribute_t* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_SAMPLE_ATTRIBUTE_T		2917  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_SAMPLE_ATTRIBUTE_T_ATTRIBUTE_KEY_2		2852  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_SAMPLE_ATTRIBUTE_T_ATTRIBUTE_VALUE_2		2912  /**/
#define i3ds_asn1_Sample_attribute_t_REQUIRED_BYTES_FOR_ENCODING       15 
#define i3ds_asn1_Sample_attribute_t_REQUIRED_BITS_FOR_ENCODING        114

flag Sample_attribute_t_Encode(const Sample_attribute_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_SAMPLE_ATTRIBUTE_T		2918  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_SAMPLE_ATTRIBUTE_T_ATTRIBUTE_KEY_2		2853  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_SAMPLE_ATTRIBUTE_T_ATTRIBUTE_VALUE_2		2913  /**/
flag Sample_attribute_t_Decode(Sample_attribute_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- SampleAttributes --------------------------------------------*/


typedef struct {
    int nCount; 
    
    Sample_attribute_t arr[4];
} SampleAttributes_attributes;
typedef struct {
    T_Int64 timestamp;
    SampleValidity validity;
    SampleAttributes_attributes attributes;

} SampleAttributes;

void SampleAttributes_attributes_Initialize(SampleAttributes_attributes* pVal);
void SampleAttributes_Initialize(SampleAttributes* pVal);

#define i3ds_asn1_ERR_SAMPLEATTRIBUTES		3043  /**/
#define i3ds_asn1_i3ds_asn1_ERR_SAMPLEATTRIBUTES_TIMESTAMP_2_2		2935  /**/
#define i3ds_asn1_i3ds_asn1_ERR_SAMPLEATTRIBUTES_VALIDITY_2		2947  /**/
#define i3ds_asn1_i3ds_asn1_ERR_SAMPLEATTRIBUTES_ATTRIBUTES		3036  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_SAMPLEATTRIBUTES_ATTRIBUTES_ELM_2		3031  /**/
flag SampleAttributes_IsConstraintValid(const SampleAttributes* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_SAMPLEATTRIBUTES		3044  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_SAMPLEATTRIBUTES_TIMESTAMP_2_2		2936  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_SAMPLEATTRIBUTES_VALIDITY_2		2948  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_SAMPLEATTRIBUTES_ATTRIBUTES		3037  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_SAMPLEATTRIBUTES_ATTRIBUTES_ELM_2		3032  /**/
#define i3ds_asn1_SampleAttributes_REQUIRED_BYTES_FOR_ENCODING       66 
#define i3ds_asn1_SampleAttributes_REQUIRED_BITS_FOR_ENCODING        525

flag SampleAttributes_Encode(const SampleAttributes* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_SAMPLEATTRIBUTES		3045  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_SAMPLEATTRIBUTES_TIMESTAMP_2_2		2937  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_SAMPLEATTRIBUTES_VALIDITY_2		2949  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_SAMPLEATTRIBUTES_ATTRIBUTES		3038  /**/
#define i3ds_asn1_i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_SAMPLEATTRIBUTES_ATTRIBUTES_ELM_2		3033  /**/
flag SampleAttributes_Decode(SampleAttributes* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 



} // namespace i3ds_asn1
#endif
