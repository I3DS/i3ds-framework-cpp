#ifndef i3ds_asn1_GENERATED_ASN1SCC_PointCloud_H
#define i3ds_asn1_GENERATED_ASN1SCC_PointCloud_H
/*
Code automatically generated by asn1scc tool
*/
#include <i3ds_asn1/asn1crt.hpp>
#include <i3ds_asn1/asn1crt_encoding.hpp>

#include <i3ds_asn1/taste-types.hpp>
#include <i3ds_asn1/taste-extended.hpp>
#include <i3ds_asn1/SampleAttribute.hpp>
#include <i3ds_asn1/Region.hpp>

namespace i3ds_asn1 {


/*-- PointCloudAcquire --------------------------------------------*/
typedef struct {
    T_Boolean publish_images;

} PointCloudAcquire;

void PointCloudAcquire_Initialize(PointCloudAcquire* pVal);

#define i3ds_asn1_ERR_POINTCLOUDACQUIRE		10241  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDACQUIRE_PUBLISH_IMAGES_2		10236  /**/
flag PointCloudAcquire_IsConstraintValid(const PointCloudAcquire* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDACQUIRE		10242  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDACQUIRE_PUBLISH_IMAGES_2		10237  /**/
#define i3ds_asn1_PointCloudAcquire_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_PointCloudAcquire_REQUIRED_BITS_FOR_ENCODING        1

flag PointCloudAcquire_Encode(const PointCloudAcquire* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDACQUIRE		10243  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDACQUIRE_PUBLISH_IMAGES_2		10238  /**/
flag PointCloudAcquire_Decode(PointCloudAcquire* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    Point_format_t_fields_xyz_f = 0
} Point_format_t;

// please use the following macros to avoid breaking code.
#define nsPoint_format_t_fields_xyz_f i3ds_asn1::Point_format_t_fields_xyz_f

void Point_format_t_Initialize(Point_format_t* pVal);

#define i3ds_asn1_ERR_POINT_FORMAT_T		9997  /**/
flag Point_format_t_IsConstraintValid(const Point_format_t* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POINT_FORMAT_T		9998  /**/
#define i3ds_asn1_Point_format_t_REQUIRED_BYTES_FOR_ENCODING       0 
#define i3ds_asn1_Point_format_t_REQUIRED_BITS_FOR_ENCODING        0

flag Point_format_t_Encode(const Point_format_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POINT_FORMAT_T		9999  /**/
flag Point_format_t_Decode(Point_format_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PointCloudDescriptor --------------------------------------------*/
typedef struct {
    SampleAttributes attributes;
    Point_format_t point_format;
    T_UInt16 point_size;
    T_UInt32 width;
    T_UInt32 height;

} PointCloudDescriptor;

void PointCloudDescriptor_Initialize(PointCloudDescriptor* pVal);

#define i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR		10184  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		10131  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		10143  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		10155  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_WIDTH_2		10167  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_HEIGHT_2		10179  /**/
flag PointCloudDescriptor_IsConstraintValid(const PointCloudDescriptor* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR		10185  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		10132  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		10144  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		10156  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_WIDTH_2		10168  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_HEIGHT_2		10180  /**/
#define i3ds_asn1_PointCloudDescriptor_REQUIRED_BYTES_FOR_ENCODING       76 
#define i3ds_asn1_PointCloudDescriptor_REQUIRED_BITS_FOR_ENCODING        605

flag PointCloudDescriptor_Encode(const PointCloudDescriptor* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR		10186  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		10133  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		10145  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		10157  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_WIDTH_2		10169  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_HEIGHT_2		10181  /**/
flag PointCloudDescriptor_Decode(PointCloudDescriptor* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PointCloudSensorMode_mode_undefined = 0,
    PointCloudSensorMode_mode_camera = 1,
    PointCloudSensorMode_mode_camera_oneshot = 2,
    PointCloudSensorMode_mode_structured_light = 3
} PointCloudSensorMode;

// please use the following macros to avoid breaking code.
#define nsPointCloudSensorMode_mode_undefined i3ds_asn1::PointCloudSensorMode_mode_undefined
#define nsPointCloudSensorMode_mode_camera i3ds_asn1::PointCloudSensorMode_mode_camera
#define nsPointCloudSensorMode_mode_camera_oneshot i3ds_asn1::PointCloudSensorMode_mode_camera_oneshot
#define nsPointCloudSensorMode_mode_structured_light i3ds_asn1::PointCloudSensorMode_mode_structured_light

void PointCloudSensorMode_Initialize(PointCloudSensorMode* pVal);

#define i3ds_asn1_ERR_POINTCLOUDSENSORMODE		10191  /**/
flag PointCloudSensorMode_IsConstraintValid(const PointCloudSensorMode* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDSENSORMODE		10192  /**/
#define i3ds_asn1_PointCloudSensorMode_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_PointCloudSensorMode_REQUIRED_BITS_FOR_ENCODING        2

flag PointCloudSensorMode_Encode(const PointCloudSensorMode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDSENSORMODE		10193  /**/
flag PointCloudSensorMode_Decode(PointCloudSensorMode* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PointCloudMode --------------------------------------------*/
typedef struct {
    PointCloudSensorMode mode;
    T_Boolean enable_flash;

} PointCloudMode;

void PointCloudMode_Initialize(PointCloudMode* pVal);

#define i3ds_asn1_ERR_POINTCLOUDMODE		10222  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDMODE_MODE_2		10205  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDMODE_ENABLE_FLASH_2		10217  /**/
flag PointCloudMode_IsConstraintValid(const PointCloudMode* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDMODE		10223  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDMODE_MODE_2		10206  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDMODE_ENABLE_FLASH_2		10218  /**/
#define i3ds_asn1_PointCloudMode_REQUIRED_BYTES_FOR_ENCODING       1 
#define i3ds_asn1_PointCloudMode_REQUIRED_BITS_FOR_ENCODING        3

flag PointCloudMode_Encode(const PointCloudMode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDMODE		10224  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDMODE_MODE_2		10207  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDMODE_ENABLE_FLASH_2		10219  /**/
flag PointCloudMode_Decode(PointCloudMode* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 



} // namespace i3ds_asn1
#endif
