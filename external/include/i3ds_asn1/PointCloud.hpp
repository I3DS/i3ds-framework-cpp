#ifndef i3ds_asn1_GENERATED_ASN1SCC_PointCloud_H
#define i3ds_asn1_GENERATED_ASN1SCC_PointCloud_H
/*
Code automatically generated by asn1scc tool
*/
#include <i3ds_asn1/asn1crt.hpp>
#include <i3ds_asn1/asn1crt_encoding.hpp>

#include <i3ds_asn1/taste-types.hpp>
#include <i3ds_asn1/taste-extended.hpp>
#include <i3ds_asn1/SampleAttribute.hpp>
#include <i3ds_asn1/Region.hpp>

namespace i3ds_asn1 {


typedef enum {
    fields_xyz_f = 0
} Point_format_t;

// please use the following macros to avoid breaking code.
#define i3ds_asn1_Point_format_t_fields_xyz_f fields_xyz_f

void Point_format_t_Initialize(Point_format_t* pVal);

#define i3ds_asn1_ERR_POINT_FORMAT_T		770  /**/
flag Point_format_t_IsConstraintValid(const Point_format_t* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POINT_FORMAT_T		771  /**/
#define i3ds_asn1_Point_format_t_REQUIRED_BYTES_FOR_ENCODING       0 
#define i3ds_asn1_Point_format_t_REQUIRED_BITS_FOR_ENCODING        0

flag Point_format_t_Encode(const Point_format_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POINT_FORMAT_T		772  /**/
flag Point_format_t_Decode(Point_format_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PointCloudDescriptor --------------------------------------------*/
typedef struct {
    SampleAttributes attributes;
    Point_format_t point_format;
    T_UInt16 point_size;
    T_UInt32 width;
    T_UInt32 height;

} PointCloudDescriptor;

void PointCloudDescriptor_Initialize(PointCloudDescriptor* pVal);

#define i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR		957  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		904  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		916  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		928  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_WIDTH_2		940  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POINTCLOUDDESCRIPTOR_HEIGHT_2		952  /**/
flag PointCloudDescriptor_IsConstraintValid(const PointCloudDescriptor* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR		958  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		905  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		917  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		929  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_WIDTH_2		941  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POINTCLOUDDESCRIPTOR_HEIGHT_2		953  /**/
#define i3ds_asn1_PointCloudDescriptor_REQUIRED_BYTES_FOR_ENCODING       76 
#define i3ds_asn1_PointCloudDescriptor_REQUIRED_BITS_FOR_ENCODING        605

flag PointCloudDescriptor_Encode(const PointCloudDescriptor* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR		959  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_ATTRIBUTES_2		906  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_POINT_FORMAT_2		918  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_POINT_SIZE_2		930  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_WIDTH_2		942  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POINTCLOUDDESCRIPTOR_HEIGHT_2		954  /**/
flag PointCloudDescriptor_Decode(PointCloudDescriptor* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 



} // namespace i3ds_asn1
#endif
