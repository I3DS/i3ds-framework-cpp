#ifndef i3ds_asn1_GENERATED_ASN1SCC_taste_extended_H
#define i3ds_asn1_GENERATED_ASN1SCC_taste_extended_H
/*
Code automatically generated by asn1scc tool
*/
#include <i3ds_asn1/asn1crt.hpp>
#include <i3ds_asn1/asn1crt_encoding.hpp>

#include <i3ds_asn1/taste-types.hpp>

namespace i3ds_asn1 {


/*-- T_Time --------------------------------------------*/
typedef struct {
    T_UInt32 secs;
    T_UInt32 nsecs;

} T_Time;

void T_Time_Initialize(T_Time* pVal);

#define i3ds_asn1_ERR_T_TIME		8876  /**/
#define i3ds_asn1_i3ds_asn1_ERR_T_TIME_SECS_2		8859  /**/
#define i3ds_asn1_i3ds_asn1_ERR_T_TIME_NSECS_2		8871  /**/
flag T_Time_IsConstraintValid(const T_Time* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_TIME		8877  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_T_TIME_SECS_2		8860  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_T_TIME_NSECS_2		8872  /**/
#define i3ds_asn1_T_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define i3ds_asn1_T_Time_REQUIRED_BITS_FOR_ENCODING        64

flag T_Time_Encode(const T_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_TIME		8878  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_T_TIME_SECS_2		8861  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_T_TIME_NSECS_2		8873  /**/
flag T_Time_Decode(T_Time* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Double;


void T_Double_Initialize(T_Double* pVal);

#define i3ds_asn1_ERR_T_DOUBLE		8803  /**/
flag T_Double_IsConstraintValid(const T_Double* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_DOUBLE		8804  /**/
#define i3ds_asn1_T_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define i3ds_asn1_T_Double_REQUIRED_BITS_FOR_ENCODING        104

flag T_Double_Encode(const T_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_DOUBLE		8805  /**/
flag T_Double_Decode(T_Double* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real T_Float;


void T_Float_Initialize(T_Float* pVal);

#define i3ds_asn1_ERR_T_FLOAT		8810  /**/
flag T_Float_IsConstraintValid(const T_Float* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_FLOAT		8811  /**/
#define i3ds_asn1_T_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define i3ds_asn1_T_Float_REQUIRED_BITS_FOR_ENCODING        104

flag T_Float_Encode(const T_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_FLOAT		8812  /**/
flag T_Float_Decode(T_Float* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int16;


void T_Int16_Initialize(T_Int16* pVal);

#define i3ds_asn1_ERR_T_INT16		8817  /**/
flag T_Int16_IsConstraintValid(const T_Int16* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_INT16		8818  /**/
#define i3ds_asn1_T_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define i3ds_asn1_T_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag T_Int16_Encode(const T_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_INT16		8819  /**/
flag T_Int16_Decode(T_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt16;


void T_UInt16_Initialize(T_UInt16* pVal);

#define i3ds_asn1_ERR_T_UINT16		8824  /**/
flag T_UInt16_IsConstraintValid(const T_UInt16* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_UINT16		8825  /**/
#define i3ds_asn1_T_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define i3ds_asn1_T_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag T_UInt16_Encode(const T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_UINT16		8826  /**/
flag T_UInt16_Decode(T_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt64;


void T_UInt64_Initialize(T_UInt64* pVal);

#define i3ds_asn1_ERR_T_UINT64		8831  /**/
flag T_UInt64_IsConstraintValid(const T_UInt64* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_UINT64		8832  /**/
#define i3ds_asn1_T_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define i3ds_asn1_T_UInt64_REQUIRED_BITS_FOR_ENCODING        64

flag T_UInt64_Encode(const T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_UINT64		8833  /**/
flag T_UInt64_Decode(T_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int64;


void T_Int64_Initialize(T_Int64* pVal);

#define i3ds_asn1_ERR_T_INT64		8838  /**/
flag T_Int64_IsConstraintValid(const T_Int64* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_INT64		8839  /**/
#define i3ds_asn1_T_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define i3ds_asn1_T_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag T_Int64_Encode(const T_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_INT64		8840  /**/
flag T_Int64_Decode(T_Int64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount; 
    
    byte arr[40];
} T_String;


void T_String_Initialize(T_String* pVal);

#define i3ds_asn1_ERR_T_STRING		8845  /**/
flag T_String_IsConstraintValid(const T_String* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_T_STRING		8846  /**/
#define i3ds_asn1_T_String_REQUIRED_BYTES_FOR_ENCODING       41 
#define i3ds_asn1_T_String_REQUIRED_BITS_FOR_ENCODING        326

flag T_String_Encode(const T_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_T_STRING		8847  /**/
flag T_String_Decode(T_String* pVal, BitStream* pBitStrm, int* pErrCode);

extern const T_UInt32 numT_String; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 



} // namespace i3ds_asn1
#endif
