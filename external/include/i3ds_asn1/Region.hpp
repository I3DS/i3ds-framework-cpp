#ifndef i3ds_asn1_GENERATED_ASN1SCC_Region_H
#define i3ds_asn1_GENERATED_ASN1SCC_Region_H
/*
Code automatically generated by asn1scc tool
*/
#include <i3ds_asn1/asn1crt.hpp>
#include <i3ds_asn1/asn1crt_encoding.hpp>

#include <i3ds_asn1/taste-extended.hpp>

namespace i3ds_asn1 {


/*-- PlanarRegion --------------------------------------------*/
typedef struct {
    T_UInt16 offset_x;
    T_UInt16 offset_y;
    T_UInt16 size_x;
    T_UInt16 size_y;

} PlanarRegion;

void PlanarRegion_Initialize(PlanarRegion* pVal);

#define i3ds_asn1_ERR_PLANARREGION		11961  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_OFFSET_X_2		11920  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_OFFSET_Y_2		11932  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_SIZE_X_2		11944  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_SIZE_Y_2		11956  /**/
flag PlanarRegion_IsConstraintValid(const PlanarRegion* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION		11962  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_OFFSET_X_2		11921  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_OFFSET_Y_2		11933  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_SIZE_X_2		11945  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_SIZE_Y_2		11957  /**/
#define i3ds_asn1_PlanarRegion_REQUIRED_BYTES_FOR_ENCODING       8 
#define i3ds_asn1_PlanarRegion_REQUIRED_BITS_FOR_ENCODING        64

flag PlanarRegion_Encode(const PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_PLANARREGION		11963  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_OFFSET_X_2		11922  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_OFFSET_Y_2		11934  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_SIZE_X_2		11946  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_SIZE_Y_2		11958  /**/
flag PlanarRegion_Decode(PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PolarRegion --------------------------------------------*/
typedef struct {
    T_Float offset_x;
    T_Float offset_y;
    T_Float size_x;
    T_Float size_y;

} PolarRegion;

void PolarRegion_Initialize(PolarRegion* pVal);

#define i3ds_asn1_ERR_POLARREGION		12016  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_OFFSET_X_2		11975  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_OFFSET_Y_2		11987  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_SIZE_X_2		11999  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_SIZE_Y_2		12011  /**/
flag PolarRegion_IsConstraintValid(const PolarRegion* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POLARREGION		12017  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_OFFSET_X_2		11976  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_OFFSET_Y_2		11988  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_SIZE_X_2		12000  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_SIZE_Y_2		12012  /**/
#define i3ds_asn1_PolarRegion_REQUIRED_BYTES_FOR_ENCODING       52 
#define i3ds_asn1_PolarRegion_REQUIRED_BITS_FOR_ENCODING        416

flag PolarRegion_Encode(const PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POLARREGION		12018  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_OFFSET_X_2		11977  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_OFFSET_Y_2		11989  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_SIZE_X_2		12001  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_SIZE_Y_2		12013  /**/
flag PolarRegion_Decode(PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 



} // namespace i3ds_asn1
#endif
