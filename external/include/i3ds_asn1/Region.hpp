#ifndef i3ds_asn1_GENERATED_ASN1SCC_Region_H
#define i3ds_asn1_GENERATED_ASN1SCC_Region_H
/*
Code automatically generated by asn1scc tool
*/
#include <i3ds_asn1/asn1crt.hpp>
#include <i3ds_asn1/asn1crt_encoding.hpp>

#include <i3ds_asn1/taste-extended.hpp>

namespace i3ds_asn1 {


/*-- PlanarRegion --------------------------------------------*/
typedef struct {
    T_UInt16 offset_x;
    T_UInt16 offset_y;
    T_UInt16 size_x;
    T_UInt16 size_y;

} PlanarRegion;

void PlanarRegion_Initialize(PlanarRegion* pVal);

#define i3ds_asn1_ERR_PLANARREGION		2713  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_OFFSET_X_2		2672  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_OFFSET_Y_2		2684  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_SIZE_X_2		2696  /**/
#define i3ds_asn1_i3ds_asn1_ERR_PLANARREGION_SIZE_Y_2		2708  /**/
flag PlanarRegion_IsConstraintValid(const PlanarRegion* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION		2714  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_OFFSET_X_2		2673  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_OFFSET_Y_2		2685  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_SIZE_X_2		2697  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_PLANARREGION_SIZE_Y_2		2709  /**/
#define i3ds_asn1_PlanarRegion_REQUIRED_BYTES_FOR_ENCODING       8 
#define i3ds_asn1_PlanarRegion_REQUIRED_BITS_FOR_ENCODING        64

flag PlanarRegion_Encode(const PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_PLANARREGION		2715  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_OFFSET_X_2		2674  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_OFFSET_Y_2		2686  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_SIZE_X_2		2698  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_PLANARREGION_SIZE_Y_2		2710  /**/
flag PlanarRegion_Decode(PlanarRegion* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PolarRegion --------------------------------------------*/
typedef struct {
    T_Float offset_x;
    T_Float offset_y;
    T_Float size_x;
    T_Float size_y;

} PolarRegion;

void PolarRegion_Initialize(PolarRegion* pVal);

#define i3ds_asn1_ERR_POLARREGION		2768  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_OFFSET_X_2		2727  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_OFFSET_Y_2		2739  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_SIZE_X_2		2751  /**/
#define i3ds_asn1_i3ds_asn1_ERR_POLARREGION_SIZE_Y_2		2763  /**/
flag PolarRegion_IsConstraintValid(const PolarRegion* pVal, int* pErrCode);

#define i3ds_asn1_ERR_UPER_ENCODE_POLARREGION		2769  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_OFFSET_X_2		2728  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_OFFSET_Y_2		2740  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_SIZE_X_2		2752  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_ENCODE_POLARREGION_SIZE_Y_2		2764  /**/
#define i3ds_asn1_PolarRegion_REQUIRED_BYTES_FOR_ENCODING       52 
#define i3ds_asn1_PolarRegion_REQUIRED_BITS_FOR_ENCODING        416

flag PolarRegion_Encode(const PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define i3ds_asn1_ERR_UPER_DECODE_POLARREGION		2770  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_OFFSET_X_2		2729  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_OFFSET_Y_2		2741  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_SIZE_X_2		2753  /**/
#define i3ds_asn1_i3ds_asn1_ERR_UPER_DECODE_POLARREGION_SIZE_Y_2		2765  /**/
flag PolarRegion_Decode(PolarRegion* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 



} // namespace i3ds_asn1
#endif
